
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008074  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008274  08008274  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800827c  0800827c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000074  080082f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  080082f8  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b0e  00000000  00000000  00035476  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  00039240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000462f  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f791  00000000  00000000  0003e9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e20cd  00000000  00000000  0004e150  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013021d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  00130298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800823c 	.word	0x0800823c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800823c 	.word	0x0800823c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b972 	b.w	8000d08 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	4688      	mov	r8, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14b      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	d967      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0720 	rsb	r7, r2, #32
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a62:	4095      	lsls	r5, r2
 8000a64:	ea47 0803 	orr.w	r8, r7, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a74:	fa1f fc85 	uxth.w	ip, r5
 8000a78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a80:	fb07 f10c 	mul.w	r1, r7, ip
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18eb      	adds	r3, r5, r3
 8000a8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a8e:	f080 811b 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8118 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000a98:	3f02      	subs	r7, #2
 8000a9a:	442b      	add	r3, r5
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab0:	45a4      	cmp	ip, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	192c      	adds	r4, r5, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8107 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	f240 8104 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	442c      	add	r4, r5
 8000ac8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000acc:	eba4 040c 	sub.w	r4, r4, ip
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	b11e      	cbz	r6, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c6 4300 	strd	r4, r3, [r6]
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0xbe>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80eb 	beq.w	8000cc2 <__udivmoddi4+0x286>
 8000aec:	2700      	movs	r7, #0
 8000aee:	e9c6 0100 	strd	r0, r1, [r6]
 8000af2:	4638      	mov	r0, r7
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f783 	clz	r7, r3
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d147      	bne.n	8000b92 <__udivmoddi4+0x156>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xd0>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80fa 	bhi.w	8000d00 <__udivmoddi4+0x2c4>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d0e0      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b1e:	e7dd      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b20:	b902      	cbnz	r2, 8000b24 <__udivmoddi4+0xe8>
 8000b22:	deff      	udf	#255	; 0xff
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	f040 808f 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2e:	1b49      	subs	r1, r1, r5
 8000b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b34:	fa1f f885 	uxth.w	r8, r5
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb08 f10c 	mul.w	r1, r8, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x14c>
 8000b78:	192c      	adds	r4, r5, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x14a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80b6 	bhi.w	8000cf2 <__udivmoddi4+0x2b6>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e79f      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b92:	f1c7 0c20 	rsb	ip, r7, #32
 8000b96:	40bb      	lsls	r3, r7
 8000b98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ba4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bb6:	0c2c      	lsrs	r4, r5, #16
 8000bb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bbc:	fa1f fa8e 	uxth.w	sl, lr
 8000bc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	fa02 f207 	lsl.w	r2, r2, r7
 8000bce:	fa00 f107 	lsl.w	r1, r0, r7
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bdc:	f080 8087 	bcs.w	8000cee <__udivmoddi4+0x2b2>
 8000be0:	429c      	cmp	r4, r3
 8000be2:	f240 8084 	bls.w	8000cee <__udivmoddi4+0x2b2>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4473      	add	r3, lr
 8000bec:	1b1b      	subs	r3, r3, r4
 8000bee:	b2ad      	uxth	r5, r5
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c00:	45a2      	cmp	sl, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1e 0404 	adds.w	r4, lr, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	d26b      	bcs.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c0e:	45a2      	cmp	sl, r4
 8000c10:	d969      	bls.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4474      	add	r4, lr
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c1e:	eba4 040a 	sub.w	r4, r4, sl
 8000c22:	454c      	cmp	r4, r9
 8000c24:	46c2      	mov	sl, r8
 8000c26:	464b      	mov	r3, r9
 8000c28:	d354      	bcc.n	8000cd4 <__udivmoddi4+0x298>
 8000c2a:	d051      	beq.n	8000cd0 <__udivmoddi4+0x294>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d069      	beq.n	8000d04 <__udivmoddi4+0x2c8>
 8000c30:	ebb1 050a 	subs.w	r5, r1, sl
 8000c34:	eb64 0403 	sbc.w	r4, r4, r3
 8000c38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	40fc      	lsrs	r4, r7
 8000c40:	ea4c 0505 	orr.w	r5, ip, r5
 8000c44:	e9c6 5400 	strd	r5, r4, [r6]
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e747      	b.n	8000adc <__udivmoddi4+0xa0>
 8000c4c:	f1c2 0320 	rsb	r3, r2, #32
 8000c50:	fa20 f703 	lsr.w	r7, r0, r3
 8000c54:	4095      	lsls	r5, r2
 8000c56:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c62:	4338      	orrs	r0, r7
 8000c64:	0c01      	lsrs	r1, r0, #16
 8000c66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c6a:	fa1f f885 	uxth.w	r8, r5
 8000c6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c76:	fb07 f308 	mul.w	r3, r7, r8
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x256>
 8000c82:	1869      	adds	r1, r5, r1
 8000c84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c88:	d22f      	bcs.n	8000cea <__udivmoddi4+0x2ae>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d92d      	bls.n	8000cea <__udivmoddi4+0x2ae>
 8000c8e:	3f02      	subs	r7, #2
 8000c90:	4429      	add	r1, r5
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	b281      	uxth	r1, r0
 8000c96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca2:	fb00 f308 	mul.w	r3, r0, r8
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x27e>
 8000caa:	1869      	adds	r1, r5, r1
 8000cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb0:	d217      	bcs.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d915      	bls.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4429      	add	r1, r5
 8000cba:	1ac9      	subs	r1, r1, r3
 8000cbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc0:	e73b      	b.n	8000b3a <__udivmoddi4+0xfe>
 8000cc2:	4637      	mov	r7, r6
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e709      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc8:	4607      	mov	r7, r0
 8000cca:	e6e7      	b.n	8000a9c <__udivmoddi4+0x60>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e6fb      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000cd0:	4541      	cmp	r1, r8
 8000cd2:	d2ab      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cdc:	3801      	subs	r0, #1
 8000cde:	4613      	mov	r3, r2
 8000ce0:	e7a4      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce2:	4660      	mov	r0, ip
 8000ce4:	e7e9      	b.n	8000cba <__udivmoddi4+0x27e>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e795      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cea:	4667      	mov	r7, ip
 8000cec:	e7d1      	b.n	8000c92 <__udivmoddi4+0x256>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e77c      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	442c      	add	r4, r5
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0x14c>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	442b      	add	r3, r5
 8000cfe:	e72f      	b.n	8000b60 <__udivmoddi4+0x124>
 8000d00:	4638      	mov	r0, r7
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xda>
 8000d04:	4637      	mov	r7, r6
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0xa0>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <ESC_CPLT_CALLBACK>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_CONSUME_BIT(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

void ESC_CPLT_CALLBACK(DMA_HandleTypeDef* dma)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	int a = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
	int b = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <ESC_INIT>:

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef* dmaTickTimers, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef* dma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	dmaTickTimers[0].Instance->ARR = TIMER_ARR - 1; // htim4 ARR, synchronize timer that control DMA requests
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaTickTimers[1].Instance->ARR = TIMER_ARR - 1; // htim5 ARR, synchronize timer that control DMA requests
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3340      	adds	r3, #64	; 0x40
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;		// htim3 ARR, synchronize timer that control DMA requests
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable DMA requests on CH1 and CH2
	dmaTickTimers[0].Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE | TIM_DIER_CC3DE;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000d5c:	60da      	str	r2, [r3, #12]
	dmaTickTimers[1].Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3340      	adds	r3, #64	; 0x40
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000d68:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&dmaTickTimers[0], TIM_CHANNEL_1);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f005 fbed 	bl	800654c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&dmaTickTimers[0], TIM_CHANNEL_2);
 8000d72:	2104      	movs	r1, #4
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f005 fbe9 	bl	800654c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&dmaTickTimers[0], TIM_CHANNEL_3);
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f005 fbe5 	bl	800654c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&dmaTickTimers[1], TIM_CHANNEL_2);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3340      	adds	r3, #64	; 0x40
 8000d86:	2104      	movs	r1, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fbdf 	bl	800654c <HAL_TIM_PWM_Start>
	int bytes = sizeof(ESC_CONTROLLER) * ESC_COUNT;
 8000d8e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000d92:	61bb      	str	r3, [r7, #24]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(bytes);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f007 f9c8 	bl	800812c <malloc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ESC_COUNT; i++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e086      	b.n	8000eb4 <ESC_INIT+0x18c>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	225c      	movs	r2, #92	; 0x5c
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4413      	add	r3, r2
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	0099      	lsls	r1, r3, #2
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	225c      	movs	r2, #92	; 0x5c
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	649a      	str	r2, [r3, #72]	; 0x48
		ESC_CONTROLLER[i].Number = i;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	225c      	movs	r2, #92	; 0x5c
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	64da      	str	r2, [r3, #76]	; 0x4c
		ESC_CONTROLLER[i].Timer = pwmTimer;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	225c      	movs	r2, #92	; 0x5c
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	651a      	str	r2, [r3, #80]	; 0x50
		ESC_CONTROLLER[i].DMA = &dma[i];
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	4619      	mov	r1, r3
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	225c      	movs	r2, #92	; 0x5c
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4413      	add	r3, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	440a      	add	r2, r1
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54
 		ESC_CONTROLLER[i].CCR = &(pwmTimer->Instance->CCR1) + i;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	009a      	lsls	r2, r3, #2
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	205c      	movs	r0, #92	; 0x5c
 8000e18:	fb00 f303 	mul.w	r3, r0, r3
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	4403      	add	r3, r0
 8000e20:	440a      	add	r2, r1
 8000e22:	659a      	str	r2, [r3, #88]	; 0x58
		*ESC_CONTROLLER[i].CCR = 0;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	225c      	movs	r2, #92	; 0x5c
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4413      	add	r3, r2
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
		ESC_UPDATE_THROTTLE(&ESC_CONTROLLER[i], 0, 1);
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	225c      	movs	r2, #92	; 0x5c
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4413      	add	r3, r2
 8000e42:	2201      	movs	r2, #1
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f875 	bl	8000f36 <ESC_UPDATE_THROTTLE>
		HAL_TIM_PWM_Start(pwmTimer, ESC_CONTROLLER[i].Channel);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	225c      	movs	r2, #92	; 0x5c
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4413      	add	r3, r2
 8000e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68b8      	ldr	r0, [r7, #8]
 8000e5e:	f005 fb75 	bl	800654c <HAL_TIM_PWM_Start>
		HAL_DMA_RegisterCallback(ESC_CONTROLLER[i].DMA, HAL_DMA_XFER_CPLT_CB_ID, &ESC_CPLT_CALLBACK);
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	225c      	movs	r2, #92	; 0x5c
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e70:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <ESC_INIT+0x1a0>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fbe3 	bl	8003640 <HAL_DMA_RegisterCallback>
		HAL_DMA_Start_IT(ESC_CONTROLLER[i].DMA, (uint32_t) &ESC_CONTROLLER[i].ThrottleDshot,
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	225c      	movs	r2, #92	; 0x5c
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4413      	add	r3, r2
 8000e86:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	225c      	movs	r2, #92	; 0x5c
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	4619      	mov	r1, r3
						(uint32_t) ESC_CONTROLLER[i].CCR, DSHOT_PACKET_SIZE);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	225c      	movs	r2, #92	; 0x5c
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		HAL_DMA_Start_IT(ESC_CONTROLLER[i].DMA, (uint32_t) &ESC_CONTROLLER[i].ThrottleDshot,
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2311      	movs	r3, #17
 8000eaa:	f002 f9bd 	bl	8003228 <HAL_DMA_Start_IT>
	for (int i = 0; i < ESC_COUNT; i++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	f77f af75 	ble.w	8000da6 <ESC_INIT+0x7e>
	}
	return ESC_CONTROLLER;
 8000ebc:	697b      	ldr	r3, [r7, #20]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08000d0d 	.word	0x08000d0d

08000ecc <makeDshotPacketBytes>:

uint16_t makeDshotPacketBytes(uint32_t value, uint8_t telemBit)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	uint16_t packet = (value << 1) | telemBit;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	817b      	strh	r3, [r7, #10]
	int csum = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	int csumData = value;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e009      	b.n	8000f0a <makeDshotPacketBytes+0x3e>
	{
		csum ^= csumData; // xor data by nibbles
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4053      	eors	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
		csumData >>= 4;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	111b      	asrs	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	ddf2      	ble.n	8000ef6 <makeDshotPacketBytes+0x2a>
	}
	csum &= 0xf;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	817b      	strh	r3, [r7, #10]
	return packet;
 8000f28:	897b      	ldrh	r3, [r7, #10]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle, uint8_t telemBit)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b098      	sub	sp, #96	; 0x60
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71fb      	strb	r3, [r7, #7]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle > DSHOT_MAX_THROTTLE) throttle = DSHOT_MAX_THROTTLE;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f4a:	d302      	bcc.n	8000f52 <ESC_UPDATE_THROTTLE+0x1c>
 8000f4c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f50:	60bb      	str	r3, [r7, #8]
	else if (throttle < DSHOT_MIN_THROTTLE) throttle = DSHOT_MIN_THROTTLE;
 	uint16_t dshotBytes = makeDshotPacketBytes(throttle, telemBit);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4619      	mov	r1, r3
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ffb8 	bl	8000ecc <makeDshotPacketBytes>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[17] = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2244      	movs	r2, #68	; 0x44
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 f8f1 	bl	8008152 <memset>
	dshotPacket[16] = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
	// Populate checksum bits
	for (int i = 15; i >= 0; i--)
 8000f74:	230f      	movs	r3, #15
 8000f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f78:	e019      	b.n	8000fae <ESC_UPDATE_THROTTLE+0x78>
	{
		__DSHOT_CONSUME_BIT(dshotPacket[i], dshotBytes);
 8000f7a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <ESC_UPDATE_THROTTLE+0x56>
 8000f86:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000f8a:	e001      	b.n	8000f90 <ESC_UPDATE_THROTTLE+0x5a>
 8000f8c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f98:	440b      	add	r3, r1
 8000f9a:	f843 2c4c 	str.w	r2, [r3, #-76]
		dshotBytes >>= 1;
 8000f9e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	for (int i = 15; i >= 0; i--)
 8000fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000faa:	3b01      	subs	r3, #1
 8000fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dae2      	bge.n	8000f7a <ESC_UPDATE_THROTTLE+0x44>
	}
	memcpy(ESC[0].ThrottleDshot, dshotPacket, sizeof(dshotPacket));
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	f107 0114 	add.w	r1, r7, #20
 8000fbc:	2244      	movs	r2, #68	; 0x44
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f007 f8bc 	bl	800813c <memcpy>
	memcpy(ESC[1].ThrottleDshot, dshotPacket, sizeof(dshotPacket));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	335c      	adds	r3, #92	; 0x5c
 8000fc8:	3304      	adds	r3, #4
 8000fca:	f107 0114 	add.w	r1, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 f8b3 	bl	800813c <memcpy>
	memcpy(ESC[2].ThrottleDshot, dshotPacket, sizeof(dshotPacket));
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	33b8      	adds	r3, #184	; 0xb8
 8000fda:	3304      	adds	r3, #4
 8000fdc:	f107 0114 	add.w	r1, r7, #20
 8000fe0:	2244      	movs	r2, #68	; 0x44
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f007 f8aa 	bl	800813c <memcpy>
	memcpy(ESC[3].ThrottleDshot, dshotPacket, sizeof(dshotPacket));
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000fee:	3304      	adds	r3, #4
 8000ff0:	f107 0114 	add.w	r1, r7, #20
 8000ff4:	2244      	movs	r2, #68	; 0x44
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f8a0 	bl	800813c <memcpy>
}
 8000ffc:	bf00      	nop
 8000ffe:	3760      	adds	r7, #96	; 0x60
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <RX_INIT>:
 */

#include "RX.h"

RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* RX_CONTROLLER = malloc(sizeof(RX_CONTROLLER));
 800100e:	2004      	movs	r0, #4
 8001010:	f007 f88c 	bl	800812c <malloc>
 8001014:	4603      	mov	r3, r0
 8001016:	60fb      	str	r3, [r7, #12]
	RX_CONTROLLER->throttle = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = 0;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = 0;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = 0;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
	RX_CONTROLLER->timerSticks = timerSticks;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
	RX_CONTROLLER->timerSwitches = timerSwitches;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f005 faf6 	bl	8006640 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2104      	movs	r1, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f005 faf0 	bl	8006640 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2108      	movs	r1, #8
 8001066:	4618      	mov	r0, r3
 8001068:	f005 faea 	bl	8006640 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	210c      	movs	r1, #12
 8001072:	4618      	mov	r0, r3
 8001074:	f005 fae4 	bl	8006640 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fade 	bl	8006640 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	210c      	movs	r1, #12
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fad8 	bl	8006640 <HAL_TIM_IC_Start_IT>
	return RX_CONTROLLER;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <RX_UPDATE>:

// TO DO: Debug this
// TO DO: Convert the values before putting them RX_CONTROLLER. Probably best to load into local array then copy into RX_CONTROLLER
void RX_UPDATE(RX_CONTROLLER* RX_CONTROLLER)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	RX_CONTROLLER->throttle = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 fdab 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 80010ae:	4602      	mov	r2, r0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 fda2 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2108      	movs	r1, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 fd99 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 80010d2:	4602      	mov	r2, r0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	210c      	movs	r1, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fd90 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fd87 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 80010f6:	4602      	mov	r2, r0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = HAL_TIM_ReadCapturedValue(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	210c      	movs	r1, #12
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fd7e 	bl	8006c04 <HAL_TIM_ReadCapturedValue>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	615a      	str	r2, [r3, #20]
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10000000;
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 8001122:	f107 020f 	add.w	r2, r7, #15
 8001126:	2301      	movs	r3, #1
 8001128:	2110      	movs	r1, #16
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f80d 	bl	800114a <XLG_WRITE>
	writeThis = 0b10001100;
 8001130:	238c      	movs	r3, #140	; 0x8c
 8001132:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 8001134:	f107 020f 	add.w	r2, r7, #15
 8001138:	2301      	movs	r3, #1
 800113a:	2111      	movs	r1, #17
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f804 	bl	800114a <XLG_WRITE>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af02      	add	r7, sp, #8
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	460b      	mov	r3, r1
 8001158:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	b29a      	uxth	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	21d4      	movs	r1, #212	; 0xd4
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f002 fde9 	bl	8003d44 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 8001172:	bf00      	nop
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d1f8      	bne.n	8001174 <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2220      	movs	r2, #32
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	0000      	movs	r0, r0
 8001194:	0000      	movs	r0, r0
	...

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b090      	sub	sp, #64	; 0x40
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f001 fb9e 	bl	80028de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f9c1 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fdcb 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 80011aa:	f000 fd83 	bl	8001cb4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fd49 	bl	8001c44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80011b2:	f000 fd77 	bl	8001ca4 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 80011b6:	f000 fc7b 	bl	8001ab0 <MX_TIM4_Init>
  MX_ADC1_Init();
 80011ba:	f000 fa4d 	bl	8001658 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011be:	f000 fa9d 	bl	80016fc <MX_I2C1_Init>
  MX_TIM3_Init();
 80011c2:	f000 fbf9 	bl	80019b8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80011c6:	f000 fb79 	bl	80018bc <MX_TIM2_Init>
  MX_TIM1_Init();
 80011ca:	f000 fad7 	bl	800177c <MX_TIM1_Init>
  MX_TIM5_Init();
 80011ce:	f000 fcdf 	bl	8001b90 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  escDMASet[0] = hdma_tim4_ch1; 		// DMA1: Stream 0 (S0)
 80011d2:	4aa7      	ldr	r2, [pc, #668]	; (8001470 <main+0x2d8>)
 80011d4:	4ba7      	ldr	r3, [pc, #668]	; (8001474 <main+0x2dc>)
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	2360      	movs	r3, #96	; 0x60
 80011dc:	461a      	mov	r2, r3
 80011de:	f006 ffad 	bl	800813c <memcpy>
  escDMASet[1] = hdma_tim4_ch2; 		// DMA1: Stream 3 (S3)
 80011e2:	4ba3      	ldr	r3, [pc, #652]	; (8001470 <main+0x2d8>)
 80011e4:	4aa4      	ldr	r2, [pc, #656]	; (8001478 <main+0x2e0>)
 80011e6:	3360      	adds	r3, #96	; 0x60
 80011e8:	4611      	mov	r1, r2
 80011ea:	2260      	movs	r2, #96	; 0x60
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 ffa5 	bl	800813c <memcpy>
  escDMASet[2] = hdma_tim4_ch3; 		// DMA1: Stream 7 (S7)
 80011f2:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <main+0x2d8>)
 80011f4:	4aa1      	ldr	r2, [pc, #644]	; (800147c <main+0x2e4>)
 80011f6:	33c0      	adds	r3, #192	; 0xc0
 80011f8:	4611      	mov	r1, r2
 80011fa:	2260      	movs	r2, #96	; 0x60
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 ff9d 	bl	800813c <memcpy>
  escDMASet[3] = hdma_tim5_ch2; 		// DMA1: Stream 4 (S4)
 8001202:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <main+0x2d8>)
 8001204:	4a9e      	ldr	r2, [pc, #632]	; (8001480 <main+0x2e8>)
 8001206:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800120a:	4611      	mov	r1, r2
 800120c:	2260      	movs	r2, #96	; 0x60
 800120e:	4618      	mov	r0, r3
 8001210:	f006 ff94 	bl	800813c <memcpy>
  dmaPwmTimers[0] = htim4;
 8001214:	4a9b      	ldr	r2, [pc, #620]	; (8001484 <main+0x2ec>)
 8001216:	4b9c      	ldr	r3, [pc, #624]	; (8001488 <main+0x2f0>)
 8001218:	4614      	mov	r4, r2
 800121a:	461d      	mov	r5, r3
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  dmaPwmTimers[1] = htim5;
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <main+0x2ec>)
 8001232:	4a96      	ldr	r2, [pc, #600]	; (800148c <main+0x2f4>)
 8001234:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001238:	4615      	mov	r5, r2
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001246:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ESC_CONTROLLER* myESCSet = ESC_INIT(dmaPwmTimers, &htim3, escDMASet);
 800124e:	4a88      	ldr	r2, [pc, #544]	; (8001470 <main+0x2d8>)
 8001250:	498f      	ldr	r1, [pc, #572]	; (8001490 <main+0x2f8>)
 8001252:	488c      	ldr	r0, [pc, #560]	; (8001484 <main+0x2ec>)
 8001254:	f7ff fd68 	bl	8000d28 <ESC_INIT>
 8001258:	62f8      	str	r0, [r7, #44]	; 0x2c
  RX_CONTROLLER* myRX = RX_INIT(&htim1, &htim2);
 800125a:	498e      	ldr	r1, [pc, #568]	; (8001494 <main+0x2fc>)
 800125c:	488e      	ldr	r0, [pc, #568]	; (8001498 <main+0x300>)
 800125e:	f7ff fed1 	bl	8001004 <RX_INIT>
 8001262:	62b8      	str	r0, [r7, #40]	; 0x28
  XLG_INIT(&hi2c1);
 8001264:	488d      	ldr	r0, [pc, #564]	; (800149c <main+0x304>)
 8001266:	f7ff ff56 	bl	8001116 <XLG_INIT>

  	const int patternSize = 26;
 800126a:	231a      	movs	r3, #26
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
	int startTime = HAL_GetTick();
 800126e:	f001 fb87 	bl	8002980 <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	623b      	str	r3, [r7, #32]
	const int period = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
	uint32_t pattern[patternSize];
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3b01      	subs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	f04f 0400 	mov.w	r4, #0
 8001290:	0154      	lsls	r4, r2, #5
 8001292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001296:	014b      	lsls	r3, r1, #5
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	f04f 0400 	mov.w	r4, #0
 80012a8:	0154      	lsls	r4, r2, #5
 80012aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012ae:	014b      	lsls	r3, r1, #5
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	3303      	adds	r3, #3
 80012b6:	3307      	adds	r3, #7
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	ebad 0d03 	sub.w	sp, sp, r3
 80012c0:	466b      	mov	r3, sp
 80012c2:	3303      	adds	r3, #3
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	617b      	str	r3, [r7, #20]
	pattern[0] = DSHOT_CMD_MOTOR_STOP;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
	pattern[1] = DSHOT_CMD_BEACON1;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2201      	movs	r2, #1
 80012d4:	605a      	str	r2, [r3, #4]
	pattern[2] = DSHOT_CMD_BEACON2;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2202      	movs	r2, #2
 80012da:	609a      	str	r2, [r3, #8]
	pattern[3] = DSHOT_CMD_BEACON3;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2203      	movs	r2, #3
 80012e0:	60da      	str	r2, [r3, #12]
	pattern[4] = DSHOT_CMD_BEACON4;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2204      	movs	r2, #4
 80012e6:	611a      	str	r2, [r3, #16]
	pattern[5] = DSHOT_CMD_BEACON5;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2205      	movs	r2, #5
 80012ec:	615a      	str	r2, [r3, #20]
	pattern[6] = DSHOT_CMD_ESC_INFO;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2206      	movs	r2, #6
 80012f2:	619a      	str	r2, [r3, #24]
	pattern[7] = DSHOT_CMD_SPIN_DIRECTION_1;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2207      	movs	r2, #7
 80012f8:	61da      	str	r2, [r3, #28]
	pattern[8] = DSHOT_CMD_SPIN_DIRECTION_2;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2208      	movs	r2, #8
 80012fe:	621a      	str	r2, [r3, #32]
	pattern[9] = DSHOT_CMD_3D_MODE_OFF;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2209      	movs	r2, #9
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
	pattern[10] = DSHOT_CMD_3D_MODE_ON;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	220a      	movs	r2, #10
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
	pattern[11] = DSHOT_CMD_SETTINGS_REQUEST;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	220b      	movs	r2, #11
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
	pattern[12] = DSHOT_CMD_SPIN_DIRECTION_REVERSED;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2215      	movs	r2, #21
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
	pattern[13] = DSHOT_CMD_SPIN_DIRECTION_NORMAL;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2214      	movs	r2, #20
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
	pattern[14] = DSHOT_CMD_SPIN_DIRECTION_REVERSED;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2215      	movs	r2, #21
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
	pattern[15] = DSHOT_CMD_LED0_ON;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2216      	movs	r2, #22
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c
	pattern[16] = DSHOT_CMD_LED1_ON;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2217      	movs	r2, #23
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
	pattern[17] = DSHOT_CMD_LED2_ON;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2218      	movs	r2, #24
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
	pattern[18] = DSHOT_CMD_LED3_ON;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2219      	movs	r2, #25
 800133a:	649a      	str	r2, [r3, #72]	; 0x48
	pattern[19] = DSHOT_CMD_LED0_OFF;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	221a      	movs	r2, #26
 8001340:	64da      	str	r2, [r3, #76]	; 0x4c
	pattern[20] = DSHOT_CMD_LED1_OFF;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	221b      	movs	r2, #27
 8001346:	651a      	str	r2, [r3, #80]	; 0x50
	pattern[21] = DSHOT_CMD_LED2_OFF;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	221c      	movs	r2, #28
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
	pattern[22] = DSHOT_CMD_LED3_OFF;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	221d      	movs	r2, #29
 8001352:	659a      	str	r2, [r3, #88]	; 0x58
	pattern[23] = DSHOT_CMD_AUDIO_STREAM_MODE_ON_OFF;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	221e      	movs	r2, #30
 8001358:	65da      	str	r2, [r3, #92]	; 0x5c
	pattern[24] = DSHOT_CMD_SILENT_MODE_ON_OFF;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	221f      	movs	r2, #31
 800135e:	661a      	str	r2, [r3, #96]	; 0x60
	pattern[25] = DSHOT_CMD_MAX;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	222f      	movs	r2, #47	; 0x2f
 8001364:	665a      	str	r2, [r3, #100]	; 0x64
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t testThrottle = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
	  int prevTimeSlot = -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	60fb      	str	r3, [r7, #12]

		  int currentTime = HAL_GetTick();
 8001370:	f001 fb06 	bl	8002980 <HAL_GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	60bb      	str	r3, [r7, #8]
	  int currentTimeSlot = (currentTime - startTime) / period;
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	1ad2      	subs	r2, r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]

	  if (currentTimeSlot != prevTimeSlot)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	d004      	beq.n	8001398 <main+0x200>
	  {
		  prevTimeSlot = currentTimeSlot;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]
		  ++testThrottle;
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	3301      	adds	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
	  }

	  int patternIndex = ((currentTime - startTime) / period) % patternSize;
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a6:	fb93 f2f2 	sdiv	r2, r3, r2
 80013aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	603b      	str	r3, [r7, #0]
	  testThrottle = pattern[patternIndex];
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	613b      	str	r3, [r7, #16]
	  RX_UPDATE(myRX);
 80013be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c0:	f7ff fe6b 	bl	800109a <RX_UPDATE>
	  if (myRX->switchA > 900)
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80013cc:	d93b      	bls.n	8001446 <main+0x2ae>
	  {
		  if (myRX->switchB > 900) telemBit = 0;
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80013d6:	d903      	bls.n	80013e0 <main+0x248>
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <main+0x308>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e002      	b.n	80013e6 <main+0x24e>
		  else telemBit = 1;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <main+0x308>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		  throttle = (myRX->throttle - 998) * 2.045 ;
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f2a3 33e6 	subw	r3, r3, #998	; 0x3e6
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f858 	bl	80004a4 <__aeabi_ui2d>
 80013f4:	a31c      	add	r3, pc, #112	; (adr r3, 8001468 <main+0x2d0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8cd 	bl	8000598 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fad9 	bl	80009bc <__aeabi_d2iz>
 800140a:	4602      	mov	r2, r0
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <main+0x30c>)
 800140e:	601a      	str	r2, [r3, #0]
		  if (throttle < 30) throttle = 0;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <main+0x30c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b1d      	cmp	r3, #29
 8001416:	dc02      	bgt.n	800141e <main+0x286>
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <main+0x30c>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
		  if (throttle > 1990) throttle = 2047;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <main+0x30c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8001426:	4293      	cmp	r3, r2
 8001428:	dd03      	ble.n	8001432 <main+0x29a>
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <main+0x30c>)
 800142c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001430:	601a      	str	r2, [r3, #0]
		  ESC_UPDATE_THROTTLE(&myESCSet[0], throttle, telemBit);
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <main+0x30c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <main+0x308>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001440:	f7ff fd79 	bl	8000f36 <ESC_UPDATE_THROTTLE>
 8001444:	e78f      	b.n	8001366 <main+0x1ce>
	  }
	  else
	  {
		  if (myRX->switchB > 900) telemBit = 0;
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800144e:	d903      	bls.n	8001458 <main+0x2c0>
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <main+0x308>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	e002      	b.n	800145e <main+0x2c6>
		  else telemBit = 1;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <main+0x308>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; i++){
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
 8001462:	e02b      	b.n	80014bc <main+0x324>
 8001464:	f3af 8000 	nop.w
 8001468:	f5c28f5c 	.word	0xf5c28f5c
 800146c:	40005c28 	.word	0x40005c28
 8001470:	200001c0 	.word	0x200001c0
 8001474:	200006dc 	.word	0x200006dc
 8001478:	200000a0 	.word	0x200000a0
 800147c:	2000059c 	.word	0x2000059c
 8001480:	2000053c 	.word	0x2000053c
 8001484:	200003ec 	.word	0x200003ec
 8001488:	20000100 	.word	0x20000100
 800148c:	2000046c 	.word	0x2000046c
 8001490:	200004ac 	.word	0x200004ac
 8001494:	2000069c 	.word	0x2000069c
 8001498:	200005fc 	.word	0x200005fc
 800149c:	200003a0 	.word	0x200003a0
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000090 	.word	0x20000090
			  ESC_UPDATE_THROTTLE(&myESCSet[0], DSHOT_CMD_MOTOR_STOP, telemBit);
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <main+0x38c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014b2:	f7ff fd40 	bl	8000f36 <ESC_UPDATE_THROTTLE>
		  for (int i = 0; i < 6; i++){
 80014b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b8:	3301      	adds	r3, #1
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	2b05      	cmp	r3, #5
 80014c0:	ddf2      	ble.n	80014a8 <main+0x310>
		  }
		  for (int i = 0; i < 6; i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
 80014c6:	e009      	b.n	80014dc <main+0x344>
			  ESC_UPDATE_THROTTLE(&myESCSet[0], DSHOT_CMD_LED0_OFF, telemBit);
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <main+0x38c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	211a      	movs	r1, #26
 80014d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014d2:	f7ff fd30 	bl	8000f36 <ESC_UPDATE_THROTTLE>
		  for (int i = 0; i < 6; i++){
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	3301      	adds	r3, #1
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	2b05      	cmp	r3, #5
 80014e0:	ddf2      	ble.n	80014c8 <main+0x330>
		  }
		  for (int i = 0; i < 6; i++){
 80014e2:	2300      	movs	r3, #0
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80014e6:	e009      	b.n	80014fc <main+0x364>
			  ESC_UPDATE_THROTTLE(&myESCSet[0], DSHOT_CMD_SAVE_SETTINGS, telemBit);
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <main+0x38c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	210c      	movs	r1, #12
 80014f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014f2:	f7ff fd20 	bl	8000f36 <ESC_UPDATE_THROTTLE>
		  for (int i = 0; i < 6; i++){
 80014f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f8:	3301      	adds	r3, #1
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80014fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fe:	2b05      	cmp	r3, #5
 8001500:	ddf2      	ble.n	80014e8 <main+0x350>
		  }
		  for (int i = 0; i < 6; i++){
 8001502:	2300      	movs	r3, #0
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001506:	e009      	b.n	800151c <main+0x384>
			  ESC_UPDATE_THROTTLE(&myESCSet[0], DSHOT_CMD_MOTOR_STOP, telemBit);
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <main+0x38c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001512:	f7ff fd10 	bl	8000f36 <ESC_UPDATE_THROTTLE>
		  for (int i = 0; i < 6; i++){
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	3301      	adds	r3, #1
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151e:	2b05      	cmp	r3, #5
 8001520:	ddf2      	ble.n	8001508 <main+0x370>
  {
 8001522:	e720      	b.n	8001366 <main+0x1ce>
 8001524:	20000000 	.word	0x20000000

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0b4      	sub	sp, #208	; 0xd0
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001532:	2230      	movs	r2, #48	; 0x30
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fe0b 	bl	8008152 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f006 fdfc 	bl	8008152 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800155a:	f003 ff31 	bl	80053c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <SystemClock_Config+0x124>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a3a      	ldr	r2, [pc, #232]	; (800164c <SystemClock_Config+0x124>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <SystemClock_Config+0x124>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <SystemClock_Config+0x128>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a35      	ldr	r2, [pc, #212]	; (8001650 <SystemClock_Config+0x128>)
 800157c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <SystemClock_Config+0x128>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158e:	2301      	movs	r3, #1
 8001590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001598:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015aa:	2308      	movs	r3, #8
 80015ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80015b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80015b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015be:	2309      	movs	r3, #9
 80015c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 ff59 	bl	8005480 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015d4:	f000 fcae 	bl	8001f34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015d8:	f003 ff02 	bl	80053e0 <HAL_PWREx_EnableOverDrive>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015e2:	f000 fca7 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	230f      	movs	r3, #15
 80015e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001608:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800160c:	2107      	movs	r1, #7
 800160e:	4618      	mov	r0, r3
 8001610:	f004 f9da 	bl	80059c8 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800161a:	f000 fc8b 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <SystemClock_Config+0x12c>)
 8001620:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001622:	2300      	movs	r3, #0
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001626:	2300      	movs	r3, #0
 8001628:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fbbf 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001640:	f000 fc78 	bl	8001f34 <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	37d0      	adds	r7, #208	; 0xd0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	00204100 	.word	0x00204100

08001658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x98>)
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <MX_ADC1_Init+0x9c>)
 800166e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_ADC1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_ADC1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_ADC1_Init+0x98>)
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <MX_ADC1_Init+0xa0>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016ba:	f001 f96d 	bl	8002998 <HAL_ADC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016c4:	f000 fc36 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016c8:	2309      	movs	r3, #9
 80016ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016da:	f001 f9a1 	bl	8002a20 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016e4:	f000 fc26 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200004ec 	.word	0x200004ec
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_I2C1_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <MX_I2C1_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_I2C1_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_I2C1_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_I2C1_Init+0x74>)
 800170e:	22d4      	movs	r2, #212	; 0xd4
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_I2C1_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_I2C1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_I2C1_Init+0x74>)
 8001738:	f002 fa74 	bl	8003c24 <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 fbf7 	bl	8001f34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_I2C1_Init+0x74>)
 800174a:	f003 fda2 	bl	8005292 <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 fbee 	bl	8001f34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2C1_Init+0x74>)
 800175c:	f003 fde4 	bl	8005328 <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fbe5 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200003a0 	.word	0x200003a0
 8001774:	40005400 	.word	0x40005400
 8001778:	20404768 	.word	0x20404768

0800177c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017ac:	4a42      	ldr	r2, [pc, #264]	; (80018b8 <MX_TIM1_Init+0x13c>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017b2:	22d7      	movs	r2, #215	; 0xd7
 80017b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80017bc:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017be:	f242 720f 	movw	r2, #9999	; 0x270f
 80017c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d6:	4837      	ldr	r0, [pc, #220]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017d8:	f004 fe36 	bl	8006448 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017e2:	f000 fba7 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017e6:	4833      	ldr	r0, [pc, #204]	; (80018b4 <MX_TIM1_Init+0x138>)
 80017e8:	f004 fef4 	bl	80065d4 <HAL_TIM_IC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017f2:	f000 fb9f 	bl	8001f34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017f6:	2304      	movs	r3, #4
 80017f8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80017fa:	2370      	movs	r3, #112	; 0x70
 80017fc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4828      	ldr	r0, [pc, #160]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001812:	f005 f9b5 	bl	8006b80 <HAL_TIM_SlaveConfigSynchro>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800181c:	f000 fb8a 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4820      	ldr	r0, [pc, #128]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001834:	f005 ff7e 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800183e:	f000 fb79 	bl	8001f34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001842:	2302      	movs	r3, #2
 8001844:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001846:	2301      	movs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <MX_TIM1_Init+0x138>)
 800185a:	f004 ffdd 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001864:	f000 fb66 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001870:	f004 ffd2 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800187a:	f000 fb5b 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	2208      	movs	r2, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <MX_TIM1_Init+0x138>)
 8001886:	f004 ffc7 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001890:	f000 fb50 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	220c      	movs	r2, #12
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <MX_TIM1_Init+0x138>)
 800189c:	f004 ffbc 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80018a6:	f000 fb45 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3730      	adds	r7, #48	; 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005fc 	.word	0x200005fc
 80018b8:	40010000 	.word	0x40010000

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018f4:	22d7      	movs	r2, #215	; 0xd7
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001900:	f242 720f 	movw	r2, #9999	; 0x270f
 8001904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <MX_TIM2_Init+0xf8>)
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001914:	f004 fd98 	bl	8006448 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800191e:	f000 fb09 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001922:	4824      	ldr	r0, [pc, #144]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001924:	f004 fe56 	bl	80065d4 <HAL_TIM_IC_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800192e:	f000 fb01 	bl	8001f34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001932:	2304      	movs	r3, #4
 8001934:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001942:	f005 f91d 	bl	8006b80 <HAL_TIM_SlaveConfigSynchro>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800194c:	f000 faf2 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4815      	ldr	r0, [pc, #84]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001960:	f005 fee8 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800196a:	f000 fae3 	bl	8001f34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800196e:	2302      	movs	r3, #2
 8001970:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001986:	f004 ff47 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001990:	f000 fad0 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	220c      	movs	r2, #12
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM2_Init+0xf8>)
 800199c:	f004 ff3c 	bl	8006818 <HAL_TIM_IC_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019a6:	f000 fac5 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000069c 	.word	0x2000069c

080019b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019de:	4a33      	ldr	r2, [pc, #204]	; (8001aac <MX_TIM3_Init+0xf4>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019f0:	f240 1267 	movw	r2, #359	; 0x167
 80019f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a02:	4829      	ldr	r0, [pc, #164]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a04:	f004 fd76 	bl	80064f4 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a0e:	f000 fa91 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4821      	ldr	r0, [pc, #132]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a22:	f005 fe87 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a2c:	f000 fa82 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a30:	2360      	movs	r3, #96	; 0x60
 8001a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a48:	f004 ff82 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a52:	f000 fa6f 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a5e:	f004 ff77 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a68:	f000 fa64 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a74:	f004 ff6c 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001a7e:	f000 fa59 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	220c      	movs	r2, #12
 8001a86:	4619      	mov	r1, r3
 8001a88:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a8a:	f004 ff61 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001a94:	f000 fa4e 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <MX_TIM3_Init+0xf0>)
 8001a9a:	f000 fd3d 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200004ac 	.word	0x200004ac
 8001aac:	40000400 	.word	0x40000400

08001ab0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <MX_TIM4_Init+0xdc>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001ae8:	f240 1267 	movw	r2, #359	; 0x167
 8001aec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001afa:	4823      	ldr	r0, [pc, #140]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001afc:	f004 fccf 	bl	800649e <HAL_TIM_OC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b06:	f000 fa15 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	481b      	ldr	r0, [pc, #108]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001b1a:	f005 fe0b 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b24:	f000 fa06 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4812      	ldr	r0, [pc, #72]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001b40:	f004 fdec 	bl	800671c <HAL_TIM_OC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b4a:	f000 f9f3 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2204      	movs	r2, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001b56:	f004 fde1 	bl	800671c <HAL_TIM_OC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001b60:	f000 f9e8 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	2208      	movs	r2, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001b6c:	f004 fdd6 	bl	800671c <HAL_TIM_OC_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001b76:	f000 f9dd 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <MX_TIM4_Init+0xd8>)
 8001b7c:	f000 fccc 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000100 	.word	0x20000100
 8001b8c:	40000800 	.word	0x40000800

08001b90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <MX_TIM5_Init+0xb0>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 359;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bc8:	f240 1267 	movw	r2, #359	; 0x167
 8001bcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bdc:	f004 fc5f 	bl	800649e <HAL_TIM_OC_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001be6:	f000 f9a5 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4810      	ldr	r0, [pc, #64]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001bfa:	f005 fd9b 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c04:	f000 f996 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001c08:	2310      	movs	r3, #16
 8001c0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001c20:	f004 fd7c 	bl	800671c <HAL_TIM_OC_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001c2a:	f000 f983 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <MX_TIM5_Init+0xac>)
 8001c30:	f000 fc72 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000046c 	.word	0x2000046c
 8001c40:	40000c00 	.word	0x40000c00

08001c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <MX_USART3_UART_Init+0x5c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c88:	f005 fde2 	bl	8007850 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c92:	f000 f94f 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000140 	.word	0x20000140
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <MX_DMA_Init+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <MX_DMA_Init+0x88>)
 8001cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_DMA_Init+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	200b      	movs	r0, #11
 8001cd8:	f001 f9c1 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cdc:	200b      	movs	r0, #11
 8001cde:	f001 f9da 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200e      	movs	r0, #14
 8001ce8:	f001 f9b9 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001cec:	200e      	movs	r0, #14
 8001cee:	f001 f9d2 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f001 f9b1 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cfc:	200f      	movs	r0, #15
 8001cfe:	f001 f9ca 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2010      	movs	r0, #16
 8001d08:	f001 f9a9 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d0c:	2010      	movs	r0, #16
 8001d0e:	f001 f9c2 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2011      	movs	r0, #17
 8001d18:	f001 f9a1 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d1c:	2011      	movs	r0, #17
 8001d1e:	f001 f9ba 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	202f      	movs	r0, #47	; 0x2f
 8001d28:	f001 f999 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001d2c:	202f      	movs	r0, #47	; 0x2f
 8001d2e:	f001 f9b2 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a63      	ldr	r2, [pc, #396]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001db6:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <MX_GPIO_Init+0x1d8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001e1c:	483f      	ldr	r0, [pc, #252]	; (8001f1c <MX_GPIO_Init+0x1dc>)
 8001e1e:	f001 fee7 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	483e      	ldr	r0, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x1e0>)
 8001e28:	f001 fee2 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <MX_GPIO_Init+0x1e4>)
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4839      	ldr	r0, [pc, #228]	; (8001f28 <MX_GPIO_Init+0x1e8>)
 8001e42:	f001 fd3b 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4834      	ldr	r0, [pc, #208]	; (8001f2c <MX_GPIO_Init+0x1ec>)
 8001e5c:	f001 fd2e 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001e60:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4828      	ldr	r0, [pc, #160]	; (8001f1c <MX_GPIO_Init+0x1dc>)
 8001e7a:	f001 fd1f 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4821      	ldr	r0, [pc, #132]	; (8001f20 <MX_GPIO_Init+0x1e0>)
 8001e9a:	f001 fd0f 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e9e:	2340      	movs	r3, #64	; 0x40
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481a      	ldr	r0, [pc, #104]	; (8001f20 <MX_GPIO_Init+0x1e0>)
 8001eb6:	f001 fd01 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4814      	ldr	r0, [pc, #80]	; (8001f20 <MX_GPIO_Init+0x1e0>)
 8001ece:	f001 fcf5 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001ed2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_GPIO_Init+0x1f0>)
 8001ef0:	f001 fce4 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4809      	ldr	r0, [pc, #36]	; (8001f30 <MX_GPIO_Init+0x1f0>)
 8001f0a:	f001 fcd7 	bl	80038bc <HAL_GPIO_Init>

}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	; 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40020000 	.word	0x40020000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x44>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_MspInit+0x44>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_MspInit+0x44>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x44>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x44>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x44>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_ADC_MspInit+0x74>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d123      	bne.n	8001ff6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_ADC_MspInit+0x78>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_ADC_MspInit+0x7c>)
 8001ff2:	f001 fc63 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40012000 	.word	0x40012000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400

0800200c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a53      	ldr	r2, [pc, #332]	; (8002178 <HAL_I2C_MspInit+0x16c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	f040 809f 	bne.w	800216e <HAL_I2C_MspInit+0x162>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_I2C_MspInit+0x170>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_I2C_MspInit+0x170>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	6313      	str	r3, [r2, #48]	; 0x30
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_I2C_MspInit+0x170>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204e:	2312      	movs	r3, #18
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205a:	2304      	movs	r3, #4
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4846      	ldr	r0, [pc, #280]	; (8002180 <HAL_I2C_MspInit+0x174>)
 8002066:	f001 fc29 	bl	80038bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_I2C_MspInit+0x170>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a43      	ldr	r2, [pc, #268]	; (800217c <HAL_I2C_MspInit+0x170>)
 8002070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_I2C_MspInit+0x170>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8002082:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_I2C_MspInit+0x178>)
 8002084:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_I2C_MspInit+0x17c>)
 8002086:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002088:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_I2C_MspInit+0x178>)
 800208a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <HAL_I2C_MspInit+0x178>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_I2C_MspInit+0x178>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_I2C_MspInit+0x178>)
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020bc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020c0:	2204      	movs	r2, #4
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020c6:	2203      	movs	r2, #3
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80020da:	482a      	ldr	r0, [pc, #168]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020dc:	f000 fff6 	bl	80030cc <HAL_DMA_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80020e6:	f7ff ff25 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_I2C_MspInit+0x178>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_I2C_MspInit+0x180>)
 80020f8:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_I2C_MspInit+0x184>)
 80020fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_I2C_MspInit+0x180>)
 80020fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002102:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002106:	2240      	movs	r2, #64	; 0x40
 8002108:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_I2C_MspInit+0x180>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002116:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_I2C_MspInit+0x180>)
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002126:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_I2C_MspInit+0x180>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002134:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002138:	2204      	movs	r2, #4
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_I2C_MspInit+0x180>)
 800213e:	2203      	movs	r2, #3
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002144:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_I2C_MspInit+0x180>)
 800214c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002152:	480e      	ldr	r0, [pc, #56]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002154:	f000 ffba 	bl	80030cc <HAL_DMA_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 800215e:	f7ff fee9 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_I2C_MspInit+0x180>)
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_I2C_MspInit+0x180>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40005400 	.word	0x40005400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020400 	.word	0x40020400
 8002184:	2000063c 	.word	0x2000063c
 8002188:	40026088 	.word	0x40026088
 800218c:	20000340 	.word	0x20000340
 8002190:	400260a0 	.word	0x400260a0

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_TIM_Base_MspInit+0xd8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d129      	bne.n	800220a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 80021e6:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 80021ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	481c      	ldr	r0, [pc, #112]	; (8002274 <HAL_TIM_Base_MspInit+0xe0>)
 8002204:	f001 fb5a 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002208:	e02c      	b.n	8002264 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d127      	bne.n	8002264 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6413      	str	r3, [r2, #64]	; 0x40
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_TIM_Base_MspInit+0xdc>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002244:	2309      	movs	r3, #9
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002254:	2301      	movs	r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <HAL_TIM_Base_MspInit+0xe4>)
 8002260:	f001 fb2c 	bl	80038bc <HAL_GPIO_Init>
}
 8002264:	bf00      	nop
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000
 8002270:	40023800 	.word	0x40023800
 8002274:	40021000 	.word	0x40021000
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_TIM_PWM_MspInit+0x38>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10b      	bne.n	80022a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a88      	ldr	r2, [pc, #544]	; (80024ec <HAL_TIM_OC_MspInit+0x230>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f040 80be 	bne.w	800244c <HAL_TIM_OC_MspInit+0x190>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d0:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a86      	ldr	r2, [pc, #536]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80022e8:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 80022ea:	4a83      	ldr	r2, [pc, #524]	; (80024f8 <HAL_TIM_OC_MspInit+0x23c>)
 80022ec:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 80022f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022f4:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022f6:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002308:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 800230c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002310:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002314:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002318:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 800231c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002320:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002324:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002328:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 800232c:	2204      	movs	r2, #4
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002332:	2203      	movs	r2, #3
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002338:	2200      	movs	r2, #0
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002342:	486c      	ldr	r0, [pc, #432]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002344:	f000 fec2 	bl	80030cc <HAL_DMA_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_TIM_OC_MspInit+0x96>
    {
      Error_Handler();
 800234e:	f7ff fdf1 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
 8002358:	4a66      	ldr	r2, [pc, #408]	; (80024f4 <HAL_TIM_OC_MspInit+0x238>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 8002360:	4a67      	ldr	r2, [pc, #412]	; (8002500 <HAL_TIM_OC_MspInit+0x244>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8002364:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 8002366:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800236a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236c:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 800237a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 8002382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002386:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 800238a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 8002392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002396:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 800239a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800239e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023a0:	4b56      	ldr	r3, [pc, #344]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023a6:	4b55      	ldr	r3, [pc, #340]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023a8:	2203      	movs	r2, #3
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023b2:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80023b8:	4850      	ldr	r0, [pc, #320]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023ba:	f000 fe87 	bl	80030cc <HAL_DMA_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_OC_MspInit+0x10c>
    {
      Error_Handler();
 80023c4:	f7ff fdb6 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
 80023ce:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_TIM_OC_MspInit+0x240>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023d6:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_TIM_OC_MspInit+0x24c>)
 80023d8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023e0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 80023f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023fc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002404:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002410:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002414:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002418:	2204      	movs	r2, #4
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 800241e:	2203      	movs	r2, #3
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002424:	2200      	movs	r2, #0
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800242e:	4835      	ldr	r0, [pc, #212]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002430:	f000 fe4c 	bl	80030cc <HAL_DMA_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_OC_MspInit+0x182>
    {
      Error_Handler();
 800243a:	f7ff fd7b 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a30      	ldr	r2, [pc, #192]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <HAL_TIM_OC_MspInit+0x248>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800244a:	e04b      	b.n	80024e4 <HAL_TIM_OC_MspInit+0x228>
  else if(htim_oc->Instance==TIM5)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_TIM_OC_MspInit+0x250>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d146      	bne.n	80024e4 <HAL_TIM_OC_MspInit+0x228>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_TIM_OC_MspInit+0x234>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <HAL_TIM_OC_MspInit+0x258>)
 8002472:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002474:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 8002476:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800247a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002482:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 800248a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 8002492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002496:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 800249a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024ae:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024b2:	2204      	movs	r2, #4
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024be:	2200      	movs	r2, #0
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024ca:	f000 fdff 	bl	80030cc <HAL_DMA_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_OC_MspInit+0x21c>
      Error_Handler();
 80024d4:	f7ff fd2e 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_TIM_OC_MspInit+0x254>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40000800 	.word	0x40000800
 80024f0:	40023800 	.word	0x40023800
 80024f4:	200006dc 	.word	0x200006dc
 80024f8:	40026010 	.word	0x40026010
 80024fc:	200000a0 	.word	0x200000a0
 8002500:	40026058 	.word	0x40026058
 8002504:	2000059c 	.word	0x2000059c
 8002508:	400260b8 	.word	0x400260b8
 800250c:	40000c00 	.word	0x40000c00
 8002510:	2000053c 	.word	0x2000053c
 8002514:	40026070 	.word	0x40026070

08002518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a50      	ldr	r2, [pc, #320]	; (8002678 <HAL_TIM_MspPostInit+0x160>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d155      	bne.n	80025e6 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a4f      	ldr	r2, [pc, #316]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a49      	ldr	r2, [pc, #292]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a43      	ldr	r2, [pc, #268]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002592:	2302      	movs	r3, #2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4838      	ldr	r0, [pc, #224]	; (8002680 <HAL_TIM_MspPostInit+0x168>)
 800259e:	f001 f98d 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025b2:	2302      	movs	r3, #2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	4831      	ldr	r0, [pc, #196]	; (8002684 <HAL_TIM_MspPostInit+0x16c>)
 80025be:	f001 f97d 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 80025c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025d4:	2302      	movs	r3, #2
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	482a      	ldr	r0, [pc, #168]	; (8002688 <HAL_TIM_MspPostInit+0x170>)
 80025e0:	f001 f96c 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80025e4:	e043      	b.n	800266e <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM4)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_TIM_MspPostInit+0x174>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d11d      	bne.n	800262c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin|GPIO_PIN_14;
 8002608:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800261a:	2302      	movs	r3, #2
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	4619      	mov	r1, r3
 8002624:	481a      	ldr	r0, [pc, #104]	; (8002690 <HAL_TIM_MspPostInit+0x178>)
 8002626:	f001 f949 	bl	80038bc <HAL_GPIO_Init>
}
 800262a:	e020      	b.n	800266e <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_TIM_MspPostInit+0x17c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11b      	bne.n	800266e <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_TIM_MspPostInit+0x164>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800264e:	2302      	movs	r3, #2
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800265e:	2302      	movs	r3, #2
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <HAL_TIM_MspPostInit+0x168>)
 800266a:	f001 f927 	bl	80038bc <HAL_GPIO_Init>
}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	; 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40000400 	.word	0x40000400
 800267c:	40023800 	.word	0x40023800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40000800 	.word	0x40000800
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40000c00 	.word	0x40000c00

08002698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_UART_MspInit+0x7c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d128      	bne.n	800270c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a16      	ldr	r2, [pc, #88]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_UART_MspInit+0x80>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80026ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026fc:	2307      	movs	r3, #7
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_UART_MspInit+0x84>)
 8002708:	f001 f8d8 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40004800 	.word	0x40004800
 8002718:	40023800 	.word	0x40023800
 800271c:	40020c00 	.word	0x40020c00

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <MemManage_Handler+0x4>

0800273a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <BusFault_Handler+0x4>

08002740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <UsageFault_Handler+0x4>

08002746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002774:	f000 f8f0 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA1_Stream0_IRQHandler+0x10>)
 8002782:	f000 fdd3 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200006dc 	.word	0x200006dc

08002790 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA1_Stream3_IRQHandler+0x10>)
 8002796:	f000 fdc9 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200000a0 	.word	0x200000a0

080027a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <DMA1_Stream4_IRQHandler+0x10>)
 80027aa:	f000 fdbf 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000053c 	.word	0x2000053c

080027b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Stream5_IRQHandler+0x10>)
 80027be:	f000 fdb5 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000063c 	.word	0x2000063c

080027cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Stream6_IRQHandler+0x10>)
 80027d2:	f000 fdab 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000340 	.word	0x20000340

080027e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <DMA1_Stream7_IRQHandler+0x10>)
 80027e6:	f000 fda1 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000059c 	.word	0x2000059c

080027f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <_sbrk+0x5c>)
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <_sbrk+0x60>)
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <_sbrk+0x64>)
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <_sbrk+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002824:	f005 fc58 	bl	80080d8 <__errno>
 8002828:	4602      	mov	r2, r0
 800282a:	230c      	movs	r3, #12
 800282c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e009      	b.n	8002848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <_sbrk+0x64>)
 8002844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20040000 	.word	0x20040000
 8002854:	00000400 	.word	0x00000400
 8002858:	20000094 	.word	0x20000094
 800285c:	20000750 	.word	0x20000750

08002860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <SystemInit+0x28>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	4a07      	ldr	r2, [pc, #28]	; (8002888 <SystemInit+0x28>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SystemInit+0x28>)
 8002876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287a:	609a      	str	r2, [r3, #8]
#endif
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002892:	e003      	b.n	800289c <LoopCopyDataInit>

08002894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800289a:	3104      	adds	r1, #4

0800289c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800289c:	480b      	ldr	r0, [pc, #44]	; (80028cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028a4:	d3f6      	bcc.n	8002894 <CopyDataInit>
  ldr  r2, =_sbss
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028a8:	e002      	b.n	80028b0 <LoopFillZerobss>

080028aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028ac:	f842 3b04 	str.w	r3, [r2], #4

080028b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028b4:	d3f9      	bcc.n	80028aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028b6:	f7ff ffd3 	bl	8002860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ba:	f005 fc13 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7fe fc6b 	bl	8001198 <main>
  bx  lr    
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028c4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80028c8:	08008284 	.word	0x08008284
  ldr  r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028d0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80028d4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80028d8:	2000074c 	.word	0x2000074c

080028dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC_IRQHandler>

080028de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e2:	2003      	movs	r0, #3
 80028e4:	f000 fbb0 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f000 f805 	bl	80028f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028ee:	f7ff fb29 	bl	8001f44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fbcb 	bl	80030b2 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 fb93 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000004 	.word	0x20000004
 8002950:	2000000c 	.word	0x2000000c
 8002954:	20000008 	.word	0x20000008

08002958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c
 800297c:	20000744 	.word	0x20000744

08002980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000744 	.word	0x20000744

08002998 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e031      	b.n	8002a12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fae8 	bl	8001f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d116      	bne.n	8002a04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_ADC_Init+0x84>)
 80029dc:	4013      	ands	r3, r2
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f964 	bl	8002cb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
 8002a02:	e001      	b.n	8002a08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	ffffeefd 	.word	0xffffeefd

08002a20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e12a      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x272>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d93a      	bls.n	8002ac2 <HAL_ADC_ConfigChannel+0xa2>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a54:	d035      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68d9      	ldr	r1, [r3, #12]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a87      	ldr	r2, [pc, #540]	; (8002ca0 <HAL_ADC_ConfigChannel+0x280>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10a      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68d9      	ldr	r1, [r3, #12]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	061a      	lsls	r2, r3, #24
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a9a:	e035      	b.n	8002b08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3b1e      	subs	r3, #30
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac0:	e022      	b.n	8002b08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6919      	ldr	r1, [r3, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43da      	mvns	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6919      	ldr	r1, [r3, #16]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	4603      	mov	r3, r0
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4403      	add	r3, r0
 8002afe:	409a      	lsls	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b05      	subs	r3, #5
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b05      	subs	r3, #5
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34
 8002b58:	e04c      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d824      	bhi.n	8002bac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b23      	subs	r3, #35	; 0x23
 8002b74:	221f      	movs	r2, #31
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b23      	subs	r3, #35	; 0x23
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8002baa:	e023      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b41      	subs	r3, #65	; 0x41
 8002bbe:	221f      	movs	r2, #31
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	400a      	ands	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	3b41      	subs	r3, #65	; 0x41
 8002be8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_ADC_ConfigChannel+0x284>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10a      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x1f4>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a26      	ldr	r2, [pc, #152]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <HAL_ADC_ConfigChannel+0x284>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x212>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	d105      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_ADC_ConfigChannel+0x284>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d125      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x268>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_ADC_ConfigChannel+0x280>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x22e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b11      	cmp	r3, #17
 8002c4c:	d11c      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_ADC_ConfigChannel+0x288>)
 8002c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_ADC_ConfigChannel+0x280>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d111      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_ADC_ConfigChannel+0x28c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_ADC_ConfigChannel+0x290>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9a      	lsrs	r2, r3, #18
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	10000012 	.word	0x10000012
 8002ca4:	40012000 	.word	0x40012000
 8002ca8:	40012300 	.word	0x40012300
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	431bde83 	.word	0x431bde83

08002cb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <ADC_Init+0x1ec>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a77      	ldr	r2, [pc, #476]	; (8002ea0 <ADC_Init+0x1ec>)
 8002cc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <ADC_Init+0x1ec>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4973      	ldr	r1, [pc, #460]	; (8002ea0 <ADC_Init+0x1ec>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <ADC_Init+0x1f0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e00f      	b.n	8002dae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0202 	bic.w	r2, r2, #2
 8002dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	005a      	lsls	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	3b01      	subs	r3, #1
 8002e08:	035a      	lsls	r2, r3, #13
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	e007      	b.n	8002e24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051a      	lsls	r2, r3, #20
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e66:	025a      	lsls	r2, r3, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	029a      	lsls	r2, r3, #10
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	0f000001 	.word	0x0f000001

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00
 8002eec:	05fa0000 	.word	0x05fa0000

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff fc52 	bl	8002980 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e099      	b.n	800321c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	e00f      	b.n	800312a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310a:	f7ff fc39 	bl	8002980 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b05      	cmp	r3, #5
 8003116:	d908      	bls.n	800312a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e078      	b.n	800321c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e8      	bne.n	800310a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_DMA_Init+0x158>)
 8003144:	4013      	ands	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d117      	bne.n	80031ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 faf9 	bl	80037c8 <DMA_CheckFifoParam>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ea:	2301      	movs	r3, #1
 80031ec:	e016      	b.n	800321c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fab0 	bl	800375c <DMA_CalcBaseAndBitshift>
 80031fc:	4603      	mov	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	223f      	movs	r2, #63	; 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	e010803f 	.word	0xe010803f

08003228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_DMA_Start_IT+0x26>
 800324a:	2302      	movs	r3, #2
 800324c:	e048      	b.n	80032e0 <HAL_DMA_Start_IT+0xb8>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d137      	bne.n	80032d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa42 	bl	8003700 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	223f      	movs	r2, #63	; 0x3f
 8003282:	409a      	lsls	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0216 	orr.w	r2, r2, #22
 8003296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e005      	b.n	80032de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00c      	b.n	8003320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003338:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_DMA_IRQHandler+0x258>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a92      	ldr	r2, [pc, #584]	; (8003588 <HAL_DMA_IRQHandler+0x25c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2208      	movs	r2, #8
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2208      	movs	r2, #8
 8003386:	409a      	lsls	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2204      	movs	r2, #4
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d043      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03c      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	2210      	movs	r2, #16
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d024      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e01f      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e016      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0208 	bic.w	r2, r2, #8
 800348a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2220      	movs	r2, #32
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808e 	beq.w	80035ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8086 	beq.w	80035ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d136      	bne.n	8003544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x1da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	223f      	movs	r2, #63	; 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d07d      	beq.n	8003636 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
        }
        return;
 8003542:	e078      	b.n	8003636 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01c      	beq.n	800358c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	2b00      	cmp	r3, #0
 8003566:	d030      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e02b      	b.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
 8003582:	e022      	b.n	80035ca <HAL_DMA_IRQHandler+0x29e>
 8003584:	20000004 	.word	0x20000004
 8003588:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0210 	bic.w	r2, r2, #16
 80035a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d032      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d307      	bcc.n	8003612 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f2      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x2ca>
 8003610:	e000      	b.n	8003614 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003612:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e000      	b.n	8003638 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003636:	bf00      	nop
    }
  }
}
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	460b      	mov	r3, r1
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_DMA_RegisterCallback+0x20>
 800365c:	2302      	movs	r3, #2
 800365e:	e03c      	b.n	80036da <HAL_DMA_RegisterCallback+0x9a>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d129      	bne.n	80036c8 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d829      	bhi.n	80036ce <HAL_DMA_RegisterCallback+0x8e>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <HAL_DMA_RegisterCallback+0x40>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003699 	.word	0x08003699
 8003684:	080036a1 	.word	0x080036a1
 8003688:	080036a9 	.word	0x080036a9
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036c1 	.word	0x080036c1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800369e:	e017      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80036a6:	e013      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80036ae:	e00f      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80036b6:	e00b      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80036be:	e007      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80036c6:	e003      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
 80036cc:	e000      	b.n	80036d0 <HAL_DMA_RegisterCallback+0x90>
      break;
 80036ce:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800371c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d108      	bne.n	8003740 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800373e:	e007      	b.n	8003750 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3b10      	subs	r3, #16
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <DMA_CalcBaseAndBitshift+0x60>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d908      	bls.n	800379c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003792:	4013      	ands	r3, r2
 8003794:	1d1a      	adds	r2, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58
 800379a:	e006      	b.n	80037aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <DMA_CalcBaseAndBitshift+0x68>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	aaaaaaab 	.word	0xaaaaaaab
 80037c0:	0800826c 	.word	0x0800826c
 80037c4:	fffffc00 	.word	0xfffffc00

080037c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11f      	bne.n	8003822 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d855      	bhi.n	8003894 <DMA_CheckFifoParam+0xcc>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <DMA_CheckFifoParam+0x28>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003801 	.word	0x08003801
 80037f4:	08003813 	.word	0x08003813
 80037f8:	08003801 	.word	0x08003801
 80037fc:	08003895 	.word	0x08003895
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d045      	beq.n	8003898 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e042      	b.n	8003898 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800381a:	d13f      	bne.n	800389c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e03c      	b.n	800389c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382a:	d121      	bne.n	8003870 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d836      	bhi.n	80038a0 <DMA_CheckFifoParam+0xd8>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <DMA_CheckFifoParam+0x70>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	08003849 	.word	0x08003849
 800383c:	0800384f 	.word	0x0800384f
 8003840:	08003849 	.word	0x08003849
 8003844:	08003861 	.word	0x08003861
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e02f      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d024      	beq.n	80038a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385e:	e021      	b.n	80038a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003868:	d11e      	bne.n	80038a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800386e:	e01b      	b.n	80038a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d902      	bls.n	800387c <DMA_CheckFifoParam+0xb4>
 8003876:	2b03      	cmp	r3, #3
 8003878:	d003      	beq.n	8003882 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800387a:	e018      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e015      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      break;
 8003892:	e00b      	b.n	80038ac <DMA_CheckFifoParam+0xe4>
      break;
 8003894:	bf00      	nop
 8003896:	e00a      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;
 8003898:	bf00      	nop
 800389a:	e008      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;
 800389c:	bf00      	nop
 800389e:	e006      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;
 80038a0:	bf00      	nop
 80038a2:	e004      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;   
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <DMA_CheckFifoParam+0xe6>
      break;
 80038ac:	bf00      	nop
    }
  } 
  
  return status; 
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e169      	b.n	8003bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8158 	bne.w	8003baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d00b      	beq.n	800391a <HAL_GPIO_Init+0x5e>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d007      	beq.n	800391a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800390e:	2b11      	cmp	r3, #17
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b12      	cmp	r3, #18
 8003918:	d130      	bne.n	800397c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0201 	and.w	r2, r3, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x100>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b12      	cmp	r3, #18
 80039ba:	d123      	bne.n	8003a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80b2 	beq.w	8003baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <HAL_GPIO_Init+0x308>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	4a5e      	ldr	r2, [pc, #376]	; (8003bc4 <HAL_GPIO_Init+0x308>)
 8003a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a50:	6453      	str	r3, [r2, #68]	; 0x44
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_GPIO_Init+0x308>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a5e:	4a5a      	ldr	r2, [pc, #360]	; (8003bc8 <HAL_GPIO_Init+0x30c>)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	3302      	adds	r3, #2
 8003a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	220f      	movs	r2, #15
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a51      	ldr	r2, [pc, #324]	; (8003bcc <HAL_GPIO_Init+0x310>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02b      	beq.n	8003ae2 <HAL_GPIO_Init+0x226>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a50      	ldr	r2, [pc, #320]	; (8003bd0 <HAL_GPIO_Init+0x314>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d025      	beq.n	8003ade <HAL_GPIO_Init+0x222>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a4f      	ldr	r2, [pc, #316]	; (8003bd4 <HAL_GPIO_Init+0x318>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <HAL_GPIO_Init+0x21e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4e      	ldr	r2, [pc, #312]	; (8003bd8 <HAL_GPIO_Init+0x31c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d019      	beq.n	8003ad6 <HAL_GPIO_Init+0x21a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <HAL_GPIO_Init+0x320>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x216>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <HAL_GPIO_Init+0x324>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_Init+0x212>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_GPIO_Init+0x328>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x20e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_GPIO_Init+0x32c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_Init+0x20a>
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	e00e      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003aca:	2306      	movs	r3, #6
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x228>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003af4:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x30c>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a31      	ldr	r2, [pc, #196]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b50:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f ae92 	bls.w	80038dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40021c00 	.word	0x40021c00
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe f9de 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e006      	b.n	8003cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d104      	bne.n	8003cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_I2C_Init+0x11c>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	ea42 0103 	orr.w	r1, r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	02008000 	.word	0x02008000

08003d44 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	817b      	strh	r3, [r7, #10]
 8003d56:	460b      	mov	r3, r1
 8003d58:	813b      	strh	r3, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 80d5 	bne.w	8003f16 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_I2C_Mem_Write_DMA+0x34>
 8003d72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0c9      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d101      	bne.n	8003d98 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
 8003d96:	e0bf      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Mem_Write_DMA+0x62>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0b8      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dae:	f7fe fde7 	bl	8002980 <HAL_GetTick>
 8003db2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a51      	ldr	r2, [pc, #324]	; (8003f20 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a51      	ldr	r2, [pc, #324]	; (8003f24 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2bff      	cmp	r3, #255	; 0xff
 8003dea:	d906      	bls.n	8003dfa <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e007      	b.n	8003e0a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e08:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003e0a:	88f8      	ldrh	r0, [r7, #6]
 8003e0c:	893a      	ldrh	r2, [r7, #8]
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2319      	movs	r3, #25
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4603      	mov	r3, r0
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fbae 	bl	800457c <I2C_RequestMemoryWrite>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e072      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d020      	beq.n	8003e7c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003e48:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	2200      	movs	r2, #0
 8003e58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3328      	adds	r3, #40	; 0x28
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	f7ff f9dc 	bl	8003228 <HAL_DMA_Start_IT>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d139      	bne.n	8003eee <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003e7a:	e013      	b.n	8003ea4 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e039      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f001 f8ec 	bl	8005090 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ed2:	2111      	movs	r1, #17
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f001 f909 	bl	80050ec <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e014      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	ffff0000 	.word	0xffff0000
 8003f24:	08004207 	.word	0x08004207
 8003f28:	08004d71 	.word	0x08004d71
 8003f2c:	08004e07 	.word	0x08004e07

08003f30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <I2C_Slave_ISR_IT+0x24>
 8004020:	2302      	movs	r3, #2
 8004022:	e0ec      	b.n	80041fe <I2C_Slave_ISR_IT+0x1fe>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <I2C_Slave_ISR_IT+0x4c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004044:	6939      	ldr	r1, [r7, #16]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fc84 	bl	8004954 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d04d      	beq.n	80040f4 <I2C_Slave_ISR_IT+0xf4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d047      	beq.n	80040f4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d128      	bne.n	80040c0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b28      	cmp	r3, #40	; 0x28
 8004078:	d108      	bne.n	800408c <I2C_Slave_ISR_IT+0x8c>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004080:	d104      	bne.n	800408c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004082:	6939      	ldr	r1, [r7, #16]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fd3b 	bl	8004b00 <I2C_ITListenCplt>
 800408a:	e032      	b.n	80040f2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b29      	cmp	r3, #41	; 0x29
 8004096:	d10e      	bne.n	80040b6 <I2C_Slave_ISR_IT+0xb6>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800409e:	d00a      	beq.n	80040b6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2210      	movs	r2, #16
 80040a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fe3d 	bl	8004d28 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fb77 	bl	80047a2 <I2C_ITSlaveSeqCplt>
 80040b4:	e01d      	b.n	80040f2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2210      	movs	r2, #16
 80040bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040be:	e096      	b.n	80041ee <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2210      	movs	r2, #16
 80040c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <I2C_Slave_ISR_IT+0xe4>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e0:	f040 8085 	bne.w	80041ee <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	4619      	mov	r1, r3
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fd5c 	bl	8004ba8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80040f0:	e07d      	b.n	80041ee <I2C_Slave_ISR_IT+0x1ee>
 80040f2:	e07c      	b.n	80041ee <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d030      	beq.n	8004162 <I2C_Slave_ISR_IT+0x162>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02a      	beq.n	8004162 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d14f      	bne.n	80041f2 <I2C_Slave_ISR_IT+0x1f2>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d04b      	beq.n	80041f2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fb21 	bl	80047a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004160:	e047      	b.n	80041f2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <I2C_Slave_ISR_IT+0x184>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800417a:	6939      	ldr	r1, [r7, #16]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fa51 	bl	8004624 <I2C_ITAddrCplt>
 8004182:	e037      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d031      	beq.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02b      	beq.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d018      	beq.n	80041d8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80041d6:	e00d      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041de:	d002      	beq.n	80041e6 <I2C_Slave_ISR_IT+0x1e6>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fadb 	bl	80047a2 <I2C_ITSlaveSeqCplt>
 80041ec:	e002      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80041f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <I2C_Master_ISR_DMA+0x1a>
 800421c:	2302      	movs	r3, #2
 800421e:	e0e1      	b.n	80043e4 <I2C_Master_ISR_DMA+0x1de>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <I2C_Master_ISR_DMA+0x5e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2210      	movs	r2, #16
 8004246:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004254:	2112      	movs	r1, #18
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 ff48 	bl	80050ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fd63 	bl	8004d28 <I2C_Flush_TXDR>
 8004262:	e0ba      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d072      	beq.n	8004356 <I2C_Master_ISR_DMA+0x150>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06c      	beq.n	8004356 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d04e      	beq.n	8004334 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d906      	bls.n	80042bc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80042b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e010      	b.n	80042de <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ce:	d003      	beq.n	80042d8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e002      	b.n	80042de <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80042d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	8a79      	ldrh	r1, [r7, #18]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fecf 	bl	8005090 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b22      	cmp	r3, #34	; 0x22
 800430e:	d108      	bne.n	8004322 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004320:	e05b      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004330:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004332:	e052      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004342:	d003      	beq.n	800434c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f9ef 	bl	8004728 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800434a:	e046      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fc2a 	bl	8004ba8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004354:	e041      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d029      	beq.n	80043b6 <I2C_Master_ISR_DMA+0x1b0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d023      	beq.n	80043b6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d119      	bne.n	80043ac <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004386:	d027      	beq.n	80043d8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004390:	d108      	bne.n	80043a4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80043a2:	e019      	b.n	80043d8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f9bf 	bl	8004728 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80043aa:	e015      	b.n	80043d8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fbfa 	bl	8004ba8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043b4:	e010      	b.n	80043d8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <I2C_Master_ISR_DMA+0x1d4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fa23 	bl	800481c <I2C_ITMasterCplt>
 80043d6:	e000      	b.n	80043da <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80043d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <I2C_Slave_ISR_DMA+0x24>
 800440c:	2302      	movs	r3, #2
 800440e:	e0b1      	b.n	8004574 <I2C_Slave_ISR_DMA+0x188>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <I2C_Slave_ISR_DMA+0x4c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa8e 	bl	8004954 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8082 	beq.w	800454a <I2C_Slave_ISR_DMA+0x15e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d07b      	beq.n	800454a <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0b9b      	lsrs	r3, r3, #14
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0bdb      	lsrs	r3, r3, #15
 8004462:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d068      	beq.n	800453c <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0bdb      	lsrs	r3, r3, #15
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0b9b      	lsrs	r3, r3, #14
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d128      	bne.n	800450a <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b28      	cmp	r3, #40	; 0x28
 80044c2:	d108      	bne.n	80044d6 <I2C_Slave_ISR_DMA+0xea>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ca:	d104      	bne.n	80044d6 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fb16 	bl	8004b00 <I2C_ITListenCplt>
 80044d4:	e031      	b.n	800453a <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b29      	cmp	r3, #41	; 0x29
 80044e0:	d10e      	bne.n	8004500 <I2C_Slave_ISR_DMA+0x114>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e8:	d00a      	beq.n	8004500 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fc18 	bl	8004d28 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f952 	bl	80047a2 <I2C_ITSlaveSeqCplt>
 80044fe:	e01c      	b.n	800453a <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004508:	e01d      	b.n	8004546 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <I2C_Slave_ISR_DMA+0x140>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800452a:	d10c      	bne.n	8004546 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	4619      	mov	r1, r3
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fb38 	bl	8004ba8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004538:	e005      	b.n	8004546 <I2C_Slave_ISR_DMA+0x15a>
 800453a:	e004      	b.n	8004546 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004544:	e011      	b.n	800456a <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8004546:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004548:	e00f      	b.n	800456a <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <I2C_Slave_ISR_DMA+0x17e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f85d 	bl	8004624 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	817b      	strh	r3, [r7, #10]
 800458e:	460b      	mov	r3, r1
 8004590:	813b      	strh	r3, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <I2C_RequestMemoryWrite+0xa4>)
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fd73 	bl	8005090 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fcc7 	bl	8004f42 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02c      	b.n	8004618 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
 80045ce:	e015      	b.n	80045fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fcad 	bl	8004f42 <I2C_WaitOnTXISFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e012      	b.n	8004618 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2200      	movs	r2, #0
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fc5b 	bl	8004ec2 <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	80002000 	.word	0x80002000

08004624 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800463a:	2b28      	cmp	r3, #40	; 0x28
 800463c:	d168      	bne.n	8004710 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	b29b      	uxth	r3, r3
 8004658:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800465c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004678:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d137      	bne.n	80046f2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	09db      	lsrs	r3, r3, #7
 8004686:	b29a      	uxth	r2, r3
 8004688:	89bb      	ldrh	r3, [r7, #12]
 800468a:	4053      	eors	r3, r2
 800468c:	b29b      	uxth	r3, r3
 800468e:	f003 0306 	and.w	r3, r3, #6
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11c      	bne.n	80046d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d139      	bne.n	8004720 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2208      	movs	r2, #8
 80046b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046c2:	89ba      	ldrh	r2, [r7, #12]
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fc59 	bl	8003f80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046ce:	e027      	b.n	8004720 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80046d0:	893b      	ldrh	r3, [r7, #8]
 80046d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046d4:	2104      	movs	r1, #4
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fd76 	bl	80051c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046e4:	89ba      	ldrh	r2, [r7, #12]
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fc48 	bl	8003f80 <HAL_I2C_AddrCallback>
}
 80046f0:	e016      	b.n	8004720 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046f2:	2104      	movs	r1, #4
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fd67 	bl	80051c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004702:	89ba      	ldrh	r2, [r7, #12]
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fc39 	bl	8003f80 <HAL_I2C_AddrCallback>
}
 800470e:	e007      	b.n	8004720 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b21      	cmp	r3, #33	; 0x21
 8004742:	d115      	bne.n	8004770 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2211      	movs	r2, #17
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004758:	2101      	movs	r1, #1
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd34 	bl	80051c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fbe1 	bl	8003f30 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800476e:	e014      	b.n	800479a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2212      	movs	r2, #18
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004784:	2102      	movs	r1, #2
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fd1e 	bl	80051c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fbd5 	bl	8003f44 <HAL_I2C_MasterRxCpltCallback>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b29      	cmp	r3, #41	; 0x29
 80047bc:	d112      	bne.n	80047e4 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047cc:	2101      	movs	r1, #1
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fcfa 	bl	80051c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fbbb 	bl	8003f58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047e2:	e017      	b.n	8004814 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b2a      	cmp	r3, #42	; 0x2a
 80047ee:	d111      	bne.n	8004814 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2228      	movs	r2, #40	; 0x28
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2222      	movs	r2, #34	; 0x22
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047fe:	2102      	movs	r1, #2
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fce1 	bl	80051c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fbac 	bl	8003f6c <HAL_I2C_SlaveRxCpltCallback>
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2220      	movs	r2, #32
 800482c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b44      	ldr	r3, [pc, #272]	; (800494c <I2C_ITMasterCplt+0x130>)
 800483a:	400b      	ands	r3, r1
 800483c:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a40      	ldr	r2, [pc, #256]	; (8004950 <I2C_ITMasterCplt+0x134>)
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa59 	bl	8004d28 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004876:	2103      	movs	r1, #3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fca5 	bl	80051c8 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b60      	cmp	r3, #96	; 0x60
 800488e:	d002      	beq.n	8004896 <I2C_ITMasterCplt+0x7a>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f983 	bl	8004ba8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048a2:	e04e      	b.n	8004942 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b21      	cmp	r3, #33	; 0x21
 80048ae:	d121      	bne.n	80048f4 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d10b      	bne.n	80048dc <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fb6b 	bl	8003fb0 <HAL_I2C_MemTxCpltCallback>
}
 80048da:	e032      	b.n	8004942 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fb1f 	bl	8003f30 <HAL_I2C_MasterTxCpltCallback>
}
 80048f2:	e026      	b.n	8004942 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b22      	cmp	r3, #34	; 0x22
 80048fe:	d120      	bne.n	8004942 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d10b      	bne.n	800492c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff fb4d 	bl	8003fc4 <HAL_I2C_MemRxCpltCallback>
}
 800492a:	e00a      	b.n	8004942 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fb01 	bl	8003f44 <HAL_I2C_MasterRxCpltCallback>
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	fe00e800 	.word	0xfe00e800
 8004950:	ffff0000 	.word	0xffff0000

08004954 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004972:	2107      	movs	r1, #7
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fc27 	bl	80051c8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004988:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b58      	ldr	r3, [pc, #352]	; (8004af8 <I2C_ITSlaveCplt+0x1a4>)
 8004996:	400b      	ands	r3, r1
 8004998:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9c4 	bl	8004d28 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	0b9b      	lsrs	r3, r3, #14
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d018      	beq.n	80049e6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c2:	e010      	b.n	80049e6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	0bdb      	lsrs	r3, r3, #15
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f89b 	bl	8004ba8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b28      	cmp	r3, #40	; 0x28
 8004a7c:	d138      	bne.n	8004af0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f83d 	bl	8004b00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a86:	e033      	b.n	8004af0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a90:	d011      	beq.n	8004ab6 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe85 	bl	80047a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <I2C_ITSlaveCplt+0x1a8>)
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fa74 	bl	8003f9c <HAL_I2C_ListenCpltCallback>
}
 8004ab4:	e01c      	b.n	8004af0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b22      	cmp	r3, #34	; 0x22
 8004ac0:	d10b      	bne.n	8004ada <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fa4a 	bl	8003f6c <HAL_I2C_SlaveRxCpltCallback>
}
 8004ad8:	e00a      	b.n	8004af0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fa34 	bl	8003f58 <HAL_I2C_SlaveTxCpltCallback>
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	fe00e800 	.word	0xfe00e800
 8004afc:	ffff0000 	.word	0xffff0000

08004b00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <I2C_ITListenCplt+0xa4>)
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d022      	beq.n	8004b7e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b7e:	2107      	movs	r1, #7
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fb21 	bl	80051c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fa00 	bl	8003f9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	ffff0000 	.word	0xffff0000

08004ba8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb8:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a55      	ldr	r2, [pc, #340]	; (8004d1c <I2C_ITError+0x174>)
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b28      	cmp	r3, #40	; 0x28
 8004bde:	d005      	beq.n	8004bec <I2C_ITError+0x44>
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b29      	cmp	r3, #41	; 0x29
 8004be4:	d002      	beq.n	8004bec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bea:	d10e      	bne.n	8004c0a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bec:	2103      	movs	r1, #3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 faea 	bl	80051c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2228      	movs	r2, #40	; 0x28
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a46      	ldr	r2, [pc, #280]	; (8004d20 <I2C_ITError+0x178>)
 8004c06:	635a      	str	r2, [r3, #52]	; 0x34
 8004c08:	e013      	b.n	8004c32 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c0a:	2107      	movs	r1, #7
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fadb 	bl	80051c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b60      	cmp	r3, #96	; 0x60
 8004c1c:	d003      	beq.n	8004c26 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d123      	bne.n	8004c8a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d05c      	beq.n	8004d14 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <I2C_ITError+0x17c>)
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fb3a 	bl	80032e8 <HAL_DMA_Abort_IT>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d04c      	beq.n	8004d14 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c88:	e044      	b.n	8004d14 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c98:	d123      	bne.n	8004ce2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d030      	beq.n	8004d14 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <I2C_ITError+0x17c>)
 8004cb8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fb0e 	bl	80032e8 <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d020      	beq.n	8004d14 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
}
 8004ce0:	e018      	b.n	8004d14 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b60      	cmp	r3, #96	; 0x60
 8004cec:	d10b      	bne.n	8004d06 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff f974 	bl	8003fec <HAL_I2C_AbortCpltCallback>
}
 8004d04:	e006      	b.n	8004d14 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff f962 	bl	8003fd8 <HAL_I2C_ErrorCallback>
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	ffff0000 	.word	0xffff0000
 8004d20:	08004001 	.word	0x08004001
 8004d24:	08004e7b 	.word	0x08004e7b

08004d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d103      	bne.n	8004d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	619a      	str	r2, [r3, #24]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d98:	2112      	movs	r1, #18
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9a6 	bl	80050ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004da0:	e02d      	b.n	8004dfe <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004daa:	441a      	add	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2bff      	cmp	r3, #255	; 0xff
 8004db8:	d903      	bls.n	8004dc2 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dc0:	e004      	b.n	8004dcc <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3328      	adds	r3, #40	; 0x28
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	f7fe fa21 	bl	8003228 <HAL_DMA_Start_IT>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004dec:	2110      	movs	r1, #16
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff feda 	bl	8004ba8 <I2C_ITError>
}
 8004df4:	e003      	b.n	8004dfe <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004df6:	2112      	movs	r1, #18
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f977 	bl	80050ec <I2C_Enable_IRQ>
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fe fc4d 	bl	80036e8 <HAL_DMA_GetError>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d00e      	beq.n	8004e72 <I2C_DMAError+0x6c>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e68:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e6a:	2110      	movs	r1, #16
 8004e6c:	68b8      	ldr	r0, [r7, #8]
 8004e6e:	f7ff fe9b 	bl	8004ba8 <I2C_ITError>
  }
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	2200      	movs	r2, #0
 8004e96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d107      	bne.n	8004eb4 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff f89d 	bl	8003fec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eb2:	e002      	b.n	8004eba <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff f88f 	bl	8003fd8 <HAL_I2C_ErrorCallback>
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed2:	e022      	b.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d01e      	beq.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fd fd50 	bl	8002980 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d113      	bne.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00f      	b.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d0cd      	beq.n	8004ed4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f4e:	e02c      	b.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f835 	bl	8004fc4 <I2C_IsAcknowledgeFailed>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e02a      	b.n	8004fba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d01e      	beq.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6c:	f7fd fd08 	bl	8002980 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d113      	bne.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e007      	b.n	8004fba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d1cb      	bne.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d151      	bne.n	8005082 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fde:	e022      	b.n	8005026 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d01e      	beq.n	8005026 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fd fcca 	bl	8002980 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_IsAcknowledgeFailed+0x3a>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e02e      	b.n	8005084 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d1d5      	bne.n	8004fe0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2220      	movs	r2, #32
 8005042:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff fe6f 	bl	8004d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <I2C_IsAcknowledgeFailed+0xc8>)
 8005056:	400b      	ands	r3, r1
 8005058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	fe00e800 	.word	0xfe00e800

08005090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	817b      	strh	r3, [r7, #10]
 800509e:	4613      	mov	r3, r2
 80050a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	0d5b      	lsrs	r3, r3, #21
 80050ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <I2C_TransferConfig+0x58>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	43db      	mvns	r3, r3
 80050b6:	ea02 0103 	and.w	r1, r2, r3
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050c0:	7a7b      	ldrb	r3, [r7, #9]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	03ff63ff 	.word	0x03ff63ff

080050ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <I2C_Enable_IRQ+0xd4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800510a:	4a2e      	ldr	r2, [pc, #184]	; (80051c4 <I2C_Enable_IRQ+0xd8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d124      	bne.n	800515a <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005120:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	f003 0311 	and.w	r3, r3, #17
 8005128:	2b11      	cmp	r3, #17
 800512a:	d103      	bne.n	8005134 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005132:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	f003 0312 	and.w	r3, r3, #18
 800513a:	2b12      	cmp	r3, #18
 800513c:	d103      	bne.n	8005146 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f043 0320 	orr.w	r3, r3, #32
 8005144:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	f003 0312 	and.w	r3, r3, #18
 800514c:	2b12      	cmp	r3, #18
 800514e:	d128      	bne.n	80051a2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005156:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005158:	e023      	b.n	80051a2 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800515a:	887b      	ldrh	r3, [r7, #2]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800516a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800517c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800518e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	f003 0312 	and.w	r3, r3, #18
 8005196:	2b12      	cmp	r3, #18
 8005198:	d103      	bne.n	80051a2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f043 0320 	orr.w	r3, r3, #32
 80051a0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	08004207 	.word	0x08004207
 80051c4:	080043ed 	.word	0x080043ed

080051c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00f      	beq.n	8005202 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80051e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051f6:	2b28      	cmp	r3, #40	; 0x28
 80051f8:	d003      	beq.n	8005202 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005200:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005212:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005220:	2b28      	cmp	r3, #40	; 0x28
 8005222:	d003      	beq.n	800522c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800522a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	f003 0311 	and.w	r3, r3, #17
 8005244:	2b11      	cmp	r3, #17
 8005246:	d103      	bne.n	8005250 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800524e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	f003 0312 	and.w	r3, r3, #18
 8005256:	2b12      	cmp	r3, #18
 8005258:	d103      	bne.n	8005262 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f043 0320 	orr.w	r3, r3, #32
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005262:	887b      	ldrh	r3, [r7, #2]
 8005264:	f003 0312 	and.w	r3, r3, #18
 8005268:	2b12      	cmp	r3, #18
 800526a:	d103      	bne.n	8005274 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	43da      	mvns	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	400a      	ands	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d138      	bne.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e032      	b.n	800531c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2224      	movs	r2, #36	; 0x24
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b20      	cmp	r3, #32
 800533c:	d139      	bne.n	80053b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005348:	2302      	movs	r3, #2
 800534a:	e033      	b.n	80053b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800537a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a04      	ldr	r2, [pc, #16]	; (80053dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40007000 	.word	0x40007000

080053e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <HAL_PWREx_EnableOverDrive+0x98>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a22      	ldr	r2, [pc, #136]	; (8005478 <HAL_PWREx_EnableOverDrive+0x98>)
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_PWREx_EnableOverDrive+0x98>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800540e:	f7fd fab7 	bl	8002980 <HAL_GetTick>
 8005412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005414:	e009      	b.n	800542a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005416:	f7fd fab3 	bl	8002980 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005424:	d901      	bls.n	800542a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e022      	b.n	8005470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005436:	d1ee      	bne.n	8005416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a0f      	ldr	r2, [pc, #60]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 800543e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005444:	f7fd fa9c 	bl	8002980 <HAL_GetTick>
 8005448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800544a:	e009      	b.n	8005460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800544c:	f7fd fa98 	bl	8002980 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545a:	d901      	bls.n	8005460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e007      	b.n	8005470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546c:	d1ee      	bne.n	800544c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000

08005480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005488:	2300      	movs	r3, #0
 800548a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e291      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8087 	beq.w	80055b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a4:	4b96      	ldr	r3, [pc, #600]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d00c      	beq.n	80054ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b0:	4b93      	ldr	r3, [pc, #588]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d112      	bne.n	80054e2 <HAL_RCC_OscConfig+0x62>
 80054bc:	4b90      	ldr	r3, [pc, #576]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d06c      	beq.n	80055b0 <HAL_RCC_OscConfig+0x130>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d168      	bne.n	80055b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e26b      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x7a>
 80054ec:	4b84      	ldr	r3, [pc, #528]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a83      	ldr	r2, [pc, #524]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80054f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e02e      	b.n	8005558 <HAL_RCC_OscConfig+0xd8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x9c>
 8005502:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a7e      	ldr	r2, [pc, #504]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b7c      	ldr	r3, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7b      	ldr	r2, [pc, #492]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e01d      	b.n	8005558 <HAL_RCC_OscConfig+0xd8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005524:	d10c      	bne.n	8005540 <HAL_RCC_OscConfig+0xc0>
 8005526:	4b76      	ldr	r3, [pc, #472]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a75      	ldr	r2, [pc, #468]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800552c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4b73      	ldr	r3, [pc, #460]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a72      	ldr	r2, [pc, #456]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e00b      	b.n	8005558 <HAL_RCC_OscConfig+0xd8>
 8005540:	4b6f      	ldr	r3, [pc, #444]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6e      	ldr	r2, [pc, #440]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	4b6c      	ldr	r3, [pc, #432]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6b      	ldr	r2, [pc, #428]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d013      	beq.n	8005588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fd fa0e 	bl	8002980 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005568:	f7fd fa0a 	bl	8002980 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	; 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e21f      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557a:	4b61      	ldr	r3, [pc, #388]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0xe8>
 8005586:	e014      	b.n	80055b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fd f9fa 	bl	8002980 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005590:	f7fd f9f6 	bl	8002980 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e20b      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a2:	4b57      	ldr	r3, [pc, #348]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x110>
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d069      	beq.n	8005692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055be:	4b50      	ldr	r3, [pc, #320]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ca:	4b4d      	ldr	r3, [pc, #308]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d11c      	bne.n	8005610 <HAL_RCC_OscConfig+0x190>
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d116      	bne.n	8005610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_RCC_OscConfig+0x17a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d001      	beq.n	80055fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e1df      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	493d      	ldr	r1, [pc, #244]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560e:	e040      	b.n	8005692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d023      	beq.n	8005660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a38      	ldr	r2, [pc, #224]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fd f9ac 	bl	8002980 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562c:	f7fd f9a8 	bl	8002980 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e1bd      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563e:	4b30      	ldr	r3, [pc, #192]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4929      	ldr	r1, [pc, #164]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
 800565e:	e018      	b.n	8005692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fd f988 	bl	8002980 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005674:	f7fd f984 	bl	8002980 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e199      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d038      	beq.n	8005710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d019      	beq.n	80056da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a6:	4b16      	ldr	r3, [pc, #88]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80056a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056aa:	4a15      	ldr	r2, [pc, #84]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fd f965 	bl	8002980 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fd f961 	bl	8002980 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e176      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80056ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x23a>
 80056d8:	e01a      	b.n	8005710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	4a08      	ldr	r2, [pc, #32]	; (8005700 <HAL_RCC_OscConfig+0x280>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7fd f94b 	bl	8002980 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ee:	f7fd f947 	bl	8002980 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d903      	bls.n	8005704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e15c      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
 8005700:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005704:	4b91      	ldr	r3, [pc, #580]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ee      	bne.n	80056ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a4 	beq.w	8005866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571e:	4b8b      	ldr	r3, [pc, #556]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	4b88      	ldr	r3, [pc, #544]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4a87      	ldr	r2, [pc, #540]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	; 0x40
 8005736:	4b85      	ldr	r3, [pc, #532]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005746:	4b82      	ldr	r3, [pc, #520]	; (8005950 <HAL_RCC_OscConfig+0x4d0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d118      	bne.n	8005784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005752:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <HAL_RCC_OscConfig+0x4d0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7e      	ldr	r2, [pc, #504]	; (8005950 <HAL_RCC_OscConfig+0x4d0>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575e:	f7fd f90f 	bl	8002980 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005766:	f7fd f90b 	bl	8002980 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e120      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005778:	4b75      	ldr	r3, [pc, #468]	; (8005950 <HAL_RCC_OscConfig+0x4d0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x31a>
 800578c:	4b6f      	ldr	r3, [pc, #444]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	4a6e      	ldr	r2, [pc, #440]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	6713      	str	r3, [r2, #112]	; 0x70
 8005798:	e02d      	b.n	80057f6 <HAL_RCC_OscConfig+0x376>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x33c>
 80057a2:	4b6a      	ldr	r3, [pc, #424]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	4a69      	ldr	r2, [pc, #420]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	6713      	str	r3, [r2, #112]	; 0x70
 80057ae:	4b67      	ldr	r3, [pc, #412]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a66      	ldr	r2, [pc, #408]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057b4:	f023 0304 	bic.w	r3, r3, #4
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	e01c      	b.n	80057f6 <HAL_RCC_OscConfig+0x376>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d10c      	bne.n	80057de <HAL_RCC_OscConfig+0x35e>
 80057c4:	4b61      	ldr	r3, [pc, #388]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a60      	ldr	r2, [pc, #384]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	4b5e      	ldr	r3, [pc, #376]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a5d      	ldr	r2, [pc, #372]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	e00b      	b.n	80057f6 <HAL_RCC_OscConfig+0x376>
 80057de:	4b5b      	ldr	r3, [pc, #364]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a5a      	ldr	r2, [pc, #360]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	4b58      	ldr	r3, [pc, #352]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a57      	ldr	r2, [pc, #348]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fd f8bf 	bl	8002980 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fd f8bb 	bl	8002980 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	; 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0ce      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581c:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ee      	beq.n	8005806 <HAL_RCC_OscConfig+0x386>
 8005828:	e014      	b.n	8005854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582a:	f7fd f8a9 	bl	8002980 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fd f8a5 	bl	8002980 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e0b8      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005848:	4b40      	ldr	r3, [pc, #256]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ee      	bne.n	8005832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d105      	bne.n	8005866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585a:	4b3c      	ldr	r3, [pc, #240]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80a4 	beq.w	80059b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d06b      	beq.n	8005954 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d149      	bne.n	8005918 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b31      	ldr	r3, [pc, #196]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a30      	ldr	r2, [pc, #192]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800588e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd f876 	bl	8002980 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fd f872 	bl	8002980 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e087      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	3b01      	subs	r3, #1
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	4313      	orrs	r3, r2
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80058de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e4:	4b19      	ldr	r3, [pc, #100]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a18      	ldr	r2, [pc, #96]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd f846 	bl	8002980 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fd f842 	bl	8002980 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e057      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x478>
 8005916:	e04f      	b.n	80059b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a0b      	ldr	r2, [pc, #44]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd f82c 	bl	8002980 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd f828 	bl	8002980 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e03d      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b03      	ldr	r3, [pc, #12]	; (800594c <HAL_RCC_OscConfig+0x4cc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x4ac>
 800594a:	e035      	b.n	80059b8 <HAL_RCC_OscConfig+0x538>
 800594c:	40023800 	.word	0x40023800
 8005950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005954:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <HAL_RCC_OscConfig+0x544>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d028      	beq.n	80059b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d121      	bne.n	80059b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d11a      	bne.n	80059b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800598a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800598c:	4293      	cmp	r3, r2
 800598e:	d111      	bne.n	80059b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	3b01      	subs	r3, #1
 800599e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d107      	bne.n	80059b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800

080059c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0d0      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e0:	4b6a      	ldr	r3, [pc, #424]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d910      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 020f 	bic.w	r2, r3, #15
 80059f6:	4965      	ldr	r1, [pc, #404]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0b8      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a40:	4b53      	ldr	r3, [pc, #332]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a52      	ldr	r2, [pc, #328]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b50      	ldr	r3, [pc, #320]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	494d      	ldr	r1, [pc, #308]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d040      	beq.n	8005aec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d115      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d107      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e073      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9a:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e06b      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 0203 	bic.w	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4936      	ldr	r1, [pc, #216]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005abc:	f7fc ff60 	bl	8002980 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac4:	f7fc ff5c 	bl	8002980 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e053      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 020c 	and.w	r2, r3, #12
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1eb      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d210      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4922      	ldr	r1, [pc, #136]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e032      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4916      	ldr	r1, [pc, #88]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	490e      	ldr	r1, [pc, #56]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b5a:	f000 f821 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <HAL_RCC_ClockConfig+0x1cc>)
 8005b6c:	5cd3      	ldrb	r3, [r2, r3]
 8005b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_ClockConfig+0x1d0>)
 8005b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1d4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fc febc 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00
 8005b90:	40023800 	.word	0x40023800
 8005b94:	08008254 	.word	0x08008254
 8005b98:	20000004 	.word	0x20000004
 8005b9c:	20000008 	.word	0x20000008

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x32>
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d008      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x38>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80b4 	bne.w	8005d34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005bce:	60bb      	str	r3, [r7, #8]
      break;
 8005bd0:	e0b3      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bd2:	4b5e      	ldr	r3, [pc, #376]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005bd4:	60bb      	str	r3, [r7, #8]
      break;
 8005bd6:	e0b0      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd8:	4b5a      	ldr	r3, [pc, #360]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005be2:	4b58      	ldr	r3, [pc, #352]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d04a      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bee:	4b55      	ldr	r3, [pc, #340]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	f04f 0400 	mov.w	r4, #0
 8005bf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	ea03 0501 	and.w	r5, r3, r1
 8005c04:	ea04 0602 	and.w	r6, r4, r2
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	0154      	lsls	r4, r2, #5
 8005c16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c1a:	014b      	lsls	r3, r1, #5
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4622      	mov	r2, r4
 8005c20:	1b49      	subs	r1, r1, r5
 8005c22:	eb62 0206 	sbc.w	r2, r2, r6
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	f04f 0400 	mov.w	r4, #0
 8005c2e:	0194      	lsls	r4, r2, #6
 8005c30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c34:	018b      	lsls	r3, r1, #6
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	eb64 0402 	sbc.w	r4, r4, r2
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	00e2      	lsls	r2, r4, #3
 8005c46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c4a:	00d9      	lsls	r1, r3, #3
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4614      	mov	r4, r2
 8005c50:	195b      	adds	r3, r3, r5
 8005c52:	eb44 0406 	adc.w	r4, r4, r6
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	0262      	lsls	r2, r4, #9
 8005c60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c64:	0259      	lsls	r1, r3, #9
 8005c66:	460b      	mov	r3, r1
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f04f 0400 	mov.w	r4, #0
 8005c74:	461a      	mov	r2, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	f7fa fec8 	bl	8000a0c <__aeabi_uldivmod>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e049      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	f04f 0400 	mov.w	r4, #0
 8005c8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	ea03 0501 	and.w	r5, r3, r1
 8005c9a:	ea04 0602 	and.w	r6, r4, r2
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	f04f 0400 	mov.w	r4, #0
 8005caa:	0154      	lsls	r4, r2, #5
 8005cac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cb0:	014b      	lsls	r3, r1, #5
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	1b49      	subs	r1, r1, r5
 8005cb8:	eb62 0206 	sbc.w	r2, r2, r6
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	0194      	lsls	r4, r2, #6
 8005cc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005cca:	018b      	lsls	r3, r1, #6
 8005ccc:	1a5b      	subs	r3, r3, r1
 8005cce:	eb64 0402 	sbc.w	r4, r4, r2
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	00e2      	lsls	r2, r4, #3
 8005cdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ce0:	00d9      	lsls	r1, r3, #3
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	195b      	adds	r3, r3, r5
 8005ce8:	eb44 0406 	adc.w	r4, r4, r6
 8005cec:	f04f 0100 	mov.w	r1, #0
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	02a2      	lsls	r2, r4, #10
 8005cf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cfa:	0299      	lsls	r1, r3, #10
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4614      	mov	r4, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	4621      	mov	r1, r4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f04f 0400 	mov.w	r4, #0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	f7fa fe7d 	bl	8000a0c <__aeabi_uldivmod>
 8005d12:	4603      	mov	r3, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d36:	60bb      	str	r3, [r7, #8]
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	007a1200 	.word	0x007a1200

08005d50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d54:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d56:	681b      	ldr	r3, [r3, #0]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000004 	.word	0x20000004

08005d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d6c:	f7ff fff0 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 8005d70:	4601      	mov	r1, r0
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	0a9b      	lsrs	r3, r3, #10
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d7e:	5cd3      	ldrb	r3, [r2, r3]
 8005d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	08008264 	.word	0x08008264

08005d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d94:	f7ff ffdc 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	0b5b      	lsrs	r3, r3, #13
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40023800 	.word	0x40023800
 8005db4:	08008264 	.word	0x08008264

08005db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ddc:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4a64      	ldr	r2, [pc, #400]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005de2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005de6:	6093      	str	r3, [r2, #8]
 8005de8:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4960      	ldr	r1, [pc, #384]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d017      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e0e:	4b59      	ldr	r3, [pc, #356]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1c:	4955      	ldr	r1, [pc, #340]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	4946      	ldr	r1, [pc, #280]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e68:	d101      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005e76:	2301      	movs	r3, #1
 8005e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808b 	beq.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	4a39      	ldr	r2, [pc, #228]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6413      	str	r3, [r2, #64]	; 0x40
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a34      	ldr	r2, [pc, #208]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eac:	f7fc fd68 	bl	8002980 <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb4:	f7fc fd64 	bl	8002980 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	; 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e2ba      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ec6:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed2:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d035      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d02e      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef0:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005efa:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f06:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d114      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fc fd2c 	bl	8002980 <HAL_GetTick>
 8005f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fc fd28 	bl	8002980 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e27c      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0ee      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5a:	d111      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f6a:	400b      	ands	r3, r1
 8005f6c:	4901      	ldr	r1, [pc, #4]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
 8005f72:	e00b      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005f74:	40023800 	.word	0x40023800
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	0ffffcff 	.word	0x0ffffcff
 8005f80:	4ba3      	ldr	r3, [pc, #652]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4aa2      	ldr	r2, [pc, #648]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f8a:	6093      	str	r3, [r2, #8]
 8005f8c:	4ba0      	ldr	r3, [pc, #640]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f98:	499d      	ldr	r1, [pc, #628]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d010      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005faa:	4b99      	ldr	r3, [pc, #612]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb0:	4a97      	ldr	r2, [pc, #604]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fba:	4b95      	ldr	r3, [pc, #596]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	4992      	ldr	r1, [pc, #584]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd8:	4b8d      	ldr	r3, [pc, #564]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	498a      	ldr	r1, [pc, #552]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ffa:	4b85      	ldr	r3, [pc, #532]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	4981      	ldr	r1, [pc, #516]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800601c:	4b7c      	ldr	r3, [pc, #496]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602a:	4979      	ldr	r1, [pc, #484]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800603e:	4b74      	ldr	r3, [pc, #464]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f023 0203 	bic.w	r2, r3, #3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	4970      	ldr	r1, [pc, #448]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006060:	4b6b      	ldr	r3, [pc, #428]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f023 020c 	bic.w	r2, r3, #12
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	4968      	ldr	r1, [pc, #416]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006082:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006090:	495f      	ldr	r1, [pc, #380]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060a4:	4b5a      	ldr	r3, [pc, #360]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b2:	4957      	ldr	r1, [pc, #348]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060c6:	4b52      	ldr	r3, [pc, #328]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d4:	494e      	ldr	r1, [pc, #312]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80060e8:	4b49      	ldr	r3, [pc, #292]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f6:	4946      	ldr	r1, [pc, #280]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800610a:	4b41      	ldr	r3, [pc, #260]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006110:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	493d      	ldr	r1, [pc, #244]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	4935      	ldr	r1, [pc, #212]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d011      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800614e:	4b30      	ldr	r3, [pc, #192]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615c:	492c      	ldr	r1, [pc, #176]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d101      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800616e:	2301      	movs	r3, #1
 8006170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800617e:	4b24      	ldr	r3, [pc, #144]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618c:	4920      	ldr	r1, [pc, #128]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ae:	4918      	ldr	r1, [pc, #96]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d0:	490f      	ldr	r1, [pc, #60]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d005      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x432>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061e6:	f040 809c 	bne.w	8006322 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f6:	f7fc fbc3 	bl	8002980 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061fe:	f7fc fbbf 	bl	8002980 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b64      	cmp	r3, #100	; 0x64
 800620a:	d903      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e115      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006210:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006214:	4b8b      	ldr	r3, [pc, #556]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ee      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d017      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d113      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006234:	4b83      	ldr	r3, [pc, #524]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623a:	0e1b      	lsrs	r3, r3, #24
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	019a      	lsls	r2, r3, #6
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	061b      	lsls	r3, r3, #24
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	071b      	lsls	r3, r3, #28
 8006254:	497b      	ldr	r1, [pc, #492]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800627a:	2b00      	cmp	r3, #0
 800627c:	d024      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006286:	d11f      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006288:	4b6e      	ldr	r3, [pc, #440]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	0f1b      	lsrs	r3, r3, #28
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	019a      	lsls	r2, r3, #6
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	061b      	lsls	r3, r3, #24
 80062a2:	431a      	orrs	r2, r3
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	071b      	lsls	r3, r3, #28
 80062a8:	4966      	ldr	r1, [pc, #408]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062b0:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b6:	f023 021f 	bic.w	r2, r3, #31
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4960      	ldr	r1, [pc, #384]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	019a      	lsls	r2, r3, #6
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	061b      	lsls	r3, r3, #24
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	071b      	lsls	r3, r3, #28
 80062e8:	4956      	ldr	r1, [pc, #344]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062f0:	4b54      	ldr	r3, [pc, #336]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a53      	ldr	r2, [pc, #332]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fc:	f7fc fb40 	bl	8002980 <HAL_GetTick>
 8006300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006304:	f7fc fb3c 	bl	8002980 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e092      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006316:	4b4b      	ldr	r3, [pc, #300]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 8088 	bne.w	800643a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800632a:	4b46      	ldr	r3, [pc, #280]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a45      	ldr	r2, [pc, #276]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006336:	f7fc fb23 	bl	8002980 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800633e:	f7fc fb1f 	bl	8002980 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b64      	cmp	r3, #100	; 0x64
 800634a:	d901      	bls.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e075      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006350:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d0ef      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800637a:	2b00      	cmp	r3, #0
 800637c:	d024      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d120      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006386:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	019a      	lsls	r2, r3, #6
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	4927      	ldr	r1, [pc, #156]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063ae:	4b25      	ldr	r3, [pc, #148]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	3b01      	subs	r3, #1
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	4920      	ldr	r1, [pc, #128]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d018      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063dc:	d113      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063de:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	019a      	lsls	r2, r3, #6
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	431a      	orrs	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	061b      	lsls	r3, r3, #24
 80063fe:	4911      	ldr	r1, [pc, #68]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006412:	f7fc fab5 	bl	8002980 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006418:	e008      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800641a:	f7fc fab1 	bl	8002980 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b64      	cmp	r3, #100	; 0x64
 8006426:	d901      	bls.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e007      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006438:	d1ef      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800

08006448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e01d      	b.n	8006496 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fb fe90 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f000 fc00 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e01d      	b.n	80064ec <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fb fef9 	bl	80022bc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3304      	adds	r3, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f000 fbd5 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e01d      	b.n	8006542 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb feae 	bl	800227c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 fbaa 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2201      	movs	r2, #1
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f8c3 	bl	80076ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <HAL_TIM_PWM_Start+0x7c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIM_PWM_Start+0x2c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_TIM_PWM_Start+0x80>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_TIM_PWM_Start+0x30>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_TIM_PWM_Start+0x32>
 800657c:	2300      	movs	r3, #0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <HAL_TIM_PWM_Start+0x84>)
 800659a:	4013      	ands	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b06      	cmp	r3, #6
 80065a2:	d00b      	beq.n	80065bc <HAL_TIM_PWM_Start+0x70>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065aa:	d007      	beq.n	80065bc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40010400 	.word	0x40010400
 80065d0:	00010007 	.word	0x00010007

080065d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e01d      	b.n	8006622 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f815 	bl	800662a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f000 fb3a 	bl	8006c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d841      	bhi.n	80066d4 <HAL_TIM_IC_Start_IT+0x94>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_TIM_IC_Start_IT+0x18>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	0800668d 	.word	0x0800668d
 800665c:	080066d5 	.word	0x080066d5
 8006660:	080066d5 	.word	0x080066d5
 8006664:	080066d5 	.word	0x080066d5
 8006668:	0800669f 	.word	0x0800669f
 800666c:	080066d5 	.word	0x080066d5
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066d5 	.word	0x080066d5
 8006678:	080066b1 	.word	0x080066b1
 800667c:	080066d5 	.word	0x080066d5
 8006680:	080066d5 	.word	0x080066d5
 8006684:	080066d5 	.word	0x080066d5
 8006688:	080066c3 	.word	0x080066c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0202 	orr.w	r2, r2, #2
 800669a:	60da      	str	r2, [r3, #12]
      break;
 800669c:	e01b      	b.n	80066d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0204 	orr.w	r2, r2, #4
 80066ac:	60da      	str	r2, [r3, #12]
      break;
 80066ae:	e012      	b.n	80066d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	60da      	str	r2, [r3, #12]
      break;
 80066c0:	e009      	b.n	80066d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0210 	orr.w	r2, r2, #16
 80066d0:	60da      	str	r2, [r3, #12]
      break;
 80066d2:	e000      	b.n	80066d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80066d4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2201      	movs	r2, #1
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 f803 	bl	80076ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_TIM_IC_Start_IT+0xd8>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d00b      	beq.n	800670e <HAL_TIM_IC_Start_IT+0xce>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d007      	beq.n	800670e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0201 	orr.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	00010007 	.word	0x00010007

0800671c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006732:	2302      	movs	r3, #2
 8006734:	e06c      	b.n	8006810 <HAL_TIM_OC_ConfigChannel+0xf4>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b14      	cmp	r3, #20
 800674a:	d857      	bhi.n	80067fc <HAL_TIM_OC_ConfigChannel+0xe0>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <HAL_TIM_OC_ConfigChannel+0x38>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	080067a9 	.word	0x080067a9
 8006758:	080067fd 	.word	0x080067fd
 800675c:	080067fd 	.word	0x080067fd
 8006760:	080067fd 	.word	0x080067fd
 8006764:	080067b7 	.word	0x080067b7
 8006768:	080067fd 	.word	0x080067fd
 800676c:	080067fd 	.word	0x080067fd
 8006770:	080067fd 	.word	0x080067fd
 8006774:	080067c5 	.word	0x080067c5
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067fd 	.word	0x080067fd
 8006780:	080067fd 	.word	0x080067fd
 8006784:	080067d3 	.word	0x080067d3
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067ef 	.word	0x080067ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fb0c 	bl	8006dcc <TIM_OC1_SetConfig>
      break;
 80067b4:	e023      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fb77 	bl	8006eb0 <TIM_OC2_SetConfig>
      break;
 80067c2:	e01c      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fbe8 	bl	8006fa0 <TIM_OC3_SetConfig>
      break;
 80067d0:	e015      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fc57 	bl	800708c <TIM_OC4_SetConfig>
      break;
 80067de:	e00e      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fca8 	bl	800713c <TIM_OC5_SetConfig>
      break;
 80067ec:	e007      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fcf3 	bl	80071e0 <TIM_OC6_SetConfig>
      break;
 80067fa:	e000      	b.n	80067fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80067fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_TIM_IC_ConfigChannel+0x1a>
 800682e:	2302      	movs	r3, #2
 8006830:	e08a      	b.n	8006948 <HAL_TIM_IC_ConfigChannel+0x130>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11b      	bne.n	8006880 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f000 fd9e 	bl	8007398 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 020c 	bic.w	r2, r2, #12
 800686a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6999      	ldr	r1, [r3, #24]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	619a      	str	r2, [r3, #24]
 800687e:	e05a      	b.n	8006936 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d11c      	bne.n	80068c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f000 fe22 	bl	80074de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6999      	ldr	r1, [r3, #24]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	021a      	lsls	r2, r3, #8
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	619a      	str	r2, [r3, #24]
 80068be:	e03a      	b.n	8006936 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d11b      	bne.n	80068fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f000 fe6f 	bl	80075b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 020c 	bic.w	r2, r2, #12
 80068e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69d9      	ldr	r1, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	61da      	str	r2, [r3, #28]
 80068fc:	e01b      	b.n	8006936 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6819      	ldr	r1, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f000 fe8f 	bl	8007630 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006920:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69d9      	ldr	r1, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	021a      	lsls	r2, r3, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006966:	2302      	movs	r3, #2
 8006968:	e105      	b.n	8006b76 <HAL_TIM_PWM_ConfigChannel+0x226>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b14      	cmp	r3, #20
 800697e:	f200 80f0 	bhi.w	8006b62 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006b63 	.word	0x08006b63
 8006990:	08006b63 	.word	0x08006b63
 8006994:	08006b63 	.word	0x08006b63
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006b63 	.word	0x08006b63
 80069a0:	08006b63 	.word	0x08006b63
 80069a4:	08006b63 	.word	0x08006b63
 80069a8:	08006a5f 	.word	0x08006a5f
 80069ac:	08006b63 	.word	0x08006b63
 80069b0:	08006b63 	.word	0x08006b63
 80069b4:	08006b63 	.word	0x08006b63
 80069b8:	08006a9f 	.word	0x08006a9f
 80069bc:	08006b63 	.word	0x08006b63
 80069c0:	08006b63 	.word	0x08006b63
 80069c4:	08006b63 	.word	0x08006b63
 80069c8:	08006ae1 	.word	0x08006ae1
 80069cc:	08006b63 	.word	0x08006b63
 80069d0:	08006b63 	.word	0x08006b63
 80069d4:	08006b63 	.word	0x08006b63
 80069d8:	08006b21 	.word	0x08006b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f9f2 	bl	8006dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
      break;
 8006a1a:	e0a3      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fa44 	bl	8006eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
      break;
 8006a5c:	e082      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fa9b 	bl	8006fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0204 	bic.w	r2, r2, #4
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	61da      	str	r2, [r3, #28]
      break;
 8006a9c:	e062      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 faf1 	bl	800708c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	021a      	lsls	r2, r3, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	61da      	str	r2, [r3, #28]
      break;
 8006ade:	e041      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fb28 	bl	800713c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b1e:	e021      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fb5a 	bl	80071e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b60:	e000      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006b62:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop

08006b80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e031      	b.n	8006bfc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fb6c 	bl	8007288 <TIM_SlaveTimer_SetConfig>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e018      	b.n	8006bfc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006be8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d831      	bhi.n	8006c7c <HAL_TIM_ReadCapturedValue+0x78>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c5f 	.word	0x08006c5f
 8006c34:	08006c7d 	.word	0x08006c7d
 8006c38:	08006c7d 	.word	0x08006c7d
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c7d 	.word	0x08006c7d
 8006c48:	08006c7d 	.word	0x08006c7d
 8006c4c:	08006c7d 	.word	0x08006c7d
 8006c50:	08006c73 	.word	0x08006c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	60fb      	str	r3, [r7, #12]

      break;
 8006c5c:	e00f      	b.n	8006c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	60fb      	str	r3, [r7, #12]

      break;
 8006c66:	e00a      	b.n	8006c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	60fb      	str	r3, [r7, #12]

      break;
 8006c70:	e005      	b.n	8006c7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	60fb      	str	r3, [r7, #12]

      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c7c:	bf00      	nop
  }

  return tmpreg;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a40      	ldr	r2, [pc, #256]	; (8006da0 <TIM_Base_SetConfig+0x114>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d00f      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a3d      	ldr	r2, [pc, #244]	; (8006da4 <TIM_Base_SetConfig+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a3c      	ldr	r2, [pc, #240]	; (8006da8 <TIM_Base_SetConfig+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d007      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <TIM_Base_SetConfig+0x120>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_Base_SetConfig+0x40>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a3a      	ldr	r2, [pc, #232]	; (8006db0 <TIM_Base_SetConfig+0x124>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d108      	bne.n	8006cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <TIM_Base_SetConfig+0x114>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d02b      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cec:	d027      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2c      	ldr	r2, [pc, #176]	; (8006da4 <TIM_Base_SetConfig+0x118>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d023      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2b      	ldr	r2, [pc, #172]	; (8006da8 <TIM_Base_SetConfig+0x11c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01f      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <TIM_Base_SetConfig+0x120>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01b      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <TIM_Base_SetConfig+0x124>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d017      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a28      	ldr	r2, [pc, #160]	; (8006db4 <TIM_Base_SetConfig+0x128>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <TIM_Base_SetConfig+0x12c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00f      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <TIM_Base_SetConfig+0x130>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a25      	ldr	r2, [pc, #148]	; (8006dc0 <TIM_Base_SetConfig+0x134>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a24      	ldr	r2, [pc, #144]	; (8006dc4 <TIM_Base_SetConfig+0x138>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a23      	ldr	r2, [pc, #140]	; (8006dc8 <TIM_Base_SetConfig+0x13c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d108      	bne.n	8006d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <TIM_Base_SetConfig+0x114>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_Base_SetConfig+0xf8>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <TIM_Base_SetConfig+0x124>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d103      	bne.n	8006d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	615a      	str	r2, [r3, #20]
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800
 8006dc0:	40001800 	.word	0x40001800
 8006dc4:	40001c00 	.word	0x40001c00
 8006dc8:	40002000 	.word	0x40002000

08006dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0201 	bic.w	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <TIM_OC1_SetConfig+0xd8>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0302 	bic.w	r3, r3, #2
 8006e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a21      	ldr	r2, [pc, #132]	; (8006ea8 <TIM_OC1_SetConfig+0xdc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC1_SetConfig+0x64>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a20      	ldr	r2, [pc, #128]	; (8006eac <TIM_OC1_SetConfig+0xe0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10c      	bne.n	8006e4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0308 	bic.w	r3, r3, #8
 8006e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f023 0304 	bic.w	r3, r3, #4
 8006e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <TIM_OC1_SetConfig+0xdc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC1_SetConfig+0x8e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a15      	ldr	r2, [pc, #84]	; (8006eac <TIM_OC1_SetConfig+0xe0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d111      	bne.n	8006e7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	fffeff8f 	.word	0xfffeff8f
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40010400 	.word	0x40010400

08006eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0210 	bic.w	r2, r3, #16
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <TIM_OC2_SetConfig+0xe4>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f023 0320 	bic.w	r3, r3, #32
 8006efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <TIM_OC2_SetConfig+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_OC2_SetConfig+0x68>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <TIM_OC2_SetConfig+0xec>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d10d      	bne.n	8006f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <TIM_OC2_SetConfig+0xe8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC2_SetConfig+0x94>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <TIM_OC2_SetConfig+0xec>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d113      	bne.n	8006f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	feff8fff 	.word	0xfeff8fff
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4b2d      	ldr	r3, [pc, #180]	; (8007080 <TIM_OC3_SetConfig+0xe0>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <TIM_OC3_SetConfig+0xe4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC3_SetConfig+0x66>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a21      	ldr	r2, [pc, #132]	; (8007088 <TIM_OC3_SetConfig+0xe8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10d      	bne.n	8007022 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800700c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <TIM_OC3_SetConfig+0xe4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC3_SetConfig+0x92>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <TIM_OC3_SetConfig+0xe8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d113      	bne.n	800705a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	fffeff8f 	.word	0xfffeff8f
 8007084:	40010000 	.word	0x40010000
 8007088:	40010400 	.word	0x40010400

0800708c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <TIM_OC4_SetConfig+0xa4>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	031b      	lsls	r3, r3, #12
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a13      	ldr	r2, [pc, #76]	; (8007134 <TIM_OC4_SetConfig+0xa8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC4_SetConfig+0x68>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a12      	ldr	r2, [pc, #72]	; (8007138 <TIM_OC4_SetConfig+0xac>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d109      	bne.n	8007108 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	019b      	lsls	r3, r3, #6
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	feff8fff 	.word	0xfeff8fff
 8007134:	40010000 	.word	0x40010000
 8007138:	40010400 	.word	0x40010400

0800713c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <TIM_OC5_SetConfig+0x98>)
 8007168:	4013      	ands	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800717c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <TIM_OC5_SetConfig+0x9c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC5_SetConfig+0x5e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <TIM_OC5_SetConfig+0xa0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d109      	bne.n	80071ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	621a      	str	r2, [r3, #32]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	fffeff8f 	.word	0xfffeff8f
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400

080071e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4b1c      	ldr	r3, [pc, #112]	; (800727c <TIM_OC6_SetConfig+0x9c>)
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a13      	ldr	r2, [pc, #76]	; (8007280 <TIM_OC6_SetConfig+0xa0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC6_SetConfig+0x60>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a12      	ldr	r2, [pc, #72]	; (8007284 <TIM_OC6_SetConfig+0xa4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d109      	bne.n	8007254 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	feff8fff 	.word	0xfeff8fff
 8007280:	40010000 	.word	0x40010000
 8007284:	40010400 	.word	0x40010400

08007288 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4b39      	ldr	r3, [pc, #228]	; (8007394 <TIM_SlaveTimer_SetConfig+0x10c>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b30      	cmp	r3, #48	; 0x30
 80072cc:	d05c      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0x100>
 80072ce:	2b30      	cmp	r3, #48	; 0x30
 80072d0:	d806      	bhi.n	80072e0 <TIM_SlaveTimer_SetConfig+0x58>
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d058      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0x100>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d056      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0x100>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d054      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80072de:	e054      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80072e0:	2b50      	cmp	r3, #80	; 0x50
 80072e2:	d03d      	beq.n	8007360 <TIM_SlaveTimer_SetConfig+0xd8>
 80072e4:	2b50      	cmp	r3, #80	; 0x50
 80072e6:	d802      	bhi.n	80072ee <TIM_SlaveTimer_SetConfig+0x66>
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d010      	beq.n	800730e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80072ec:	e04d      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80072ee:	2b60      	cmp	r3, #96	; 0x60
 80072f0:	d040      	beq.n	8007374 <TIM_SlaveTimer_SetConfig+0xec>
 80072f2:	2b70      	cmp	r3, #112	; 0x70
 80072f4:	d000      	beq.n	80072f8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80072f6:	e048      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68d9      	ldr	r1, [r3, #12]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f000 f9cf 	bl	80076aa <TIM_ETR_SetConfig>
      break;
 800730c:	e03d      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d101      	bne.n	800731a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e038      	b.n	800738c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007340:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
      break;
 800735e:	e014      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6899      	ldr	r1, [r3, #8]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	461a      	mov	r2, r3
 800736e:	f000 f887 	bl	8007480 <TIM_TI1_ConfigInputStage>
      break;
 8007372:	e00a      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	461a      	mov	r2, r3
 8007382:	f000 f8e9 	bl	8007558 <TIM_TI2_ConfigInputStage>
      break;
 8007386:	e000      	b.n	800738a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007388:	bf00      	nop
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	fffefff8 	.word	0xfffefff8

08007398 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0201 	bic.w	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a28      	ldr	r2, [pc, #160]	; (8007464 <TIM_TI1_SetConfig+0xcc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01b      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073cc:	d017      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a25      	ldr	r2, [pc, #148]	; (8007468 <TIM_TI1_SetConfig+0xd0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4a24      	ldr	r2, [pc, #144]	; (800746c <TIM_TI1_SetConfig+0xd4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00f      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a23      	ldr	r2, [pc, #140]	; (8007470 <TIM_TI1_SetConfig+0xd8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00b      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a22      	ldr	r2, [pc, #136]	; (8007474 <TIM_TI1_SetConfig+0xdc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a21      	ldr	r2, [pc, #132]	; (8007478 <TIM_TI1_SetConfig+0xe0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_TI1_SetConfig+0x66>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a20      	ldr	r2, [pc, #128]	; (800747c <TIM_TI1_SetConfig+0xe4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <TIM_TI1_SetConfig+0x6a>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <TIM_TI1_SetConfig+0x6c>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e003      	b.n	8007422 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	b2db      	uxtb	r3, r3
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f023 030a 	bic.w	r3, r3, #10
 800743c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f003 030a 	and.w	r3, r3, #10
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010000 	.word	0x40010000
 8007468:	40000400 	.word	0x40000400
 800746c:	40000800 	.word	0x40000800
 8007470:	40000c00 	.word	0x40000c00
 8007474:	40010400 	.word	0x40010400
 8007478:	40014000 	.word	0x40014000
 800747c:	40001800 	.word	0x40001800

08007480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 030a 	bic.w	r3, r3, #10
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f023 0210 	bic.w	r2, r3, #16
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	b29b      	uxth	r3, r3
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	621a      	str	r2, [r3, #32]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f023 0210 	bic.w	r2, r3, #16
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	031b      	lsls	r3, r3, #12
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007594:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800766e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	031b      	lsls	r3, r3, #12
 8007674:	b29b      	uxth	r3, r3
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007682:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	031b      	lsls	r3, r3, #12
 8007688:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b087      	sub	sp, #28
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	021a      	lsls	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	609a      	str	r2, [r3, #8]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b087      	sub	sp, #28
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2201      	movs	r2, #1
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	43db      	mvns	r3, r3
 800770c:	401a      	ands	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	fa01 f303 	lsl.w	r3, r1, r3
 8007722:	431a      	orrs	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007748:	2302      	movs	r3, #2
 800774a:	e06d      	b.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a30      	ldr	r2, [pc, #192]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a20      	ldr	r2, [pc, #128]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d01d      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1d      	ldr	r2, [pc, #116]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a16      	ldr	r2, [pc, #88]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a15      	ldr	r2, [pc, #84]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10c      	bne.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	4313      	orrs	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	40010000 	.word	0x40010000
 8007838:	40010400 	.word	0x40010400
 800783c:	40000400 	.word	0x40000400
 8007840:	40000800 	.word	0x40000800
 8007844:	40000c00 	.word	0x40000c00
 8007848:	40014000 	.word	0x40014000
 800784c:	40001800 	.word	0x40001800

08007850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e040      	b.n	80078e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa ff10 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2224      	movs	r2, #36	; 0x24
 800787c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f82c 	bl	80078ec <UART_SetConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e022      	b.n	80078e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 faca 	bl	8007e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb51 	bl	8007f84 <UART_CheckIdleState>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4bb1      	ldr	r3, [pc, #708]	; (8007be0 <UART_SetConfig+0x2f4>)
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6812      	ldr	r2, [r2, #0]
 8007922:	6939      	ldr	r1, [r7, #16]
 8007924:	430b      	orrs	r3, r1
 8007926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a9f      	ldr	r2, [pc, #636]	; (8007be4 <UART_SetConfig+0x2f8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d121      	bne.n	80079b0 <UART_SetConfig+0xc4>
 800796c:	4b9e      	ldr	r3, [pc, #632]	; (8007be8 <UART_SetConfig+0x2fc>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d816      	bhi.n	80079a8 <UART_SetConfig+0xbc>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0x94>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007991 	.word	0x08007991
 8007984:	0800799d 	.word	0x0800799d
 8007988:	08007997 	.word	0x08007997
 800798c:	080079a3 	.word	0x080079a3
 8007990:	2301      	movs	r3, #1
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e151      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007996:	2302      	movs	r3, #2
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e14e      	b.n	8007c3a <UART_SetConfig+0x34e>
 800799c:	2304      	movs	r3, #4
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e14b      	b.n	8007c3a <UART_SetConfig+0x34e>
 80079a2:	2308      	movs	r3, #8
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e148      	b.n	8007c3a <UART_SetConfig+0x34e>
 80079a8:	2310      	movs	r3, #16
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	bf00      	nop
 80079ae:	e144      	b.n	8007c3a <UART_SetConfig+0x34e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a8d      	ldr	r2, [pc, #564]	; (8007bec <UART_SetConfig+0x300>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d134      	bne.n	8007a24 <UART_SetConfig+0x138>
 80079ba:	4b8b      	ldr	r3, [pc, #556]	; (8007be8 <UART_SetConfig+0x2fc>)
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	f003 030c 	and.w	r3, r3, #12
 80079c4:	2b0c      	cmp	r3, #12
 80079c6:	d829      	bhi.n	8007a1c <UART_SetConfig+0x130>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xe4>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a1d 	.word	0x08007a1d
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a1d 	.word	0x08007a1d
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a1d 	.word	0x08007a1d
 80079e8:	08007a1d 	.word	0x08007a1d
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a0b 	.word	0x08007a0b
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a1d 	.word	0x08007a1d
 8007a00:	08007a17 	.word	0x08007a17
 8007a04:	2300      	movs	r3, #0
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e117      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e114      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a10:	2304      	movs	r3, #4
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e111      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a16:	2308      	movs	r3, #8
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e10e      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	bf00      	nop
 8007a22:	e10a      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a71      	ldr	r2, [pc, #452]	; (8007bf0 <UART_SetConfig+0x304>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d120      	bne.n	8007a70 <UART_SetConfig+0x184>
 8007a2e:	4b6e      	ldr	r3, [pc, #440]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d00f      	beq.n	8007a5c <UART_SetConfig+0x170>
 8007a3c:	2b10      	cmp	r3, #16
 8007a3e:	d802      	bhi.n	8007a46 <UART_SetConfig+0x15a>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <UART_SetConfig+0x164>
 8007a44:	e010      	b.n	8007a68 <UART_SetConfig+0x17c>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d005      	beq.n	8007a56 <UART_SetConfig+0x16a>
 8007a4a:	2b30      	cmp	r3, #48	; 0x30
 8007a4c:	d009      	beq.n	8007a62 <UART_SetConfig+0x176>
 8007a4e:	e00b      	b.n	8007a68 <UART_SetConfig+0x17c>
 8007a50:	2300      	movs	r3, #0
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e0f1      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a56:	2302      	movs	r3, #2
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e0ee      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0eb      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a62:	2308      	movs	r3, #8
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e0e8      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	bf00      	nop
 8007a6e:	e0e4      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5f      	ldr	r2, [pc, #380]	; (8007bf4 <UART_SetConfig+0x308>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d120      	bne.n	8007abc <UART_SetConfig+0x1d0>
 8007a7a:	4b5b      	ldr	r3, [pc, #364]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d00f      	beq.n	8007aa8 <UART_SetConfig+0x1bc>
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d802      	bhi.n	8007a92 <UART_SetConfig+0x1a6>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <UART_SetConfig+0x1b0>
 8007a90:	e010      	b.n	8007ab4 <UART_SetConfig+0x1c8>
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d005      	beq.n	8007aa2 <UART_SetConfig+0x1b6>
 8007a96:	2bc0      	cmp	r3, #192	; 0xc0
 8007a98:	d009      	beq.n	8007aae <UART_SetConfig+0x1c2>
 8007a9a:	e00b      	b.n	8007ab4 <UART_SetConfig+0x1c8>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e0cb      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e0c8      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e0c5      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007aae:	2308      	movs	r3, #8
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e0c2      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	bf00      	nop
 8007aba:	e0be      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a4d      	ldr	r2, [pc, #308]	; (8007bf8 <UART_SetConfig+0x30c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d124      	bne.n	8007b10 <UART_SetConfig+0x224>
 8007ac6:	4b48      	ldr	r3, [pc, #288]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad4:	d012      	beq.n	8007afc <UART_SetConfig+0x210>
 8007ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ada:	d802      	bhi.n	8007ae2 <UART_SetConfig+0x1f6>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <UART_SetConfig+0x204>
 8007ae0:	e012      	b.n	8007b08 <UART_SetConfig+0x21c>
 8007ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae6:	d006      	beq.n	8007af6 <UART_SetConfig+0x20a>
 8007ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aec:	d009      	beq.n	8007b02 <UART_SetConfig+0x216>
 8007aee:	e00b      	b.n	8007b08 <UART_SetConfig+0x21c>
 8007af0:	2300      	movs	r3, #0
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e0a1      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007af6:	2302      	movs	r3, #2
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e09e      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007afc:	2304      	movs	r3, #4
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e09b      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b02:	2308      	movs	r3, #8
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e098      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	bf00      	nop
 8007b0e:	e094      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a39      	ldr	r2, [pc, #228]	; (8007bfc <UART_SetConfig+0x310>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d124      	bne.n	8007b64 <UART_SetConfig+0x278>
 8007b1a:	4b33      	ldr	r3, [pc, #204]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b28:	d012      	beq.n	8007b50 <UART_SetConfig+0x264>
 8007b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2e:	d802      	bhi.n	8007b36 <UART_SetConfig+0x24a>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <UART_SetConfig+0x258>
 8007b34:	e012      	b.n	8007b5c <UART_SetConfig+0x270>
 8007b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3a:	d006      	beq.n	8007b4a <UART_SetConfig+0x25e>
 8007b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b40:	d009      	beq.n	8007b56 <UART_SetConfig+0x26a>
 8007b42:	e00b      	b.n	8007b5c <UART_SetConfig+0x270>
 8007b44:	2301      	movs	r3, #1
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e077      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	77fb      	strb	r3, [r7, #31]
 8007b4e:	e074      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b50:	2304      	movs	r3, #4
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e071      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b56:	2308      	movs	r3, #8
 8007b58:	77fb      	strb	r3, [r7, #31]
 8007b5a:	e06e      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	bf00      	nop
 8007b62:	e06a      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <UART_SetConfig+0x314>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d124      	bne.n	8007bb8 <UART_SetConfig+0x2cc>
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d012      	beq.n	8007ba4 <UART_SetConfig+0x2b8>
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b82:	d802      	bhi.n	8007b8a <UART_SetConfig+0x29e>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <UART_SetConfig+0x2ac>
 8007b88:	e012      	b.n	8007bb0 <UART_SetConfig+0x2c4>
 8007b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8e:	d006      	beq.n	8007b9e <UART_SetConfig+0x2b2>
 8007b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b94:	d009      	beq.n	8007baa <UART_SetConfig+0x2be>
 8007b96:	e00b      	b.n	8007bb0 <UART_SetConfig+0x2c4>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e04d      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e04a      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e047      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007baa:	2308      	movs	r3, #8
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e044      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	bf00      	nop
 8007bb6:	e040      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a11      	ldr	r2, [pc, #68]	; (8007c04 <UART_SetConfig+0x318>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d139      	bne.n	8007c36 <UART_SetConfig+0x34a>
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <UART_SetConfig+0x2fc>)
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd0:	d027      	beq.n	8007c22 <UART_SetConfig+0x336>
 8007bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd6:	d817      	bhi.n	8007c08 <UART_SetConfig+0x31c>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01c      	beq.n	8007c16 <UART_SetConfig+0x32a>
 8007bdc:	e027      	b.n	8007c2e <UART_SetConfig+0x342>
 8007bde:	bf00      	nop
 8007be0:	efff69f3 	.word	0xefff69f3
 8007be4:	40011000 	.word	0x40011000
 8007be8:	40023800 	.word	0x40023800
 8007bec:	40004400 	.word	0x40004400
 8007bf0:	40004800 	.word	0x40004800
 8007bf4:	40004c00 	.word	0x40004c00
 8007bf8:	40005000 	.word	0x40005000
 8007bfc:	40011400 	.word	0x40011400
 8007c00:	40007800 	.word	0x40007800
 8007c04:	40007c00 	.word	0x40007c00
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c0c:	d006      	beq.n	8007c1c <UART_SetConfig+0x330>
 8007c0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c12:	d009      	beq.n	8007c28 <UART_SetConfig+0x33c>
 8007c14:	e00b      	b.n	8007c2e <UART_SetConfig+0x342>
 8007c16:	2300      	movs	r3, #0
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e00e      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e00b      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007c22:	2304      	movs	r3, #4
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	e008      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e005      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007c2e:	2310      	movs	r3, #16
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	bf00      	nop
 8007c34:	e001      	b.n	8007c3a <UART_SetConfig+0x34e>
 8007c36:	2310      	movs	r3, #16
 8007c38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c42:	d17f      	bne.n	8007d44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007c44:	7ffb      	ldrb	r3, [r7, #31]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d85c      	bhi.n	8007d04 <UART_SetConfig+0x418>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x364>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c95 	.word	0x08007c95
 8007c58:	08007cb5 	.word	0x08007cb5
 8007c5c:	08007d05 	.word	0x08007d05
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007d05 	.word	0x08007d05
 8007c68:	08007d05 	.word	0x08007d05
 8007c6c:	08007d05 	.word	0x08007d05
 8007c70:	08007ced 	.word	0x08007ced
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f878 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007c78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	005a      	lsls	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	441a      	add	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	61bb      	str	r3, [r7, #24]
        break;
 8007c92:	e03a      	b.n	8007d0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c94:	f7fe f87c 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 8007c98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	005a      	lsls	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	61bb      	str	r3, [r7, #24]
        break;
 8007cb2:	e02a      	b.n	8007d0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	085a      	lsrs	r2, r3, #1
 8007cba:	4b5f      	ldr	r3, [pc, #380]	; (8007e38 <UART_SetConfig+0x54c>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6852      	ldr	r2, [r2, #4]
 8007cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	61bb      	str	r3, [r7, #24]
        break;
 8007cca:	e01e      	b.n	8007d0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ccc:	f7fd ff68 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8007cd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	005a      	lsls	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	441a      	add	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	61bb      	str	r3, [r7, #24]
        break;
 8007cea:	e00e      	b.n	8007d0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	61bb      	str	r3, [r7, #24]
        break;
 8007d02:	e002      	b.n	8007d0a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
        break;
 8007d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d916      	bls.n	8007d3e <UART_SetConfig+0x452>
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d16:	d212      	bcs.n	8007d3e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f023 030f 	bic.w	r3, r3, #15
 8007d20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	897b      	ldrh	r3, [r7, #10]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	897a      	ldrh	r2, [r7, #10]
 8007d3a:	60da      	str	r2, [r3, #12]
 8007d3c:	e070      	b.n	8007e20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	75fb      	strb	r3, [r7, #23]
 8007d42:	e06d      	b.n	8007e20 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007d44:	7ffb      	ldrb	r3, [r7, #31]
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d859      	bhi.n	8007dfe <UART_SetConfig+0x512>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x464>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	08007d93 	.word	0x08007d93
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007dff 	.word	0x08007dff
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dff 	.word	0x08007dff
 8007d68:	08007dff 	.word	0x08007dff
 8007d6c:	08007dff 	.word	0x08007dff
 8007d70:	08007de7 	.word	0x08007de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d74:	f7fd fff8 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007d78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	085a      	lsrs	r2, r3, #1
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	441a      	add	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	61bb      	str	r3, [r7, #24]
        break;
 8007d90:	e038      	b.n	8007e04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d92:	f7fd fffd 	bl	8005d90 <HAL_RCC_GetPCLK2Freq>
 8007d96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	085a      	lsrs	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	441a      	add	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	61bb      	str	r3, [r7, #24]
        break;
 8007dae:	e029      	b.n	8007e04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	085a      	lsrs	r2, r3, #1
 8007db6:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <UART_SetConfig+0x550>)
 8007db8:	4413      	add	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6852      	ldr	r2, [r2, #4]
 8007dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	61bb      	str	r3, [r7, #24]
        break;
 8007dc6:	e01d      	b.n	8007e04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc8:	f7fd feea 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8007dcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	085a      	lsrs	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	441a      	add	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	61bb      	str	r3, [r7, #24]
        break;
 8007de4:	e00e      	b.n	8007e04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	61bb      	str	r3, [r7, #24]
        break;
 8007dfc:	e002      	b.n	8007e04 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	75fb      	strb	r3, [r7, #23]
        break;
 8007e02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d908      	bls.n	8007e1c <UART_SetConfig+0x530>
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e10:	d204      	bcs.n	8007e1c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	e001      	b.n	8007e20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	01e84800 	.word	0x01e84800
 8007e3c:	00f42400 	.word	0x00f42400

08007e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3e:	d10a      	bne.n	8007f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f92:	f7fa fcf5 	bl	8002980 <HAL_GetTick>
 8007f96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d10e      	bne.n	8007fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f814 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e00a      	b.n	8007fda <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	e05d      	b.n	80080b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d059      	beq.n	80080b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffc:	f7fa fcc0 	bl	8002980 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <UART_WaitOnFlagUntilTimeout+0x30>
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d11b      	bne.n	800804a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008020:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e042      	b.n	80080d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d02b      	beq.n	80080b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008066:	d123      	bne.n	80080b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008070:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008080:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0201 	bic.w	r2, r2, #1
 8008090:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2220      	movs	r2, #32
 80080a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e00f      	b.n	80080d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69da      	ldr	r2, [r3, #28]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4013      	ands	r3, r2
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d092      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <__errno>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <__errno+0x8>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000010 	.word	0x20000010

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4e0d      	ldr	r6, [pc, #52]	; (800811c <__libc_init_array+0x38>)
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <__libc_init_array+0x3c>)
 80080ea:	1ba4      	subs	r4, r4, r6
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	2500      	movs	r5, #0
 80080f0:	42a5      	cmp	r5, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	4e0b      	ldr	r6, [pc, #44]	; (8008124 <__libc_init_array+0x40>)
 80080f6:	4c0c      	ldr	r4, [pc, #48]	; (8008128 <__libc_init_array+0x44>)
 80080f8:	f000 f8a0 	bl	800823c <_init>
 80080fc:	1ba4      	subs	r4, r4, r6
 80080fe:	10a4      	asrs	r4, r4, #2
 8008100:	2500      	movs	r5, #0
 8008102:	42a5      	cmp	r5, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800810c:	4798      	blx	r3
 800810e:	3501      	adds	r5, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008116:	4798      	blx	r3
 8008118:	3501      	adds	r5, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	0800827c 	.word	0x0800827c
 8008120:	0800827c 	.word	0x0800827c
 8008124:	0800827c 	.word	0x0800827c
 8008128:	08008280 	.word	0x08008280

0800812c <malloc>:
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <malloc+0xc>)
 800812e:	4601      	mov	r1, r0
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	f000 b817 	b.w	8008164 <_malloc_r>
 8008136:	bf00      	nop
 8008138:	20000010 	.word	0x20000010

0800813c <memcpy>:
 800813c:	b510      	push	{r4, lr}
 800813e:	1e43      	subs	r3, r0, #1
 8008140:	440a      	add	r2, r1
 8008142:	4291      	cmp	r1, r2
 8008144:	d100      	bne.n	8008148 <memcpy+0xc>
 8008146:	bd10      	pop	{r4, pc}
 8008148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800814c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008150:	e7f7      	b.n	8008142 <memcpy+0x6>

08008152 <memset>:
 8008152:	4402      	add	r2, r0
 8008154:	4603      	mov	r3, r0
 8008156:	4293      	cmp	r3, r2
 8008158:	d100      	bne.n	800815c <memset+0xa>
 800815a:	4770      	bx	lr
 800815c:	f803 1b01 	strb.w	r1, [r3], #1
 8008160:	e7f9      	b.n	8008156 <memset+0x4>
	...

08008164 <_malloc_r>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	1ccd      	adds	r5, r1, #3
 8008168:	f025 0503 	bic.w	r5, r5, #3
 800816c:	3508      	adds	r5, #8
 800816e:	2d0c      	cmp	r5, #12
 8008170:	bf38      	it	cc
 8008172:	250c      	movcc	r5, #12
 8008174:	2d00      	cmp	r5, #0
 8008176:	4606      	mov	r6, r0
 8008178:	db01      	blt.n	800817e <_malloc_r+0x1a>
 800817a:	42a9      	cmp	r1, r5
 800817c:	d903      	bls.n	8008186 <_malloc_r+0x22>
 800817e:	230c      	movs	r3, #12
 8008180:	6033      	str	r3, [r6, #0]
 8008182:	2000      	movs	r0, #0
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	f000 f857 	bl	8008238 <__malloc_lock>
 800818a:	4a21      	ldr	r2, [pc, #132]	; (8008210 <_malloc_r+0xac>)
 800818c:	6814      	ldr	r4, [r2, #0]
 800818e:	4621      	mov	r1, r4
 8008190:	b991      	cbnz	r1, 80081b8 <_malloc_r+0x54>
 8008192:	4c20      	ldr	r4, [pc, #128]	; (8008214 <_malloc_r+0xb0>)
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	b91b      	cbnz	r3, 80081a0 <_malloc_r+0x3c>
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f83d 	bl	8008218 <_sbrk_r>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	4629      	mov	r1, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 f838 	bl	8008218 <_sbrk_r>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d124      	bne.n	80081f6 <_malloc_r+0x92>
 80081ac:	230c      	movs	r3, #12
 80081ae:	6033      	str	r3, [r6, #0]
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f842 	bl	800823a <__malloc_unlock>
 80081b6:	e7e4      	b.n	8008182 <_malloc_r+0x1e>
 80081b8:	680b      	ldr	r3, [r1, #0]
 80081ba:	1b5b      	subs	r3, r3, r5
 80081bc:	d418      	bmi.n	80081f0 <_malloc_r+0x8c>
 80081be:	2b0b      	cmp	r3, #11
 80081c0:	d90f      	bls.n	80081e2 <_malloc_r+0x7e>
 80081c2:	600b      	str	r3, [r1, #0]
 80081c4:	50cd      	str	r5, [r1, r3]
 80081c6:	18cc      	adds	r4, r1, r3
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 f836 	bl	800823a <__malloc_unlock>
 80081ce:	f104 000b 	add.w	r0, r4, #11
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	f020 0007 	bic.w	r0, r0, #7
 80081d8:	1ac3      	subs	r3, r0, r3
 80081da:	d0d3      	beq.n	8008184 <_malloc_r+0x20>
 80081dc:	425a      	negs	r2, r3
 80081de:	50e2      	str	r2, [r4, r3]
 80081e0:	e7d0      	b.n	8008184 <_malloc_r+0x20>
 80081e2:	428c      	cmp	r4, r1
 80081e4:	684b      	ldr	r3, [r1, #4]
 80081e6:	bf16      	itet	ne
 80081e8:	6063      	strne	r3, [r4, #4]
 80081ea:	6013      	streq	r3, [r2, #0]
 80081ec:	460c      	movne	r4, r1
 80081ee:	e7eb      	b.n	80081c8 <_malloc_r+0x64>
 80081f0:	460c      	mov	r4, r1
 80081f2:	6849      	ldr	r1, [r1, #4]
 80081f4:	e7cc      	b.n	8008190 <_malloc_r+0x2c>
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	f024 0403 	bic.w	r4, r4, #3
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d005      	beq.n	800820c <_malloc_r+0xa8>
 8008200:	1a21      	subs	r1, r4, r0
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f808 	bl	8008218 <_sbrk_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d0cf      	beq.n	80081ac <_malloc_r+0x48>
 800820c:	6025      	str	r5, [r4, #0]
 800820e:	e7db      	b.n	80081c8 <_malloc_r+0x64>
 8008210:	20000098 	.word	0x20000098
 8008214:	2000009c 	.word	0x2000009c

08008218 <_sbrk_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4c06      	ldr	r4, [pc, #24]	; (8008234 <_sbrk_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4605      	mov	r5, r0
 8008220:	4608      	mov	r0, r1
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	f7fa fae6 	bl	80027f4 <_sbrk>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_sbrk_r+0x1a>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	b103      	cbz	r3, 8008232 <_sbrk_r+0x1a>
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20000748 	.word	0x20000748

08008238 <__malloc_lock>:
 8008238:	4770      	bx	lr

0800823a <__malloc_unlock>:
 800823a:	4770      	bx	lr

0800823c <_init>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	bf00      	nop
 8008240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008242:	bc08      	pop	{r3}
 8008244:	469e      	mov	lr, r3
 8008246:	4770      	bx	lr

08008248 <_fini>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr
