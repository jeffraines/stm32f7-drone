
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f4  080056f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000074  08005770  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005770  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aa6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1d  00000000  00000000  00033b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002430c  00000000  00000000  00038940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee49  00000000  00000000  0005cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e15f5  00000000  00000000  0006ba95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d08a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0014d108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	080056b4 	.word	0x080056b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	080056b4 	.word	0x080056b4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 800052a:	2204      	movs	r2, #4
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 f824 	bl	800157c <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 ff61 	bl	80013fc <HAL_ADC_Start>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <ESC_INIT_CONTROLLER>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_MAKE_BYTE(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT_CONTROLLER(TIM_HandleTypeDef* timer, DMA_HandleTypeDef* dma)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(sizeof(ESC_CONTROLLER) * ESC_COUNT);
 800054c:	2010      	movs	r0, #16
 800054e:	f005 f835 	bl	80055bc <malloc>
 8000552:	4603      	mov	r3, r0
 8000554:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < ESC_COUNT; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e060      	b.n	800061e <ESC_INIT_CONTROLLER+0xdc>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	461a      	mov	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	4413      	add	r3, r2
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	0099      	lsls	r1, r3, #2
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	461a      	mov	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	460a      	mov	r2, r1
 8000586:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	461a      	mov	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4413      	add	r3, r2
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = timer;
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	461a      	mov	r2, r3
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4413      	add	r3, r2
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = dma;
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	461a      	mov	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4413      	add	r3, r2
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	611a      	str	r2, [r3, #16]
		ESC_CONTROLLER[i].CCR = (uint32_t) &(timer->Instance->CCR1) + (4*i);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3334      	adds	r3, #52	; 0x34
 80005ca:	4618      	mov	r0, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4619      	mov	r1, r3
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	461a      	mov	r2, r3
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	1842      	adds	r2, r0, r1
 80005e4:	615a      	str	r2, [r3, #20]
		*((uint32_t *) ESC_CONTROLLER[i].CCR) = 0;
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	461a      	mov	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4413      	add	r3, r2
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2300      	movs	r3, #0
 80005fc:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start(timer, ESC_CONTROLLER[i].Channel);
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	461a      	mov	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	4413      	add	r3, r2
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f003 fba0 	bl	8003d58 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b03      	cmp	r3, #3
 8000622:	dd9b      	ble.n	800055c <ESC_INIT_CONTROLLER+0x1a>
	}
	return ESC_CONTROLLER;
 8000624:	68bb      	ldr	r3, [r7, #8]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b098      	sub	sp, #96	; 0x60
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle > 2048) throttle = 2047;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000640:	d902      	bls.n	8000648 <ESC_UPDATE_THROTTLE+0x18>
 8000642:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000646:	603b      	str	r3, [r7, #0]
	// Updating only throttle value, so telemetry is 0
	uint8_t telemetry =0b0;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	// Updating only throttle value, so checksum is 0
	uint8_t checksum = 0b0000;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[17] = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2244      	movs	r2, #68	; 0x44
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f004 ffb5 	bl	80055cc <memset>
	//uint32_t dshotPacketTest[17] = {0xAA,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
	dshotPacket[16] = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
	// Populate checksum bits
	for (int checksumBits = 0; checksumBits <= 3; checksumBits++)
 8000666:	2300      	movs	r3, #0
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
 800066a:	e019      	b.n	80006a0 <ESC_UPDATE_THROTTLE+0x70>
	{
		__DSHOT_MAKE_BYTE(dshotPacket[checksumBits], checksum);
 800066c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <ESC_UPDATE_THROTTLE+0x4e>
 8000678:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800067c:	e001      	b.n	8000682 <ESC_UPDATE_THROTTLE+0x52>
 800067e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800068a:	440b      	add	r3, r1
 800068c:	f843 2c54 	str.w	r2, [r3, #-84]
		checksum = checksum >> 1;
 8000690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000694:	085b      	lsrs	r3, r3, #1
 8000696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	for (int checksumBits = 0; checksumBits <= 3; checksumBits++)
 800069a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800069c:	3301      	adds	r3, #1
 800069e:	65bb      	str	r3, [r7, #88]	; 0x58
 80006a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	dde2      	ble.n	800066c <ESC_UPDATE_THROTTLE+0x3c>
	}
	// Populate telemetry bit
	__DSHOT_MAKE_BYTE(dshotPacket[4], telemetry);
 80006a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <ESC_UPDATE_THROTTLE+0x88>
 80006b2:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80006b6:	e001      	b.n	80006bc <ESC_UPDATE_THROTTLE+0x8c>
 80006b8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80006bc:	61fb      	str	r3, [r7, #28]
	// Populate throttle bits
	for (int throttleBits = 5; throttleBits <= 15; throttleBits++)
 80006be:	2305      	movs	r3, #5
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
 80006c2:	e016      	b.n	80006f2 <ESC_UPDATE_THROTTLE+0xc2>
	{
		__DSHOT_MAKE_BYTE(dshotPacket[throttleBits], throttle);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <ESC_UPDATE_THROTTLE+0xa4>
 80006ce:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80006d2:	e001      	b.n	80006d8 <ESC_UPDATE_THROTTLE+0xa8>
 80006d4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80006d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006e0:	440b      	add	r3, r1
 80006e2:	f843 2c54 	str.w	r2, [r3, #-84]
		throttle = throttle >> 1;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
	for (int throttleBits = 5; throttleBits <= 15; throttleBits++)
 80006ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006ee:	3301      	adds	r3, #1
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
 80006f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	dde5      	ble.n	80006c4 <ESC_UPDATE_THROTTLE+0x94>
	}
	// Setup the DMA stream to send the dshotPacket bytes to the CCR
	// Clear transfer and half transfer complete flags
	ESC->DMA->Lock = HAL_UNLOCKED;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	ESC->DMA->State = HAL_DMA_STATE_READY;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <ESC_UPDATE_THROTTLE+0x140>)
 8000716:	429a      	cmp	r2, r3
 8000718:	d903      	bls.n	8000722 <ESC_UPDATE_THROTTLE+0xf2>
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <ESC_UPDATE_THROTTLE+0x144>)
 800071c:	2230      	movs	r2, #48	; 0x30
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	e018      	b.n	8000754 <ESC_UPDATE_THROTTLE+0x124>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <ESC_UPDATE_THROTTLE+0x148>)
 800072c:	429a      	cmp	r2, r3
 800072e:	d903      	bls.n	8000738 <ESC_UPDATE_THROTTLE+0x108>
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <ESC_UPDATE_THROTTLE+0x144>)
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	e00d      	b.n	8000754 <ESC_UPDATE_THROTTLE+0x124>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <ESC_UPDATE_THROTTLE+0x14c>)
 8000742:	429a      	cmp	r2, r3
 8000744:	d903      	bls.n	800074e <ESC_UPDATE_THROTTLE+0x11e>
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <ESC_UPDATE_THROTTLE+0x150>)
 8000748:	2230      	movs	r2, #48	; 0x30
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	e002      	b.n	8000754 <ESC_UPDATE_THROTTLE+0x124>
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <ESC_UPDATE_THROTTLE+0x150>)
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	609a      	str	r2, [r3, #8]
	HAL_DMA_Start(ESC->DMA, (uint32_t) &dshotPacket, ESC->CCR, 17);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6918      	ldr	r0, [r3, #16]
 8000758:	f107 010c 	add.w	r1, r7, #12
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2311      	movs	r3, #17
 8000762:	f001 fc89 	bl	8002078 <HAL_DMA_Start>
}
 8000766:	bf00      	nop
 8000768:	3760      	adds	r7, #96	; 0x60
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40026458 	.word	0x40026458
 8000774:	40026400 	.word	0x40026400
 8000778:	400260b8 	.word	0x400260b8
 800077c:	40026058 	.word	0x40026058
 8000780:	40026000 	.word	0x40026000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fd74 	bl	8001276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f829 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa69 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000796:	f000 fa0b 	bl	8000bb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f9ab 	bl	8000af4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f9d9 	bl	8000b54 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80007a2:	f000 f907 	bl	80009b4 <MX_TIM4_Init>
  MX_ADC1_Init();
 80007a6:	f000 f8b3 	bl	8000910 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 80007aa:	4909      	ldr	r1, [pc, #36]	; (80007d0 <main+0x4c>)
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <main+0x50>)
 80007ae:	f7ff feb7 	bl	8000520 <ADC_INIT>
  ESC_CONTROLLER* myESCSet = ESC_INIT_CONTROLLER(&htim4, &hdma_memtomem_dma2_stream0);
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <main+0x54>)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x58>)
 80007b6:	f7ff fec4 	bl	8000542 <ESC_INIT_CONTROLLER>
 80007ba:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ESC_UPDATE_THROTTLE(myESCSet, throttle);
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <main+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff34 	bl	8000630 <ESC_UPDATE_THROTTLE>
	  HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f000 fdb1 	bl	8001330 <HAL_Delay>
	  ESC_UPDATE_THROTTLE(myESCSet, throttle);
 80007ce:	e7f5      	b.n	80007bc <main+0x38>
 80007d0:	20000668 	.word	0x20000668
 80007d4:	200005c0 	.word	0x200005c0
 80007d8:	2000009c 	.word	0x2000009c
 80007dc:	200000fc 	.word	0x200000fc
 80007e0:	20000000 	.word	0x20000000

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0b4      	sub	sp, #208	; 0xd0
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 feea 	bl	80055cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fedb 	bl	80055cc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000816:	f002 fa2f 	bl	8002c78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <SystemClock_Config+0x120>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a39      	ldr	r2, [pc, #228]	; (8000904 <SystemClock_Config+0x120>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <SystemClock_Config+0x120>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <SystemClock_Config+0x124>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <SystemClock_Config+0x124>)
 8000838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <SystemClock_Config+0x124>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000866:	2308      	movs	r3, #8
 8000868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 800086c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800087a:	2309      	movs	r3, #9
 800087c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fa57 	bl	8002d38 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000890:	f000 faa2 	bl	8000dd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000894:	f002 fa00 	bl	8002c98 <HAL_PWREx_EnableOverDrive>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089e:	f000 fa9b 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008c8:	2107      	movs	r1, #7
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fcd8 	bl	8003280 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008d6:	f000 fa7f 	bl	8000dd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <SystemClock_Config+0x128>)
 80008dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008de:	2300      	movs	r3, #0
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 febf 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x118>
  {
    Error_Handler();
 80008f8:	f000 fa6e 	bl	8000dd8 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	37d0      	adds	r7, #208	; 0xd0
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000
 800090c:	00200100 	.word	0x00200100

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <MX_ADC1_Init+0x9c>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_ADC1_Init+0x98>)
 800092a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800092e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <MX_ADC1_Init+0xa0>)
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_ADC1_Init+0x98>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_ADC1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000972:	f000 fcff 	bl	8001374 <HAL_ADC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800097c:	f000 fa2c 	bl	8000dd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000980:	2309      	movs	r3, #9
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_ADC1_Init+0x98>)
 8000992:	f000 feeb 	bl	800176c <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800099c:	f000 fa1c 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200005c0 	.word	0x200005c0
 80009ac:	40012000 	.word	0x40012000
 80009b0:	0f000001 	.word	0x0f000001

080009b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d8:	4b44      	ldr	r3, [pc, #272]	; (8000aec <MX_TIM4_Init+0x138>)
 80009da:	4a45      	ldr	r2, [pc, #276]	; (8000af0 <MX_TIM4_Init+0x13c>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009de:	4b43      	ldr	r3, [pc, #268]	; (8000aec <MX_TIM4_Init+0x138>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b41      	ldr	r3, [pc, #260]	; (8000aec <MX_TIM4_Init+0x138>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <MX_TIM4_Init+0x138>)
 80009ec:	f240 22cf 	movw	r2, #719	; 0x2cf
 80009f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <MX_TIM4_Init+0x138>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_TIM4_Init+0x138>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009fe:	483b      	ldr	r0, [pc, #236]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a00:	f003 f97e 	bl	8003d00 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 f9e5 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a1e:	f003 fe1b 	bl	8004658 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a28:	f000 f9d6 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	; 0x60
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	482a      	ldr	r0, [pc, #168]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a44:	f003 f9cc 	bl	8003de0 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 f9c3 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	2204      	movs	r2, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4824      	ldr	r0, [pc, #144]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a5a:	f003 f9c1 	bl	8003de0 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a64:	f000 f9b8 	bl	8000dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	699a      	ldr	r2, [r3, #24]
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481b      	ldr	r0, [pc, #108]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a80:	f003 f9ae 	bl	8003de0 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a8a:	f000 f9a5 	bl	8000dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_3);
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_TIM4_Init+0x138>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0208 	bic.w	r2, r2, #8
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_TIM4_Init+0x138>)
 8000aa6:	f003 f99b 	bl	8003de0 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000ab0:	f000 f992 	bl	8000dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_TIM4_Init+0x138>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	69da      	ldr	r2, [r3, #28]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_TIM4_Init+0x138>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ac2:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */
  htim4.Instance->CR2 = TIM_CR2_CCDS;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_TIM4_Init+0x138>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	605a      	str	r2, [r3, #4]
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_0 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; //CCR1
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_TIM4_Init+0x138>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	220d      	movs	r2, #13
 8000ad2:	649a      	str	r2, [r3, #72]	; 0x48
  //htim4.Instance->DCR =  TIM_DCR_DBA_4; //CCR4
  // Enable Update DMA Request
//  htim4.Instance->DIER = TIM_DIER_UDE;
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <MX_TIM4_Init+0x138>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM4_Init+0x138>)
 8000ae0:	f000 fa3a 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	40000800 	.word	0x40000800

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART3_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b38:	f003 fe1c 	bl	8004774 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f949 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000013c 	.word	0x2000013c
 8000b50:	40004800 	.word	0x40004800

08000b54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b62:	2206      	movs	r2, #6
 8000b64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	f001 ff25 	bl	80029e6 <HAL_PCD_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f919 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001bc 	.word	0x200001bc

08000bb0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_DMA_Init+0xac>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <MX_DMA_Init+0xac>)
 8000bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_DMA_Init+0xac>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <MX_DMA_Init+0xb4>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c0a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c24:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_DMA_Init+0xb0>)
 8000c26:	f001 f979 	bl	8001f1c <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8000c30:	f000 f8d2 	bl	8000dd8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2038      	movs	r0, #56	; 0x38
 8000c3a:	f001 f938 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c3e:	2038      	movs	r0, #56	; 0x38
 8000c40:	f001 f951 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	203c      	movs	r0, #60	; 0x3c
 8000c4a:	f001 f930 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c4e:	203c      	movs	r0, #60	; 0x3c
 8000c50:	f001 f949 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	2000009c 	.word	0x2000009c
 8000c64:	40026410 	.word	0x40026410

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a3f      	ldr	r2, [pc, #252]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a39      	ldr	r2, [pc, #228]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a33      	ldr	r2, [pc, #204]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <MX_GPIO_Init+0x130>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d14:	4821      	ldr	r0, [pc, #132]	; (8000d9c <MX_GPIO_Init+0x134>)
 8000d16:	f001 fe4d 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <MX_GPIO_Init+0x138>)
 8000d20:	f001 fe48 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_GPIO_Init+0x13c>)
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <MX_GPIO_Init+0x140>)
 8000d3a:	f001 fca1 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d3e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_GPIO_Init+0x134>)
 8000d58:	f001 fc92 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0x138>)
 8000d74:	f001 fc84 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_GPIO_Init+0x138>)
 8000d8c:	f001 fc78 	bl	8002680 <HAL_GPIO_Init>

}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40021800 	.word	0x40021800
 8000da4:	10110000 	.word	0x10110000
 8000da8:	40020800 	.word	0x40020800

08000dac <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	__NOP();
 8000db4:	bf00      	nop
    }
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
    __NOP();
 8000dca:	bf00      	nop
    }
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <HAL_ADC_MspInit+0xd4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d154      	bne.n	8000efc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_Throttle_Control_Pin;
 8000e82:	2302      	movs	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Throttle_Control_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	; (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000e96:	f001 fbf3 	bl	8002680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_ADC_MspInit+0xe4>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ec4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ee2:	f001 f81b 	bl	8001f1c <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000eec:	f7ff ff74 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	20000608 	.word	0x20000608
 8000f14:	40026470 	.word	0x40026470

08000f18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_TIM_PWM_MspInit+0x38>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40000800 	.word	0x40000800
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_TIM_MspPostInit+0x64>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11c      	bne.n	8000fb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f92:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000fb0:	f001 fb66 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40000800 	.word	0x40000800
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020c00 	.word	0x40020c00

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_UART_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d128      	bne.n	800103c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800101a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102c:	2307      	movs	r3, #7
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_UART_MspInit+0x84>)
 8001038:	f001 fb22 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40004800 	.word	0x40004800
 8001048:	40023800 	.word	0x40023800
 800104c:	40020c00 	.word	0x40020c00

08001050 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001070:	d141      	bne.n	80010f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800108a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800109c:	230a      	movs	r3, #10
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <HAL_PCD_MspInit+0xb4>)
 80010a8:	f001 faea 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <HAL_PCD_MspInit+0xb4>)
 80010c2:	f001 fadd 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6353      	str	r3, [r2, #52]	; 0x34
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f8c8 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA2_Stream0_IRQHandler+0x10>)
 800116a:	f001 f821 	bl	80021b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000009c 	.word	0x2000009c

08001178 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <DMA2_Stream4_IRQHandler+0x10>)
 800117e:	f001 f817 	bl	80021b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000608 	.word	0x20000608

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f004 f9d4 	bl	8005568 <__errno>
 80011c0:	4602      	mov	r2, r0
 80011c2:	230c      	movs	r3, #12
 80011c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20040000 	.word	0x20040000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000090 	.word	0x20000090
 80011f4:	20000678 	.word	0x20000678

080011f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <SystemInit+0x28>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <SystemInit+0x28>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SystemInit+0x28>)
 800120e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001212:	609a      	str	r2, [r3, #8]
#endif
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800122a:	e003      	b.n	8001234 <LoopCopyDataInit>

0800122c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800122e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001232:	3104      	adds	r1, #4

08001234 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800123c:	d3f6      	bcc.n	800122c <CopyDataInit>
  ldr  r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001240:	e002      	b.n	8001248 <LoopFillZerobss>

08001242 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001242:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001244:	f842 3b04 	str.w	r3, [r2], #4

08001248 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800124c:	d3f9      	bcc.n	8001242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd3 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f004 f98f 	bl	8005574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff fa95 	bl	8000784 <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001260:	080056fc 	.word	0x080056fc
  ldr  r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001268:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800126c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001270:	20000674 	.word	0x20000674

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>

08001276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 fe0c 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f805 	bl	8001290 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fdaf 	bl	8000de8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fe27 	bl	8001f02 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 fdef 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000004 	.word	0x20000004
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000008 	.word	0x20000008

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000000c 	.word	0x2000000c
 8001314:	2000066c 	.word	0x2000066c

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000066c 	.word	0x2000066c

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_Delay+0x40>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000000c 	.word	0x2000000c

08001374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e031      	b.n	80013ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fd4c 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d116      	bne.n	80013e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_ADC_Init+0x84>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fb1c 	bl	8001a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
 80013de:	e001      	b.n	80013e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	ffffeefd 	.word	0xffffeefd

080013fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Start+0x1a>
 8001412:	2302      	movs	r3, #2
 8001414:	e0a0      	b.n	8001558 <HAL_ADC_Start+0x15c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d018      	beq.n	800145e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_ADC_Start+0x168>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a49      	ldr	r2, [pc, #292]	; (8001568 <HAL_ADC_Start+0x16c>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9a      	lsrs	r2, r3, #18
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001450:	e002      	b.n	8001458 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3b01      	subs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f9      	bne.n	8001452 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d174      	bne.n	8001556 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_ADC_Start+0x170>)
 8001472:	4013      	ands	r3, r2
 8001474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f023 0206 	bic.w	r2, r3, #6
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
 80014b4:	e002      	b.n	80014bc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_ADC_Start+0x174>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d136      	bne.n	8001556 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	e02d      	b.n	8001556 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_ADC_Start+0x178>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d10e      	bne.n	8001522 <HAL_ADC_Start+0x126>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001520:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_ADC_Start+0x174>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d113      	bne.n	8001556 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_ADC_Start+0x17c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d10e      	bne.n	8001556 <HAL_ADC_Start+0x15a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001554:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20000004 	.word	0x20000004
 8001568:	431bde83 	.word	0x431bde83
 800156c:	fffff8fe 	.word	0xfffff8fe
 8001570:	40012300 	.word	0x40012300
 8001574:	40012000 	.word	0x40012000
 8001578:	40012200 	.word	0x40012200

0800157c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_ADC_Start_DMA+0x1e>
 8001596:	2302      	movs	r3, #2
 8001598:	e0c7      	b.n	800172a <HAL_ADC_Start_DMA+0x1ae>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d018      	beq.n	80015e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015c0:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_ADC_Start_DMA+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a5c      	ldr	r2, [pc, #368]	; (8001738 <HAL_ADC_Start_DMA+0x1bc>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9a      	lsrs	r2, r3, #18
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3b01      	subs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f040 809b 	bne.w	8001728 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <HAL_ADC_Start_DMA+0x1c0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001618:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800162c:	d106      	bne.n	800163c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f023 0206 	bic.w	r2, r3, #6
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
 800163a:	e002      	b.n	8001642 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <HAL_ADC_Start_DMA+0x1c4>)
 8001650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <HAL_ADC_Start_DMA+0x1c8>)
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a3a      	ldr	r2, [pc, #232]	; (8001748 <HAL_ADC_Start_DMA+0x1cc>)
 8001660:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800166a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800167a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	334c      	adds	r3, #76	; 0x4c
 8001696:	4619      	mov	r1, r3
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f000 fd27 	bl	80020ee <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_ADC_Start_DMA+0x1d0>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10f      	bne.n	80016cc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d136      	bne.n	8001728 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	e02d      	b.n	8001728 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_ADC_Start_DMA+0x1d4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10e      	bne.n	80016f4 <HAL_ADC_Start_DMA+0x178>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_ADC_Start_DMA+0x1d0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_ADC_Start_DMA+0x1d8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10e      	bne.n	8001728 <HAL_ADC_Start_DMA+0x1ac>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001726:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000004 	.word	0x20000004
 8001738:	431bde83 	.word	0x431bde83
 800173c:	fffff8fe 	.word	0xfffff8fe
 8001740:	08001bf5 	.word	0x08001bf5
 8001744:	08001caf 	.word	0x08001caf
 8001748:	08001ccb 	.word	0x08001ccb
 800174c:	40012300 	.word	0x40012300
 8001750:	40012000 	.word	0x40012000
 8001754:	40012200 	.word	0x40012200

08001758 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1c>
 8001784:	2302      	movs	r3, #2
 8001786:	e12a      	b.n	80019de <HAL_ADC_ConfigChannel+0x272>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d93a      	bls.n	800180e <HAL_ADC_ConfigChannel+0xa2>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017a0:	d035      	beq.n	800180e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	3b1e      	subs	r3, #30
 80017b8:	2207      	movs	r2, #7
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	400a      	ands	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a87      	ldr	r2, [pc, #540]	; (80019ec <HAL_ADC_ConfigChannel+0x280>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10a      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68d9      	ldr	r1, [r3, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	061a      	lsls	r2, r3, #24
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e6:	e035      	b.n	8001854 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68d9      	ldr	r1, [r3, #12]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4403      	add	r3, r0
 8001800:	3b1e      	subs	r3, #30
 8001802:	409a      	lsls	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180c:	e022      	b.n	8001854 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	409a      	lsls	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b06      	cmp	r3, #6
 800185a:	d824      	bhi.n	80018a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b05      	subs	r3, #5
 800186e:	221f      	movs	r2, #31
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43da      	mvns	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	400a      	ands	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b05      	subs	r3, #5
 8001898:	fa00 f203 	lsl.w	r2, r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
 80018a4:	e04c      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d824      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b23      	subs	r3, #35	; 0x23
 80018c0:	221f      	movs	r2, #31
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b23      	subs	r3, #35	; 0x23
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
 80018f6:	e023      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b41      	subs	r3, #65	; 0x41
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <HAL_ADC_ConfigChannel+0x284>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10a      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1f4>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 800195a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800195e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_ADC_ConfigChannel+0x284>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d109      	bne.n	800197e <HAL_ADC_ConfigChannel+0x212>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d105      	bne.n	800197e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 8001978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800197c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_ADC_ConfigChannel+0x284>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d125      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x268>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_ADC_ConfigChannel+0x280>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_ADC_ConfigChannel+0x22e>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b11      	cmp	r3, #17
 8001998:	d11c      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_ADC_ConfigChannel+0x288>)
 80019a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_ADC_ConfigChannel+0x280>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_ADC_ConfigChannel+0x28c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_ADC_ConfigChannel+0x290>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9a      	lsrs	r2, r3, #18
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019c6:	e002      	b.n	80019ce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	10000012 	.word	0x10000012
 80019f0:	40012000 	.word	0x40012000
 80019f4:	40012300 	.word	0x40012300
 80019f8:	20000004 	.word	0x20000004
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <ADC_Init+0x1ec>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a77      	ldr	r2, [pc, #476]	; (8001bec <ADC_Init+0x1ec>)
 8001a0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a14:	4b75      	ldr	r3, [pc, #468]	; (8001bec <ADC_Init+0x1ec>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4973      	ldr	r1, [pc, #460]	; (8001bec <ADC_Init+0x1ec>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	021a      	lsls	r2, r3, #8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6899      	ldr	r1, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <ADC_Init+0x1f0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d022      	beq.n	8001ada <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6899      	ldr	r1, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e00f      	b.n	8001afa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0202 	bic.w	r2, r2, #2
 8001b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	005a      	lsls	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	035a      	lsls	r2, r3, #13
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e007      	b.n	8001b70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	051a      	lsls	r2, r3, #20
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb2:	025a      	lsls	r2, r3, #9
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	029a      	lsls	r2, r3, #10
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	0f000001 	.word	0x0f000001

08001bf4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d13c      	bne.n	8001c88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12b      	bne.n	8001c80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d127      	bne.n	8001c80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d119      	bne.n	8001c80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0220 	bic.w	r2, r2, #32
 8001c5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff f89e 	bl	8000dc2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c86:	e00e      	b.n	8001ca6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fd5f 	bl	8001758 <HAL_ADC_ErrorCallback>
}
 8001c9a:	e004      	b.n	8001ca6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff f875 	bl	8000dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0204 	orr.w	r2, r3, #4
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7ff fd34 	bl	8001758 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <__NVIC_SetPriorityGrouping+0x40>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x40>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	05fa0000 	.word	0x05fa0000

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff3e 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff8e 	bl	8001dec <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5d 	bl	8001d98 <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff31 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff f9f6 	bl	8001318 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e099      	b.n	800206c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f58:	e00f      	b.n	8001f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5a:	f7ff f9dd 	bl	8001318 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d908      	bls.n	8001f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e078      	b.n	800206c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e8      	bne.n	8001f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_DMA_Init+0x158>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2b04      	cmp	r3, #4
 800200c:	d117      	bne.n	800203e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fab3 	bl	800258c <DMA_CheckFifoParam>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800203a:	2301      	movs	r3, #1
 800203c:	e016      	b.n	800206c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa6a 	bl	8002520 <DMA_CalcBaseAndBitshift>
 800204c:	4603      	mov	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	223f      	movs	r2, #63	; 0x3f
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	e010803f 	.word	0xe010803f

08002078 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Start+0x20>
 8002094:	2302      	movs	r3, #2
 8002096:	e026      	b.n	80020e6 <HAL_DMA_Start+0x6e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d115      	bne.n	80020d8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f9ff 	bl	80024c4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e005      	b.n	80020e4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
 80020e2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Start_IT+0x26>
 8002110:	2302      	movs	r3, #2
 8002112:	e048      	b.n	80021a6 <HAL_DMA_Start_IT+0xb8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d137      	bne.n	8002198 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f9c1 	bl	80024c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0216 	orr.w	r2, r2, #22
 800215c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216c:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0208 	orr.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e005      	b.n	80021a4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_DMA_IRQHandler+0x258>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a92      	ldr	r2, [pc, #584]	; (800240c <HAL_DMA_IRQHandler+0x25c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0a9b      	lsrs	r3, r3, #10
 80021c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2208      	movs	r2, #8
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01a      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2208      	movs	r2, #8
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2201      	movs	r2, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	2201      	movs	r2, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2204      	movs	r2, #4
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	2204      	movs	r2, #4
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2210      	movs	r2, #16
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d043      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03c      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	2210      	movs	r2, #16
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d024      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e01f      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01b      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e016      	b.n	8002320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2220      	movs	r2, #32
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808e 	beq.w	800244e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8086 	beq.w	800244e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2220      	movs	r2, #32
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b05      	cmp	r3, #5
 8002358:	d136      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0216 	bic.w	r2, r2, #22
 8002368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_DMA_IRQHandler+0x1da>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0208 	bic.w	r2, r2, #8
 8002398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	223f      	movs	r2, #63	; 0x3f
 80023a0:	409a      	lsls	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d07d      	beq.n	80024ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
        }
        return;
 80023c6:	e078      	b.n	80024ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01c      	beq.n	8002410 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d030      	beq.n	800244e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e02b      	b.n	800244e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d027      	beq.n	800244e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e022      	b.n	800244e <HAL_DMA_IRQHandler+0x29e>
 8002408:	20000004 	.word	0x20000004
 800240c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0210 	bic.w	r2, r2, #16
 800242c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	2b00      	cmp	r3, #0
 8002454:	d032      	beq.n	80024bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d022      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	429a      	cmp	r2, r3
 8002484:	d307      	bcc.n	8002496 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f2      	bne.n	800247a <HAL_DMA_IRQHandler+0x2ca>
 8002494:	e000      	b.n	8002498 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002496:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
 80024b8:	e000      	b.n	80024bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ba:	bf00      	nop
    }
  }
}
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop

080024c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	d108      	bne.n	8002504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002502:	e007      	b.n	8002514 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b10      	subs	r3, #16
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <DMA_CalcBaseAndBitshift+0x60>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <DMA_CalcBaseAndBitshift+0x64>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d908      	bls.n	8002560 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 8002556:	4013      	ands	r3, r2
 8002558:	1d1a      	adds	r2, r3, #4
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	659a      	str	r2, [r3, #88]	; 0x58
 800255e:	e006      	b.n	800256e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 8002568:	4013      	ands	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	aaaaaaab 	.word	0xaaaaaaab
 8002584:	080056e4 	.word	0x080056e4
 8002588:	fffffc00 	.word	0xfffffc00

0800258c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d855      	bhi.n	8002658 <DMA_CheckFifoParam+0xcc>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <DMA_CheckFifoParam+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d7 	.word	0x080025d7
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	08002659 	.word	0x08002659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d045      	beq.n	800265c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e042      	b.n	800265c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025de:	d13f      	bne.n	8002660 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e03c      	b.n	8002660 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ee:	d121      	bne.n	8002634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d836      	bhi.n	8002664 <DMA_CheckFifoParam+0xd8>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <DMA_CheckFifoParam+0x70>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002613 	.word	0x08002613
 8002604:	0800260d 	.word	0x0800260d
 8002608:	08002625 	.word	0x08002625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e02f      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e021      	b.n	8002668 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800262c:	d11e      	bne.n	800266c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002632:	e01b      	b.n	800266c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d902      	bls.n	8002640 <DMA_CheckFifoParam+0xb4>
 800263a:	2b03      	cmp	r3, #3
 800263c:	d003      	beq.n	8002646 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800263e:	e018      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e015      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00e      	beq.n	8002670 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e00b      	b.n	8002670 <DMA_CheckFifoParam+0xe4>
      break;
 8002658:	bf00      	nop
 800265a:	e00a      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 800265c:	bf00      	nop
 800265e:	e008      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002660:	bf00      	nop
 8002662:	e006      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002664:	bf00      	nop
 8002666:	e004      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002668:	bf00      	nop
 800266a:	e002      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;   
 800266c:	bf00      	nop
 800266e:	e000      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002670:	bf00      	nop
    }
  } 
  
  return status; 
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e169      	b.n	8002974 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8158 	bne.w	800296e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00b      	beq.n	80026de <HAL_GPIO_Init+0x5e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d2:	2b11      	cmp	r3, #17
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x100>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b12      	cmp	r3, #18
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80b2 	beq.w	800296e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_GPIO_Init+0x308>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_GPIO_Init+0x308>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_GPIO_Init+0x308>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002822:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_GPIO_Init+0x30c>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a51      	ldr	r2, [pc, #324]	; (8002990 <HAL_GPIO_Init+0x310>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d02b      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a50      	ldr	r2, [pc, #320]	; (8002994 <HAL_GPIO_Init+0x314>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d025      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <HAL_GPIO_Init+0x318>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01f      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4e      	ldr	r2, [pc, #312]	; (800299c <HAL_GPIO_Init+0x31c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x21a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_GPIO_Init+0x320>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x216>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_GPIO_Init+0x324>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x212>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_GPIO_Init+0x328>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x20e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_GPIO_Init+0x32c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x20a>
 8002886:	2307      	movs	r3, #7
 8002888:	e00e      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 800288a:	2308      	movs	r3, #8
 800288c:	e00c      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 800288e:	2306      	movs	r3, #6
 8002890:	e00a      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 8002892:	2305      	movs	r3, #5
 8002894:	e008      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 8002896:	2304      	movs	r3, #4
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 800289a:	2303      	movs	r3, #3
 800289c:	e004      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 800289e:	2302      	movs	r3, #2
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_GPIO_Init+0x228>
 80028a6:	2300      	movs	r3, #0
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f002 0203 	and.w	r2, r2, #3
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4093      	lsls	r3, r2
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028b8:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_GPIO_Init+0x30c>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	3302      	adds	r3, #2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c6:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_GPIO_Init+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <HAL_GPIO_Init+0x330>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_GPIO_Init+0x330>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002914:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <HAL_GPIO_Init+0x330>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291a:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_GPIO_Init+0x330>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_GPIO_Init+0x330>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_GPIO_Init+0x330>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002968:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_GPIO_Init+0x330>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	f67f ae92 	bls.w	80026a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800297c:	bf00      	nop
 800297e:	3724      	adds	r7, #36	; 0x24
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40023800 	.word	0x40023800
 800298c:	40013800 	.word	0x40013800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40021400 	.word	0x40021400
 80029a8:	40021800 	.word	0x40021800
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e8:	b08f      	sub	sp, #60	; 0x3c
 80029ea:	af0a      	add	r7, sp, #40	; 0x28
 80029ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e116      	b.n	8002c26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fb1c 	bl	8001050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fb3e 	bl	80050b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	687e      	ldr	r6, [r7, #4]
 8002a44:	466d      	mov	r5, sp
 8002a46:	f106 0410 	add.w	r4, r6, #16
 8002a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5a:	1d33      	adds	r3, r6, #4
 8002a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5e:	6838      	ldr	r0, [r7, #0]
 8002a60:	f002 facc 	bl	8004ffc <USB_CoreInit>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0d7      	b.n	8002c26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fb2c 	bl	80050da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e04a      	b.n	8002b1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	333d      	adds	r3, #61	; 0x3d
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	333c      	adds	r3, #60	; 0x3c
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	b298      	uxth	r0, r3
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3342      	adds	r3, #66	; 0x42
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	333f      	adds	r3, #63	; 0x3f
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3348      	adds	r3, #72	; 0x48
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3350      	adds	r3, #80	; 0x50
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3af      	bcc.n	8002a88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e044      	b.n	8002bb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d3b5      	bcc.n	8002b2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	687e      	ldr	r6, [r7, #4]
 8002bca:	466d      	mov	r5, sp
 8002bcc:	f106 0410 	add.w	r4, r6, #16
 8002bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be0:	1d33      	adds	r3, r6, #4
 8002be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be4:	6838      	ldr	r0, [r7, #0]
 8002be6:	f002 faa3 	bl	8005130 <USB_DevInit>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e014      	b.n	8002c26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f80b 	bl	8002c30 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fc55 	bl	80054ce <USB_DevDisconnect>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	10000003 	.word	0x10000003

08002c78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40007000 	.word	0x40007000

08002c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc6:	f7fe fb27 	bl	8001318 <HAL_GetTick>
 8002cca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ccc:	e009      	b.n	8002ce2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cce:	f7fe fb23 	bl	8001318 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cdc:	d901      	bls.n	8002ce2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e022      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d1ee      	bne.n	8002cce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfc:	f7fe fb0c 	bl	8001318 <HAL_GetTick>
 8002d00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d02:	e009      	b.n	8002d18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d04:	f7fe fb08 	bl	8001318 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d12:	d901      	bls.n	8002d18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e007      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d24:	d1ee      	bne.n	8002d04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e291      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8087 	beq.w	8002e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d5c:	4b96      	ldr	r3, [pc, #600]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d00c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d68:	4b93      	ldr	r3, [pc, #588]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0x62>
 8002d74:	4b90      	ldr	r3, [pc, #576]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d82:	4b8d      	ldr	r3, [pc, #564]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d06c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x130>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d168      	bne.n	8002e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e26b      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x7a>
 8002da4:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a83      	ldr	r2, [pc, #524]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e02e      	b.n	8002e10 <HAL_RCC_OscConfig+0xd8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x9c>
 8002dba:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7b      	ldr	r2, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xd8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0xc0>
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a72      	ldr	r2, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xd8>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6b      	ldr	r2, [pc, #428]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fa7e 	bl	8001318 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe fa7a 	bl	8001318 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e21f      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xe8>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fa6a 	bl	8001318 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe fa66 	bl	8001318 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e20b      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x110>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d069      	beq.n	8002f4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e76:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x190>
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x17a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1df      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	493d      	ldr	r1, [pc, #244]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e040      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a38      	ldr	r2, [pc, #224]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fa1c 	bl	8001318 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fa18 	bl	8001318 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1bd      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4929      	ldr	r1, [pc, #164]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
 8002f16:	e018      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f9f8 	bl	8001318 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe f9f4 	bl	8001318 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e199      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d038      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d019      	beq.n	8002f92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f9d5 	bl	8001318 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe f9d1 	bl	8001318 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e176      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x23a>
 8002f90:	e01a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_RCC_OscConfig+0x280>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f9bb 	bl	8001318 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe f9b7 	bl	8001318 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d903      	bls.n	8002fbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e15c      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
 8002fb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b91      	ldr	r3, [pc, #580]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ee      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a4 	beq.w	800311e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10d      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b85      	ldr	r3, [pc, #532]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800300a:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fe f97f 	bl	8001318 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe f97b 	bl	8001318 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e120      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x31a>
 8003044:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e02d      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x33c>
 800305a:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a69      	ldr	r2, [pc, #420]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a66      	ldr	r2, [pc, #408]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	e01c      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x35e>
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a60      	ldr	r2, [pc, #384]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	e00b      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
 8003096:	4b5b      	ldr	r3, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a57      	ldr	r2, [pc, #348]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d015      	beq.n	80030e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe f92f 	bl	8001318 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe f92b 	bl	8001318 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e0ce      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ee      	beq.n	80030be <HAL_RCC_OscConfig+0x386>
 80030e0:	e014      	b.n	800310c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fe f919 	bl	8001318 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe f915 	bl	8001318 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80a4 	beq.w	8003270 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d06b      	beq.n	800320c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d149      	bne.n	80031d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a30      	ldr	r2, [pc, #192]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f8e6 	bl	8001318 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe f8e2 	bl	8001318 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e087      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	3b01      	subs	r3, #1
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	4313      	orrs	r3, r2
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800319a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f8b6 	bl	8001318 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f8b2 	bl	8001318 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e057      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x478>
 80031ce:	e04f      	b.n	8003270 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe f89c 	bl	8001318 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe f898 	bl	8001318 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e03d      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4ac>
 8003202:	e035      	b.n	8003270 <HAL_RCC_OscConfig+0x538>
 8003204:	40023800 	.word	0x40023800
 8003208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x544>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d028      	beq.n	800326c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d121      	bne.n	800326c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d11a      	bne.n	800326c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003242:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	d111      	bne.n	800326c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	3b01      	subs	r3, #1
 8003256:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d0      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	4965      	ldr	r1, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d040      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4936      	ldr	r1, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003374:	f7fd ffd0 	bl	8001318 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd ffcc 	bl	8001318 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e053      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4601      	mov	r1, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1cc>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	fa21 f303 	lsr.w	r3, r1, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1d0>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd ff2c 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00
 8003448:	40023800 	.word	0x40023800
 800344c:	080056cc 	.word	0x080056cc
 8003450:	20000004 	.word	0x20000004
 8003454:	20000008 	.word	0x20000008

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	2300      	movs	r3, #0
 8003468:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d007      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x32>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d008      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x38>
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80b4 	bne.w	80035ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	e0b3      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348a:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800348c:	60bb      	str	r3, [r7, #8]
      break;
 800348e:	e0b0      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003490:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800349a:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04a      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	f04f 0400 	mov.w	r4, #0
 80034b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	ea03 0501 	and.w	r5, r3, r1
 80034bc:	ea04 0602 	and.w	r6, r4, r2
 80034c0:	4629      	mov	r1, r5
 80034c2:	4632      	mov	r2, r6
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	f04f 0400 	mov.w	r4, #0
 80034cc:	0154      	lsls	r4, r2, #5
 80034ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d2:	014b      	lsls	r3, r1, #5
 80034d4:	4619      	mov	r1, r3
 80034d6:	4622      	mov	r2, r4
 80034d8:	1b49      	subs	r1, r1, r5
 80034da:	eb62 0206 	sbc.w	r2, r2, r6
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f04f 0400 	mov.w	r4, #0
 80034e6:	0194      	lsls	r4, r2, #6
 80034e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ec:	018b      	lsls	r3, r1, #6
 80034ee:	1a5b      	subs	r3, r3, r1
 80034f0:	eb64 0402 	sbc.w	r4, r4, r2
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	00e2      	lsls	r2, r4, #3
 80034fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003502:	00d9      	lsls	r1, r3, #3
 8003504:	460b      	mov	r3, r1
 8003506:	4614      	mov	r4, r2
 8003508:	195b      	adds	r3, r3, r5
 800350a:	eb44 0406 	adc.w	r4, r4, r6
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	0262      	lsls	r2, r4, #9
 8003518:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800351c:	0259      	lsls	r1, r3, #9
 800351e:	460b      	mov	r3, r1
 8003520:	4614      	mov	r4, r2
 8003522:	4618      	mov	r0, r3
 8003524:	4621      	mov	r1, r4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	461a      	mov	r2, r3
 800352e:	4623      	mov	r3, r4
 8003530:	f7fc fe76 	bl	8000220 <__aeabi_uldivmod>
 8003534:	4603      	mov	r3, r0
 8003536:	460c      	mov	r4, r1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e049      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353c:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	f04f 0400 	mov.w	r4, #0
 8003546:	f240 11ff 	movw	r1, #511	; 0x1ff
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	ea03 0501 	and.w	r5, r3, r1
 8003552:	ea04 0602 	and.w	r6, r4, r2
 8003556:	4629      	mov	r1, r5
 8003558:	4632      	mov	r2, r6
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	0154      	lsls	r4, r2, #5
 8003564:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003568:	014b      	lsls	r3, r1, #5
 800356a:	4619      	mov	r1, r3
 800356c:	4622      	mov	r2, r4
 800356e:	1b49      	subs	r1, r1, r5
 8003570:	eb62 0206 	sbc.w	r2, r2, r6
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	0194      	lsls	r4, r2, #6
 800357e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	1a5b      	subs	r3, r3, r1
 8003586:	eb64 0402 	sbc.w	r4, r4, r2
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	00e2      	lsls	r2, r4, #3
 8003594:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003598:	00d9      	lsls	r1, r3, #3
 800359a:	460b      	mov	r3, r1
 800359c:	4614      	mov	r4, r2
 800359e:	195b      	adds	r3, r3, r5
 80035a0:	eb44 0406 	adc.w	r4, r4, r6
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	02a2      	lsls	r2, r4, #10
 80035ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035b2:	0299      	lsls	r1, r3, #10
 80035b4:	460b      	mov	r3, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	4621      	mov	r1, r4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4623      	mov	r3, r4
 80035c6:	f7fc fe2b 	bl	8000220 <__aeabi_uldivmod>
 80035ca:	4603      	mov	r3, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	60bb      	str	r3, [r7, #8]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ee:	60bb      	str	r3, [r7, #8]
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	68bb      	ldr	r3, [r7, #8]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400
 8003604:	007a1200 	.word	0x007a1200

08003608 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_RCC_GetHCLKFreq+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000004 	.word	0x20000004

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff0 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003628:	4601      	mov	r1, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4a03      	ldr	r2, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	080056dc 	.word	0x080056dc

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffdc 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003650:	4601      	mov	r1, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0b5b      	lsrs	r3, r3, #13
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4a03      	ldr	r2, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	080056dc 	.word	0x080056dc

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003694:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a64      	ldr	r2, [pc, #400]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800369a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800369e:	6093      	str	r3, [r2, #8]
 80036a0:	4b62      	ldr	r3, [pc, #392]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4960      	ldr	r1, [pc, #384]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d017      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c6:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	4955      	ldr	r1, [pc, #340]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003708:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	4946      	ldr	r1, [pc, #280]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 808b 	beq.w	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b3a      	ldr	r3, [pc, #232]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4a39      	ldr	r2, [pc, #228]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6413      	str	r3, [r2, #64]	; 0x40
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a34      	ldr	r2, [pc, #208]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fdd8 	bl	8001318 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fdd4 	bl	8001318 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e2ba      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d035      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d02e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d114      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd fd9c 	bl	8001318 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	e00a      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7fd fd98 	bl	8001318 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e27c      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ee      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003812:	d111      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003822:	400b      	ands	r3, r1
 8003824:	4901      	ldr	r1, [pc, #4]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
 800382a:	e00b      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800382c:	40023800 	.word	0x40023800
 8003830:	40007000 	.word	0x40007000
 8003834:	0ffffcff 	.word	0x0ffffcff
 8003838:	4ba3      	ldr	r3, [pc, #652]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4aa2      	ldr	r2, [pc, #648]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800383e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	4ba0      	ldr	r3, [pc, #640]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	499d      	ldr	r1, [pc, #628]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003852:	4313      	orrs	r3, r2
 8003854:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003862:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	4a97      	ldr	r2, [pc, #604]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003872:	4b95      	ldr	r3, [pc, #596]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003874:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	4992      	ldr	r1, [pc, #584]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003890:	4b8d      	ldr	r3, [pc, #564]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	498a      	ldr	r1, [pc, #552]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	4981      	ldr	r1, [pc, #516]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d4:	4b7c      	ldr	r3, [pc, #496]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	4979      	ldr	r1, [pc, #484]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f6:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f023 0203 	bic.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	4970      	ldr	r1, [pc, #448]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003918:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f023 020c 	bic.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4968      	ldr	r1, [pc, #416]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	495f      	ldr	r1, [pc, #380]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800395c:	4b5a      	ldr	r3, [pc, #360]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	4957      	ldr	r1, [pc, #348]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800397e:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	494e      	ldr	r1, [pc, #312]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039a0:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	4946      	ldr	r1, [pc, #280]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	493d      	ldr	r1, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039e4:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4935      	ldr	r1, [pc, #212]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d011      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	492c      	ldr	r1, [pc, #176]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a24:	d101      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a44:	4920      	ldr	r1, [pc, #128]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a66:	4918      	ldr	r1, [pc, #96]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a88:	490f      	ldr	r1, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a9e:	f040 809c 	bne.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aae:	f7fd fc33 	bl	8001318 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab6:	f7fd fc2f 	bl	8001318 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d903      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e115      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003acc:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ee      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aec:	4b83      	ldr	r3, [pc, #524]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af2:	0e1b      	lsrs	r3, r3, #24
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	019a      	lsls	r2, r3, #6
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	497b      	ldr	r1, [pc, #492]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d024      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3e:	d11f      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b40:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b46:	0f1b      	lsrs	r3, r3, #28
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	019a      	lsls	r2, r3, #6
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	071b      	lsls	r3, r3, #28
 8003b60:	4966      	ldr	r1, [pc, #408]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6e:	f023 021f 	bic.w	r2, r3, #31
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4960      	ldr	r1, [pc, #384]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	019a      	lsls	r2, r3, #6
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	071b      	lsls	r3, r3, #28
 8003ba0:	4956      	ldr	r1, [pc, #344]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ba8:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a53      	ldr	r2, [pc, #332]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fbb0 	bl	8001318 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bbc:	f7fd fbac 	bl	8001318 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e092      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bce:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 8088 	bne.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003be2:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a45      	ldr	r2, [pc, #276]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd fb93 	bl	8001318 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf6:	f7fd fb8f 	bl	8001318 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	; 0x64
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e075      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c08:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c14:	d0ef      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d120      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	019a      	lsls	r2, r3, #6
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4927      	ldr	r1, [pc, #156]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4920      	ldr	r1, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d018      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c94:	d113      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	0e1b      	lsrs	r3, r3, #24
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	019a      	lsls	r2, r3, #6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	4911      	ldr	r1, [pc, #68]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd fb25 	bl	8001318 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cd2:	f7fd fb21 	bl	8001318 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e007      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf0:	d1ef      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01d      	b.n	8003d4e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd f8f6 	bl	8000f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 f966 	bl	8004010 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fc4e 	bl	800460c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_TIM_PWM_Start+0x7c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_TIM_PWM_Start+0x2c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_TIM_PWM_Start+0x80>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_TIM_PWM_Start+0x30>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_TIM_PWM_Start+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_TIM_PWM_Start+0x84>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d00b      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x70>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d007      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400
 8003ddc:	00010007 	.word	0x00010007

08003de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e105      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b14      	cmp	r3, #20
 8003e0e:	f200 80f0 	bhi.w	8003ff2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003ff3 	.word	0x08003ff3
 8003e20:	08003ff3 	.word	0x08003ff3
 8003e24:	08003ff3 	.word	0x08003ff3
 8003e28:	08003ead 	.word	0x08003ead
 8003e2c:	08003ff3 	.word	0x08003ff3
 8003e30:	08003ff3 	.word	0x08003ff3
 8003e34:	08003ff3 	.word	0x08003ff3
 8003e38:	08003eef 	.word	0x08003eef
 8003e3c:	08003ff3 	.word	0x08003ff3
 8003e40:	08003ff3 	.word	0x08003ff3
 8003e44:	08003ff3 	.word	0x08003ff3
 8003e48:	08003f2f 	.word	0x08003f2f
 8003e4c:	08003ff3 	.word	0x08003ff3
 8003e50:	08003ff3 	.word	0x08003ff3
 8003e54:	08003ff3 	.word	0x08003ff3
 8003e58:	08003f71 	.word	0x08003f71
 8003e5c:	08003ff3 	.word	0x08003ff3
 8003e60:	08003ff3 	.word	0x08003ff3
 8003e64:	08003ff3 	.word	0x08003ff3
 8003e68:	08003fb1 	.word	0x08003fb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f96c 	bl	8004150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	619a      	str	r2, [r3, #24]
      break;
 8003eaa:	e0a3      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f9be 	bl	8004234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	021a      	lsls	r2, r3, #8
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      break;
 8003eec:	e082      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fa15 	bl	8004324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0208 	orr.w	r2, r2, #8
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0204 	bic.w	r2, r2, #4
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	61da      	str	r2, [r3, #28]
      break;
 8003f2c:	e062      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa6b 	bl	8004410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]
      break;
 8003f6e:	e041      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 faa2 	bl	80044c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0208 	orr.w	r2, r2, #8
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fae:	e021      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fad4 	bl	8004564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	021a      	lsls	r2, r3, #8
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ff0:	e000      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003ff2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a40      	ldr	r2, [pc, #256]	; (8004124 <TIM_Base_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402e:	d00f      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <TIM_Base_SetConfig+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3c      	ldr	r2, [pc, #240]	; (800412c <TIM_Base_SetConfig+0x11c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3b      	ldr	r2, [pc, #236]	; (8004130 <TIM_Base_SetConfig+0x120>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <TIM_Base_SetConfig+0x124>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d108      	bne.n	8004062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <TIM_Base_SetConfig+0x114>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02b      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d027      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <TIM_Base_SetConfig+0x118>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d023      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	; (800412c <TIM_Base_SetConfig+0x11c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <TIM_Base_SetConfig+0x120>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01b      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a29      	ldr	r2, [pc, #164]	; (8004134 <TIM_Base_SetConfig+0x124>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d017      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <TIM_Base_SetConfig+0x128>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <TIM_Base_SetConfig+0x12c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00f      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <TIM_Base_SetConfig+0x130>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <TIM_Base_SetConfig+0x134>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a24      	ldr	r2, [pc, #144]	; (8004148 <TIM_Base_SetConfig+0x138>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a23      	ldr	r2, [pc, #140]	; (800414c <TIM_Base_SetConfig+0x13c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d108      	bne.n	80040d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <TIM_Base_SetConfig+0x114>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0xf8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <TIM_Base_SetConfig+0x124>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	40001800 	.word	0x40001800
 8004148:	40001c00 	.word	0x40001c00
 800414c:	40002000 	.word	0x40002000

08004150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <TIM_OC1_SetConfig+0xd8>)
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0302 	bic.w	r3, r3, #2
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <TIM_OC1_SetConfig+0xdc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC1_SetConfig+0x64>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a20      	ldr	r2, [pc, #128]	; (8004230 <TIM_OC1_SetConfig+0xe0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10c      	bne.n	80041ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0308 	bic.w	r3, r3, #8
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <TIM_OC1_SetConfig+0xdc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC1_SetConfig+0x8e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <TIM_OC1_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d111      	bne.n	8004202 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	fffeff8f 	.word	0xfffeff8f
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400

08004234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <TIM_OC2_SetConfig+0xe4>)
 8004260:	4013      	ands	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0320 	bic.w	r3, r3, #32
 800427e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a23      	ldr	r2, [pc, #140]	; (800431c <TIM_OC2_SetConfig+0xe8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_OC2_SetConfig+0x68>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <TIM_OC2_SetConfig+0xec>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10d      	bne.n	80042b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <TIM_OC2_SetConfig+0xe8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC2_SetConfig+0x94>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <TIM_OC2_SetConfig+0xec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d113      	bne.n	80042f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	feff8fff 	.word	0xfeff8fff
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <TIM_OC3_SetConfig+0xe0>)
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a22      	ldr	r2, [pc, #136]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC3_SetConfig+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <TIM_OC3_SetConfig+0xe8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x92>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a16      	ldr	r2, [pc, #88]	; (800440c <TIM_OC3_SetConfig+0xe8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d113      	bne.n	80043de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	fffeff8f 	.word	0xfffeff8f
 8004408:	40010000 	.word	0x40010000
 800440c:	40010400 	.word	0x40010400

08004410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <TIM_OC4_SetConfig+0xa4>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <TIM_OC4_SetConfig+0xa8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC4_SetConfig+0x68>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <TIM_OC4_SetConfig+0xac>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d109      	bne.n	800448c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	feff8fff 	.word	0xfeff8fff
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400

080044c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <TIM_OC5_SetConfig+0x98>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <TIM_OC5_SetConfig+0x9c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC5_SetConfig+0x5e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <TIM_OC5_SetConfig+0xa0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d109      	bne.n	8004532 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	fffeff8f 	.word	0xfffeff8f
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400

08004564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <TIM_OC6_SetConfig+0x9c>)
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	051b      	lsls	r3, r3, #20
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a13      	ldr	r2, [pc, #76]	; (8004604 <TIM_OC6_SetConfig+0xa0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC6_SetConfig+0x60>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <TIM_OC6_SetConfig+0xa4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d109      	bne.n	80045d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	029b      	lsls	r3, r3, #10
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	feff8fff 	.word	0xfeff8fff
 8004604:	40010000 	.word	0x40010000
 8004608:	40010400 	.word	0x40010400

0800460c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2201      	movs	r2, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800466c:	2302      	movs	r3, #2
 800466e:	e06d      	b.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a30      	ldr	r2, [pc, #192]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2f      	ldr	r2, [pc, #188]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d01d      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10c      	bne.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40010000 	.word	0x40010000
 800475c:	40010400 	.word	0x40010400
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40001800 	.word	0x40001800

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e040      	b.n	8004808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fc16 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	; 0x24
 80047a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f82c 	bl	8004810 <UART_SetConfig>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 faca 	bl	8004d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb51 	bl	8004ea8 <UART_CheckIdleState>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4bb1      	ldr	r3, [pc, #708]	; (8004b04 <UART_SetConfig+0x2f4>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6939      	ldr	r1, [r7, #16]
 8004848:	430b      	orrs	r3, r1
 800484a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a9f      	ldr	r2, [pc, #636]	; (8004b08 <UART_SetConfig+0x2f8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d121      	bne.n	80048d4 <UART_SetConfig+0xc4>
 8004890:	4b9e      	ldr	r3, [pc, #632]	; (8004b0c <UART_SetConfig+0x2fc>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b03      	cmp	r3, #3
 800489c:	d816      	bhi.n	80048cc <UART_SetConfig+0xbc>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0x94>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c1 	.word	0x080048c1
 80048ac:	080048bb 	.word	0x080048bb
 80048b0:	080048c7 	.word	0x080048c7
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e151      	b.n	8004b5e <UART_SetConfig+0x34e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e14e      	b.n	8004b5e <UART_SetConfig+0x34e>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e14b      	b.n	8004b5e <UART_SetConfig+0x34e>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e148      	b.n	8004b5e <UART_SetConfig+0x34e>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	bf00      	nop
 80048d2:	e144      	b.n	8004b5e <UART_SetConfig+0x34e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a8d      	ldr	r2, [pc, #564]	; (8004b10 <UART_SetConfig+0x300>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d134      	bne.n	8004948 <UART_SetConfig+0x138>
 80048de:	4b8b      	ldr	r3, [pc, #556]	; (8004b0c <UART_SetConfig+0x2fc>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d829      	bhi.n	8004940 <UART_SetConfig+0x130>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <UART_SetConfig+0xe4>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004941 	.word	0x08004941
 80048fc:	08004941 	.word	0x08004941
 8004900:	08004941 	.word	0x08004941
 8004904:	08004935 	.word	0x08004935
 8004908:	08004941 	.word	0x08004941
 800490c:	08004941 	.word	0x08004941
 8004910:	08004941 	.word	0x08004941
 8004914:	0800492f 	.word	0x0800492f
 8004918:	08004941 	.word	0x08004941
 800491c:	08004941 	.word	0x08004941
 8004920:	08004941 	.word	0x08004941
 8004924:	0800493b 	.word	0x0800493b
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e117      	b.n	8004b5e <UART_SetConfig+0x34e>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e114      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e111      	b.n	8004b5e <UART_SetConfig+0x34e>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e10e      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	bf00      	nop
 8004946:	e10a      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a71      	ldr	r2, [pc, #452]	; (8004b14 <UART_SetConfig+0x304>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d120      	bne.n	8004994 <UART_SetConfig+0x184>
 8004952:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <UART_SetConfig+0x2fc>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800495c:	2b10      	cmp	r3, #16
 800495e:	d00f      	beq.n	8004980 <UART_SetConfig+0x170>
 8004960:	2b10      	cmp	r3, #16
 8004962:	d802      	bhi.n	800496a <UART_SetConfig+0x15a>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <UART_SetConfig+0x164>
 8004968:	e010      	b.n	800498c <UART_SetConfig+0x17c>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d005      	beq.n	800497a <UART_SetConfig+0x16a>
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	d009      	beq.n	8004986 <UART_SetConfig+0x176>
 8004972:	e00b      	b.n	800498c <UART_SetConfig+0x17c>
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e0f1      	b.n	8004b5e <UART_SetConfig+0x34e>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e0ee      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e0eb      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e0e8      	b.n	8004b5e <UART_SetConfig+0x34e>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	bf00      	nop
 8004992:	e0e4      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <UART_SetConfig+0x308>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d120      	bne.n	80049e0 <UART_SetConfig+0x1d0>
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <UART_SetConfig+0x2fc>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d00f      	beq.n	80049cc <UART_SetConfig+0x1bc>
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d802      	bhi.n	80049b6 <UART_SetConfig+0x1a6>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0x1b0>
 80049b4:	e010      	b.n	80049d8 <UART_SetConfig+0x1c8>
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d005      	beq.n	80049c6 <UART_SetConfig+0x1b6>
 80049ba:	2bc0      	cmp	r3, #192	; 0xc0
 80049bc:	d009      	beq.n	80049d2 <UART_SetConfig+0x1c2>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x1c8>
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e0cb      	b.n	8004b5e <UART_SetConfig+0x34e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e0c8      	b.n	8004b5e <UART_SetConfig+0x34e>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e0c5      	b.n	8004b5e <UART_SetConfig+0x34e>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e0c2      	b.n	8004b5e <UART_SetConfig+0x34e>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	bf00      	nop
 80049de:	e0be      	b.n	8004b5e <UART_SetConfig+0x34e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4d      	ldr	r2, [pc, #308]	; (8004b1c <UART_SetConfig+0x30c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d124      	bne.n	8004a34 <UART_SetConfig+0x224>
 80049ea:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <UART_SetConfig+0x2fc>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f8:	d012      	beq.n	8004a20 <UART_SetConfig+0x210>
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d802      	bhi.n	8004a06 <UART_SetConfig+0x1f6>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <UART_SetConfig+0x204>
 8004a04:	e012      	b.n	8004a2c <UART_SetConfig+0x21c>
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0x20a>
 8004a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a10:	d009      	beq.n	8004a26 <UART_SetConfig+0x216>
 8004a12:	e00b      	b.n	8004a2c <UART_SetConfig+0x21c>
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e0a1      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e09e      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a20:	2304      	movs	r3, #4
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e09b      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a26:	2308      	movs	r3, #8
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e098      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	bf00      	nop
 8004a32:	e094      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <UART_SetConfig+0x310>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d124      	bne.n	8004a88 <UART_SetConfig+0x278>
 8004a3e:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <UART_SetConfig+0x2fc>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d012      	beq.n	8004a74 <UART_SetConfig+0x264>
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d802      	bhi.n	8004a5a <UART_SetConfig+0x24a>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <UART_SetConfig+0x258>
 8004a58:	e012      	b.n	8004a80 <UART_SetConfig+0x270>
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	d006      	beq.n	8004a6e <UART_SetConfig+0x25e>
 8004a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a64:	d009      	beq.n	8004a7a <UART_SetConfig+0x26a>
 8004a66:	e00b      	b.n	8004a80 <UART_SetConfig+0x270>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e077      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e074      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a74:	2304      	movs	r3, #4
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e071      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e06e      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a80:	2310      	movs	r3, #16
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	bf00      	nop
 8004a86:	e06a      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <UART_SetConfig+0x314>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d124      	bne.n	8004adc <UART_SetConfig+0x2cc>
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <UART_SetConfig+0x2fc>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d012      	beq.n	8004ac8 <UART_SetConfig+0x2b8>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d802      	bhi.n	8004aae <UART_SetConfig+0x29e>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <UART_SetConfig+0x2ac>
 8004aac:	e012      	b.n	8004ad4 <UART_SetConfig+0x2c4>
 8004aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab2:	d006      	beq.n	8004ac2 <UART_SetConfig+0x2b2>
 8004ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab8:	d009      	beq.n	8004ace <UART_SetConfig+0x2be>
 8004aba:	e00b      	b.n	8004ad4 <UART_SetConfig+0x2c4>
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e04d      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e04a      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e047      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e044      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	bf00      	nop
 8004ada:	e040      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <UART_SetConfig+0x318>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d139      	bne.n	8004b5a <UART_SetConfig+0x34a>
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <UART_SetConfig+0x2fc>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af4:	d027      	beq.n	8004b46 <UART_SetConfig+0x336>
 8004af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004afa:	d817      	bhi.n	8004b2c <UART_SetConfig+0x31c>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01c      	beq.n	8004b3a <UART_SetConfig+0x32a>
 8004b00:	e027      	b.n	8004b52 <UART_SetConfig+0x342>
 8004b02:	bf00      	nop
 8004b04:	efff69f3 	.word	0xefff69f3
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40004400 	.word	0x40004400
 8004b14:	40004800 	.word	0x40004800
 8004b18:	40004c00 	.word	0x40004c00
 8004b1c:	40005000 	.word	0x40005000
 8004b20:	40011400 	.word	0x40011400
 8004b24:	40007800 	.word	0x40007800
 8004b28:	40007c00 	.word	0x40007c00
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b30:	d006      	beq.n	8004b40 <UART_SetConfig+0x330>
 8004b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b36:	d009      	beq.n	8004b4c <UART_SetConfig+0x33c>
 8004b38:	e00b      	b.n	8004b52 <UART_SetConfig+0x342>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e00e      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004b40:	2302      	movs	r3, #2
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e00b      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004b46:	2304      	movs	r3, #4
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e008      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e005      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004b52:	2310      	movs	r3, #16
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	bf00      	nop
 8004b58:	e001      	b.n	8004b5e <UART_SetConfig+0x34e>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b66:	d17f      	bne.n	8004c68 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004b68:	7ffb      	ldrb	r3, [r7, #31]
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d85c      	bhi.n	8004c28 <UART_SetConfig+0x418>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0x364>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004bb9 	.word	0x08004bb9
 8004b7c:	08004bd9 	.word	0x08004bd9
 8004b80:	08004c29 	.word	0x08004c29
 8004b84:	08004bf1 	.word	0x08004bf1
 8004b88:	08004c29 	.word	0x08004c29
 8004b8c:	08004c29 	.word	0x08004c29
 8004b90:	08004c29 	.word	0x08004c29
 8004b94:	08004c11 	.word	0x08004c11
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b98:	f7fe fd42 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	005a      	lsls	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	61bb      	str	r3, [r7, #24]
        break;
 8004bb6:	e03a      	b.n	8004c2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe fd46 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
        break;
 8004bd6:	e02a      	b.n	8004c2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085a      	lsrs	r2, r3, #1
 8004bde:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <UART_SetConfig+0x54c>)
 8004be0:	4413      	add	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6852      	ldr	r2, [r2, #4]
 8004be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	61bb      	str	r3, [r7, #24]
        break;
 8004bee:	e01e      	b.n	8004c2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf0:	f7fe fc32 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004bf4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	005a      	lsls	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	61bb      	str	r3, [r7, #24]
        break;
 8004c0e:	e00e      	b.n	8004c2e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	61bb      	str	r3, [r7, #24]
        break;
 8004c26:	e002      	b.n	8004c2e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
        break;
 8004c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b0f      	cmp	r3, #15
 8004c32:	d916      	bls.n	8004c62 <UART_SetConfig+0x452>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d212      	bcs.n	8004c62 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f023 030f 	bic.w	r3, r3, #15
 8004c44:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	897a      	ldrh	r2, [r7, #10]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e070      	b.n	8004d44 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
 8004c66:	e06d      	b.n	8004d44 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d859      	bhi.n	8004d22 <UART_SetConfig+0x512>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x464>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004cb7 	.word	0x08004cb7
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004d23 	.word	0x08004d23
 8004c84:	08004ced 	.word	0x08004ced
 8004c88:	08004d23 	.word	0x08004d23
 8004c8c:	08004d23 	.word	0x08004d23
 8004c90:	08004d23 	.word	0x08004d23
 8004c94:	08004d0b 	.word	0x08004d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe fcc2 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	085a      	lsrs	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e038      	b.n	8004d28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb6:	f7fe fcc7 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004cba:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	085a      	lsrs	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	61bb      	str	r3, [r7, #24]
        break;
 8004cd2:	e029      	b.n	8004d28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	085a      	lsrs	r2, r3, #1
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <UART_SetConfig+0x550>)
 8004cdc:	4413      	add	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6852      	ldr	r2, [r2, #4]
 8004ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	61bb      	str	r3, [r7, #24]
        break;
 8004cea:	e01d      	b.n	8004d28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cec:	f7fe fbb4 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004cf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	085a      	lsrs	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	441a      	add	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	61bb      	str	r3, [r7, #24]
        break;
 8004d08:	e00e      	b.n	8004d28 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	61bb      	str	r3, [r7, #24]
        break;
 8004d20:	e002      	b.n	8004d28 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
        break;
 8004d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d908      	bls.n	8004d40 <UART_SetConfig+0x530>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d204      	bcs.n	8004d40 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e001      	b.n	8004d44 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	01e84800 	.word	0x01e84800
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d10a      	bne.n	8004e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004eb6:	f7fc fa2f 	bl	8001318 <HAL_GetTick>
 8004eba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d10e      	bne.n	8004ee8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f814 	bl	8004f06 <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e00a      	b.n	8004efe <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	e05d      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d059      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fc f9fa 	bl	8001318 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11b      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e042      	b.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02b      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d123      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f94:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e00f      	b.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d092      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	f107 001c 	add.w	r0, r7, #28
 800500a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b01      	cmp	r3, #1
 8005012:	d126      	bne.n	8005062 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <USB_CoreInit+0xb8>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f043 0210 	orr.w	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d105      	bne.n	8005056 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa52 	bl	8005500 <USB_CoreReset>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e010      	b.n	8005084 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa46 	bl	8005500 <USB_CoreReset>
 8005074:	4603      	mov	r3, r0
 8005076:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10b      	bne.n	80050a2 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f043 0206 	orr.w	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050ae:	b004      	add	sp, #16
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	ffbdffbf 	.word	0xffbdffbf

080050b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 0201 	bic.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	460b      	mov	r3, r1
 80050e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e00b      	b.n	800511e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	e001      	b.n	800511e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e003      	b.n	8005126 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800511e:	2032      	movs	r0, #50	; 0x32
 8005120:	f7fc f906 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005130:	b084      	sub	sp, #16
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800513e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e009      	b.n	8005164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3340      	adds	r3, #64	; 0x40
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3301      	adds	r3, #1
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b0e      	cmp	r3, #14
 8005168:	d9f2      	bls.n	8005150 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d11c      	bne.n	80051aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e005      	b.n	80051b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051bc:	461a      	mov	r2, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c8:	4619      	mov	r1, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	461a      	mov	r2, r3
 80051d2:	680b      	ldr	r3, [r1, #0]
 80051d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10c      	bne.n	80051f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051e2:	2100      	movs	r1, #0
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f959 	bl	800549c <USB_SetDevSpeed>
 80051ea:	e018      	b.n	800521e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051ec:	2101      	movs	r1, #1
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f954 	bl	800549c <USB_SetDevSpeed>
 80051f4:	e013      	b.n	800521e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d10c      	bne.n	8005216 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005202:	2100      	movs	r1, #0
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f949 	bl	800549c <USB_SetDevSpeed>
 800520a:	e008      	b.n	800521e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800520c:	2101      	movs	r1, #1
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f944 	bl	800549c <USB_SetDevSpeed>
 8005214:	e003      	b.n	800521e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005216:	2103      	movs	r1, #3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f93f 	bl	800549c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800521e:	2110      	movs	r1, #16
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8f3 	bl	800540c <USB_FlushTxFifo>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f911 	bl	8005458 <USB_FlushRxFifo>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e043      	b.n	80052f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005280:	d118      	bne.n	80052b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e013      	b.n	80052c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	461a      	mov	r2, r3
 80052ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	e008      	b.n	80052c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	461a      	mov	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	461a      	mov	r2, r3
 80052e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3301      	adds	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3b7      	bcc.n	800526a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e043      	b.n	8005388 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005316:	d118      	bne.n	800534a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e013      	b.n	800535c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	461a      	mov	r2, r3
 8005342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e008      	b.n	800535c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d3b7      	bcc.n	8005300 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f043 0210 	orr.w	r2, r3, #16
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <USB_DevInit+0x2d4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f043 0208 	orr.w	r2, r3, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <USB_DevInit+0x2d8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005400:	b004      	add	sp, #16
 8005402:	4770      	bx	lr
 8005404:	803c3800 	.word	0x803c3800
 8005408:	40000004 	.word	0x40000004

0800540c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	019b      	lsls	r3, r3, #6
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3301      	adds	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <USB_FlushTxFifo+0x48>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e006      	b.n	8005446 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d0f0      	beq.n	8005426 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	00030d40 	.word	0x00030d40

08005458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2210      	movs	r2, #16
 8005468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <USB_FlushRxFifo+0x40>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d0f0      	beq.n	800546a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	00030d40 	.word	0x00030d40

0800549c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80054ee:	2003      	movs	r0, #3
 80054f0:	f7fb ff1e 	bl	8001330 <HAL_Delay>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <USB_CoreReset+0x64>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e01b      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	daf2      	bge.n	800550c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <USB_CoreReset+0x64>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d0f0      	beq.n	8005536 <USB_CoreReset+0x36>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	00030d40 	.word	0x00030d40

08005568 <__errno>:
 8005568:	4b01      	ldr	r3, [pc, #4]	; (8005570 <__errno+0x8>)
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000010 	.word	0x20000010

08005574 <__libc_init_array>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4e0d      	ldr	r6, [pc, #52]	; (80055ac <__libc_init_array+0x38>)
 8005578:	4c0d      	ldr	r4, [pc, #52]	; (80055b0 <__libc_init_array+0x3c>)
 800557a:	1ba4      	subs	r4, r4, r6
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	2500      	movs	r5, #0
 8005580:	42a5      	cmp	r5, r4
 8005582:	d109      	bne.n	8005598 <__libc_init_array+0x24>
 8005584:	4e0b      	ldr	r6, [pc, #44]	; (80055b4 <__libc_init_array+0x40>)
 8005586:	4c0c      	ldr	r4, [pc, #48]	; (80055b8 <__libc_init_array+0x44>)
 8005588:	f000 f894 	bl	80056b4 <_init>
 800558c:	1ba4      	subs	r4, r4, r6
 800558e:	10a4      	asrs	r4, r4, #2
 8005590:	2500      	movs	r5, #0
 8005592:	42a5      	cmp	r5, r4
 8005594:	d105      	bne.n	80055a2 <__libc_init_array+0x2e>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800559c:	4798      	blx	r3
 800559e:	3501      	adds	r5, #1
 80055a0:	e7ee      	b.n	8005580 <__libc_init_array+0xc>
 80055a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055a6:	4798      	blx	r3
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7f2      	b.n	8005592 <__libc_init_array+0x1e>
 80055ac:	080056f4 	.word	0x080056f4
 80055b0:	080056f4 	.word	0x080056f4
 80055b4:	080056f4 	.word	0x080056f4
 80055b8:	080056f8 	.word	0x080056f8

080055bc <malloc>:
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <malloc+0xc>)
 80055be:	4601      	mov	r1, r0
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	f000 b80b 	b.w	80055dc <_malloc_r>
 80055c6:	bf00      	nop
 80055c8:	20000010 	.word	0x20000010

080055cc <memset>:
 80055cc:	4402      	add	r2, r0
 80055ce:	4603      	mov	r3, r0
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d100      	bne.n	80055d6 <memset+0xa>
 80055d4:	4770      	bx	lr
 80055d6:	f803 1b01 	strb.w	r1, [r3], #1
 80055da:	e7f9      	b.n	80055d0 <memset+0x4>

080055dc <_malloc_r>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	1ccd      	adds	r5, r1, #3
 80055e0:	f025 0503 	bic.w	r5, r5, #3
 80055e4:	3508      	adds	r5, #8
 80055e6:	2d0c      	cmp	r5, #12
 80055e8:	bf38      	it	cc
 80055ea:	250c      	movcc	r5, #12
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	4606      	mov	r6, r0
 80055f0:	db01      	blt.n	80055f6 <_malloc_r+0x1a>
 80055f2:	42a9      	cmp	r1, r5
 80055f4:	d903      	bls.n	80055fe <_malloc_r+0x22>
 80055f6:	230c      	movs	r3, #12
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	f000 f857 	bl	80056b0 <__malloc_lock>
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <_malloc_r+0xac>)
 8005604:	6814      	ldr	r4, [r2, #0]
 8005606:	4621      	mov	r1, r4
 8005608:	b991      	cbnz	r1, 8005630 <_malloc_r+0x54>
 800560a:	4c20      	ldr	r4, [pc, #128]	; (800568c <_malloc_r+0xb0>)
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	b91b      	cbnz	r3, 8005618 <_malloc_r+0x3c>
 8005610:	4630      	mov	r0, r6
 8005612:	f000 f83d 	bl	8005690 <_sbrk_r>
 8005616:	6020      	str	r0, [r4, #0]
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f000 f838 	bl	8005690 <_sbrk_r>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d124      	bne.n	800566e <_malloc_r+0x92>
 8005624:	230c      	movs	r3, #12
 8005626:	6033      	str	r3, [r6, #0]
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f842 	bl	80056b2 <__malloc_unlock>
 800562e:	e7e4      	b.n	80055fa <_malloc_r+0x1e>
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	1b5b      	subs	r3, r3, r5
 8005634:	d418      	bmi.n	8005668 <_malloc_r+0x8c>
 8005636:	2b0b      	cmp	r3, #11
 8005638:	d90f      	bls.n	800565a <_malloc_r+0x7e>
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	50cd      	str	r5, [r1, r3]
 800563e:	18cc      	adds	r4, r1, r3
 8005640:	4630      	mov	r0, r6
 8005642:	f000 f836 	bl	80056b2 <__malloc_unlock>
 8005646:	f104 000b 	add.w	r0, r4, #11
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	f020 0007 	bic.w	r0, r0, #7
 8005650:	1ac3      	subs	r3, r0, r3
 8005652:	d0d3      	beq.n	80055fc <_malloc_r+0x20>
 8005654:	425a      	negs	r2, r3
 8005656:	50e2      	str	r2, [r4, r3]
 8005658:	e7d0      	b.n	80055fc <_malloc_r+0x20>
 800565a:	428c      	cmp	r4, r1
 800565c:	684b      	ldr	r3, [r1, #4]
 800565e:	bf16      	itet	ne
 8005660:	6063      	strne	r3, [r4, #4]
 8005662:	6013      	streq	r3, [r2, #0]
 8005664:	460c      	movne	r4, r1
 8005666:	e7eb      	b.n	8005640 <_malloc_r+0x64>
 8005668:	460c      	mov	r4, r1
 800566a:	6849      	ldr	r1, [r1, #4]
 800566c:	e7cc      	b.n	8005608 <_malloc_r+0x2c>
 800566e:	1cc4      	adds	r4, r0, #3
 8005670:	f024 0403 	bic.w	r4, r4, #3
 8005674:	42a0      	cmp	r0, r4
 8005676:	d005      	beq.n	8005684 <_malloc_r+0xa8>
 8005678:	1a21      	subs	r1, r4, r0
 800567a:	4630      	mov	r0, r6
 800567c:	f000 f808 	bl	8005690 <_sbrk_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d0cf      	beq.n	8005624 <_malloc_r+0x48>
 8005684:	6025      	str	r5, [r4, #0]
 8005686:	e7db      	b.n	8005640 <_malloc_r+0x64>
 8005688:	20000094 	.word	0x20000094
 800568c:	20000098 	.word	0x20000098

08005690 <_sbrk_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4c06      	ldr	r4, [pc, #24]	; (80056ac <_sbrk_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4605      	mov	r5, r0
 8005698:	4608      	mov	r0, r1
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	f7fb fd76 	bl	800118c <_sbrk>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_sbrk_r+0x1a>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_sbrk_r+0x1a>
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000670 	.word	0x20000670

080056b0 <__malloc_lock>:
 80056b0:	4770      	bx	lr

080056b2 <__malloc_unlock>:
 80056b2:	4770      	bx	lr

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
