
stm32f7-drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d8  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e0  080078e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000070  08007958  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007958  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015833  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c2d  00000000  00000000  000358d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  00038500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  000397b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c90  00000000  00000000  0003a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd65  00000000  00000000  0005f588  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e205e  00000000  00000000  0006f2ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015134b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  001513c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080078a0 	.word	0x080078a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080078a0 	.word	0x080078a0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ADC_INIT>:
/* Function Summary: The input from the ADC handler will be piped directly to the inputVar via DMA.
 * Parameters: hadc - ADC handler for particular ADC pin. inputVar - Variable you want ADC values stored into.
 */

void ADC_INIT(ADC_HandleTypeDef* hadc, uint32_t* inputVar)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, inputVar, sizeof(*inputVar));
 800052a:	2204      	movs	r2, #4
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f001 fcc6 	bl	8001ec0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fc03 	bl	8001d40 <HAL_ADC_Start>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <ESC_INIT>:
#if defined(DSHOT150) || defined(DSHOT300) || defined(DSHOT600) || defined(DSHOT1200)

#define __DSHOT_CONSUME_BIT(__DSHOT_BYTE__, __BIT__) (__DSHOT_BYTE__ = (((__BIT__ & 0b1) == 0b1) ? DSHOT_HIGH_BIT : DSHOT_LOW_BIT))

ESC_CONTROLLER* ESC_INIT(TIM_HandleTypeDef* dmaTimerTick, TIM_HandleTypeDef* pwmTimer, DMA_HandleTypeDef* dma)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b088      	sub	sp, #32
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	dmaTimerTick->Instance->ARR = TIMER_ARR - 1;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f240 1267 	movw	r2, #359	; 0x167
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
	pwmTimer->Instance->ARR = TIMER_ARR - 1;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f240 1267 	movw	r2, #359	; 0x167
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(dmaTimerTick, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f005 fb67 	bl	8005c38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dmaTimerTick, TIM_CHANNEL_2);
 800056a:	2104      	movs	r1, #4
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f005 fb63 	bl	8005c38 <HAL_TIM_PWM_Start>
	int bytes = sizeof(ESC_CONTROLLER) * ESC_COUNT;
 8000572:	2360      	movs	r3, #96	; 0x60
 8000574:	61bb      	str	r3, [r7, #24]
	ESC_CONTROLLER* ESC_CONTROLLER = malloc(bytes);
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	4618      	mov	r0, r3
 800057a:	f007 f909 	bl	8007790 <malloc>
 800057e:	4603      	mov	r3, r0
 8000580:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < ESC_COUNT; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
 8000586:	e06b      	b.n	8000660 <ESC_INIT+0x11e>
	{
		ESC_CONTROLLER[i].Throttle = 0;
 8000588:	69fa      	ldr	r2, [r7, #28]
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	461a      	mov	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	4413      	add	r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		ESC_CONTROLLER[i].Channel = 4*i;
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	0099      	lsls	r1, r3, #2
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	461a      	mov	r2, r3
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
		ESC_CONTROLLER[i].Number = i;
 80005b4:	69fa      	ldr	r2, [r7, #28]
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	461a      	mov	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	4413      	add	r3, r2
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	609a      	str	r2, [r3, #8]
		ESC_CONTROLLER[i].Timer = pwmTimer;
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	4413      	add	r3, r2
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	60da      	str	r2, [r3, #12]
		ESC_CONTROLLER[i].DMA = &dma[i%2];
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	bfb8      	it	lt
 80005e6:	425b      	neglt	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	015b      	lsls	r3, r3, #5
 80005f2:	4619      	mov	r1, r3
 80005f4:	69fa      	ldr	r2, [r7, #28]
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	461a      	mov	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	4413      	add	r3, r2
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	440a      	add	r2, r1
 8000608:	611a      	str	r2, [r3, #16]
 		ESC_CONTROLLER[i].CCR = &(pwmTimer->Instance->CCR1) + i;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	0099      	lsls	r1, r3, #2
 8000616:	69fa      	ldr	r2, [r7, #28]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	461a      	mov	r2, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4413      	add	r3, r2
 8000626:	1842      	adds	r2, r0, r1
 8000628:	615a      	str	r2, [r3, #20]
		*ESC_CONTROLLER[i].CCR = 0;
 800062a:	69fa      	ldr	r2, [r7, #28]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	461a      	mov	r2, r3
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	4413      	add	r3, r2
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start(pwmTimer, ESC_CONTROLLER[i].Channel);
 8000640:	69fa      	ldr	r2, [r7, #28]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	461a      	mov	r2, r3
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	4413      	add	r3, r2
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	4619      	mov	r1, r3
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f005 faef 	bl	8005c38 <HAL_TIM_PWM_Start>
	for (int i = 0; i < ESC_COUNT; i++)
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3301      	adds	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	2b03      	cmp	r3, #3
 8000664:	dd90      	ble.n	8000588 <ESC_INIT+0x46>
	}
	return ESC_CONTROLLER;
 8000666:	697b      	ldr	r3, [r7, #20]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <makeDshotPacketBytes>:

uint16_t makeDshotPacketBytes(uint32_t value)
{
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint16_t packet = (value << 1) | 1;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	b29b      	uxth	r3, r3
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	b29b      	uxth	r3, r3
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	817b      	strh	r3, [r7, #10]
	int csum = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
	int csumData = value;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e009      	b.n	80006a8 <makeDshotPacketBytes+0x38>
	{
		csum ^= csumData; // xor data by nibbles
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	4053      	eors	r3, r2
 800069a:	617b      	str	r3, [r7, #20]
		csumData >>= 4;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	111b      	asrs	r3, r3, #4
 80006a0:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	ddf2      	ble.n	8000694 <makeDshotPacketBytes+0x24>
	}
	csum &= 0xf;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80006b6:	897b      	ldrh	r3, [r7, #10]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	817b      	strh	r3, [r7, #10]
	return packet;
 80006c6:	897b      	ldrh	r3, [r7, #10]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <ESC_UPDATE_THROTTLE>:

void ESC_UPDATE_THROTTLE(ESC_CONTROLLER* ESC, uint32_t throttle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	// Throttle cannot exceed 11 bits, so max value is 2047
	if (throttle > DSHOT_MAX_THROTTLE) throttle = DSHOT_MAX_THROTTLE;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006e4:	d302      	bcc.n	80006ec <ESC_UPDATE_THROTTLE+0x18>
 80006e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ea:	603b      	str	r3, [r7, #0]
	else if (throttle < DSHOT_MIN_THROTTLE) throttle = DSHOT_MIN_THROTTLE;
 	uint16_t dshotBytes = makeDshotPacketBytes(throttle);
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f7ff ffbf 	bl	8000670 <makeDshotPacketBytes>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	// 17th bit is to set CCR to 0 to keep it low between packets
	uint32_t dshotPacket[17] = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2244      	movs	r2, #68	; 0x44
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f007 f858 	bl	80077b6 <memset>
	dshotPacket[16] = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
	// Populate checksum bits
	for (int i = 15; i >= 0; i--)
 800070a:	230f      	movs	r3, #15
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
 800070e:	e018      	b.n	8000742 <ESC_UPDATE_THROTTLE+0x6e>
	{
		__DSHOT_CONSUME_BIT(dshotPacket[i], dshotBytes);
 8000710:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <ESC_UPDATE_THROTTLE+0x4e>
 800071c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000720:	e000      	b.n	8000724 <ESC_UPDATE_THROTTLE+0x50>
 8000722:	2287      	movs	r2, #135	; 0x87
 8000724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800072c:	440b      	add	r3, r1
 800072e:	f843 2c4c 	str.w	r2, [r3, #-76]
		dshotBytes >>= 1;
 8000732:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000736:	085b      	lsrs	r3, r3, #1
 8000738:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	for (int i = 15; i >= 0; i--)
 800073c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800073e:	3b01      	subs	r3, #1
 8000740:	653b      	str	r3, [r7, #80]	; 0x50
 8000742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000744:	2b00      	cmp	r3, #0
 8000746:	dae3      	bge.n	8000710 <ESC_UPDATE_THROTTLE+0x3c>
	}
	// Setup the DMA stream to send the dshotPacket bytes to the CCR
	// Clear transfer and half transfer complete flags
	__HAL_DMA_CLEAR_FLAG(ESC->DMA, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4 | DMA_FLAG_FEIF0_4 |
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <ESC_UPDATE_THROTTLE+0x10c>)
 8000752:	429a      	cmp	r2, r3
 8000754:	d903      	bls.n	800075e <ESC_UPDATE_THROTTLE+0x8a>
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <ESC_UPDATE_THROTTLE+0x110>)
 8000758:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <ESC_UPDATE_THROTTLE+0x114>)
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	e018      	b.n	8000790 <ESC_UPDATE_THROTTLE+0xbc>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <ESC_UPDATE_THROTTLE+0x118>)
 8000768:	429a      	cmp	r2, r3
 800076a:	d903      	bls.n	8000774 <ESC_UPDATE_THROTTLE+0xa0>
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <ESC_UPDATE_THROTTLE+0x110>)
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <ESC_UPDATE_THROTTLE+0x114>)
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	e00d      	b.n	8000790 <ESC_UPDATE_THROTTLE+0xbc>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <ESC_UPDATE_THROTTLE+0x11c>)
 800077e:	429a      	cmp	r2, r3
 8000780:	d903      	bls.n	800078a <ESC_UPDATE_THROTTLE+0xb6>
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <ESC_UPDATE_THROTTLE+0x120>)
 8000784:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <ESC_UPDATE_THROTTLE+0x114>)
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	e002      	b.n	8000790 <ESC_UPDATE_THROTTLE+0xbc>
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <ESC_UPDATE_THROTTLE+0x120>)
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <ESC_UPDATE_THROTTLE+0x114>)
 800078e:	609a      	str	r2, [r3, #8]
									DMA_FLAG_TCIF3_7 | DMA_FLAG_HTIF3_7 | DMA_FLAG_FEIF3_7));
	ESC->DMA->Instance->NDTR = 17;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2211      	movs	r2, #17
 8000798:	605a      	str	r2, [r3, #4]
	ESC->DMA->Instance->M0AR = (uint32_t) dshotPacket;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f107 020c 	add.w	r2, r7, #12
 80007a4:	60da      	str	r2, [r3, #12]
	ESC->DMA->Instance->PAR = (uint32_t) ESC->CCR;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	609a      	str	r2, [r3, #8]
	__HAL_DMA_ENABLE(ESC->DMA);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
	while(ESC->DMA->Instance->CR & 0x1);
 80007c6:	bf00      	nop
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f7      	bne.n	80007c8 <ESC_UPDATE_THROTTLE+0xf4>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40026458 	.word	0x40026458
 80007e4:	40026400 	.word	0x40026400
 80007e8:	0c400031 	.word	0x0c400031
 80007ec:	400260b8 	.word	0x400260b8
 80007f0:	40026058 	.word	0x40026058
 80007f4:	40026000 	.word	0x40026000

080007f8 <RX_INIT>:
 */

#include "RX.h"

RX_CONTROLLER* RX_INIT(TIM_HandleTypeDef* timerSticks, TIM_HandleTypeDef* timerSwitches)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	RX_CONTROLLER* RX_CONTROLLER = malloc(sizeof(RX_CONTROLLER));
 8000802:	2004      	movs	r0, #4
 8000804:	f006 ffc4 	bl	8007790 <malloc>
 8000808:	4603      	mov	r3, r0
 800080a:	60fb      	str	r3, [r7, #12]
	RX_CONTROLLER->throttle = 0;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
	RX_CONTROLLER->pitch = 0;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
	RX_CONTROLLER->roll = 0;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	RX_CONTROLLER->yaw = 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
	RX_CONTROLLER->switchA = 0;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
	RX_CONTROLLER->switchB = 0;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
	RX_CONTROLLER->timerSticks = timerSticks;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	619a      	str	r2, [r3, #24]
	RX_CONTROLLER->timerSwitches = timerSwitches;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	61da      	str	r2, [r3, #28]
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_1);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fa72 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_2);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fa6c 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_3);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	2108      	movs	r1, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fa66 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSticks, TIM_CHANNEL_4);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	210c      	movs	r1, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fa60 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_1);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f005 fa5a 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(RX_CONTROLLER->timerSwitches, TIM_CHANNEL_4);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	210c      	movs	r1, #12
 800087e:	4618      	mov	r0, r3
 8000880:	f005 fa54 	bl	8005d2c <HAL_TIM_IC_Start_IT>
	return RX_CONTROLLER;
 8000884:	68fb      	ldr	r3, [r7, #12]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <XLG_INIT>:
  * @param writeSize	write here
  * @retval void
  */

void XLG_INIT(I2C_HandleTypeDef* i2c)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	uint8_t writeThis = 0b10000000;
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL1_XL, &writeThis, 1);
 800089a:	f107 020f 	add.w	r2, r7, #15
 800089e:	2301      	movs	r3, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f80d 	bl	80008c2 <XLG_WRITE>
	writeThis = 0b10001100;
 80008a8:	238c      	movs	r3, #140	; 0x8c
 80008aa:	73fb      	strb	r3, [r7, #15]
	XLG_WRITE(i2c, CTRL2_G, &writeThis, 1);
 80008ac:	f107 020f 	add.w	r2, r7, #15
 80008b0:	2301      	movs	r3, #1
 80008b2:	2111      	movs	r1, #17
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f804 	bl	80008c2 <XLG_WRITE>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <XLG_WRITE>:

void XLG_WRITE(I2C_HandleTypeDef* i2c, uint8_t addr, uint8_t* writeByte, uint32_t writeSize)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	460b      	mov	r3, r1
 80008d0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write_DMA(i2c, XLG_I2C_ADDR, addr, XLG_REG_SIZE, writeByte, writeSize);
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	21d4      	movs	r1, #212	; 0xd4
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f002 fda3 	bl	8003430 <HAL_I2C_Mem_Write_DMA>
	while(i2c->hdmatx->State != HAL_DMA_STATE_READY);
 80008ea:	bf00      	nop
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d1f8      	bne.n	80008ec <XLG_WRITE+0x2a>
	i2c->State = HAL_I2C_STATE_READY;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2220      	movs	r2, #32
 80008fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b08f      	sub	sp, #60	; 0x3c
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f001 f974 	bl	8001bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f8cb 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 fc69 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800091e:	f000 fc31 	bl	8001184 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000922:	f000 fbf7 	bl	8001114 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000926:	f000 fc25 	bl	8001174 <MX_USB_OTG_FS_USB_Init>
  MX_TIM4_Init();
 800092a:	f000 fb85 	bl	8001038 <MX_TIM4_Init>
  MX_ADC1_Init();
 800092e:	f000 f957 	bl	8000be0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000932:	f000 f9a7 	bl	8000c84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000936:	f000 fb03 	bl	8000f40 <MX_TIM3_Init>
  MX_TIM2_Init();
 800093a:	f000 fa83 	bl	8000e44 <MX_TIM2_Init>
  MX_TIM1_Init();
 800093e:	f000 f9e1 	bl	8000d04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ADC_INIT(&hadc1, &throttlePot);
 8000942:	4951      	ldr	r1, [pc, #324]	; (8000a88 <main+0x17c>)
 8000944:	4851      	ldr	r0, [pc, #324]	; (8000a8c <main+0x180>)
 8000946:	f7ff fdeb 	bl	8000520 <ADC_INIT>
  XLG_INIT(&hi2c1);
 800094a:	4851      	ldr	r0, [pc, #324]	; (8000a90 <main+0x184>)
 800094c:	f7ff ff9f 	bl	800088e <XLG_INIT>
  escDMASet[0] = hdma_tim4_ch1;
 8000950:	4a50      	ldr	r2, [pc, #320]	; (8000a94 <main+0x188>)
 8000952:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <main+0x18c>)
 8000954:	4610      	mov	r0, r2
 8000956:	4619      	mov	r1, r3
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	461a      	mov	r2, r3
 800095c:	f006 ff20 	bl	80077a0 <memcpy>
  escDMASet[1] = hdma_tim4_ch2;
 8000960:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <main+0x188>)
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <main+0x190>)
 8000964:	3360      	adds	r3, #96	; 0x60
 8000966:	4611      	mov	r1, r2
 8000968:	2260      	movs	r2, #96	; 0x60
 800096a:	4618      	mov	r0, r3
 800096c:	f006 ff18 	bl	80077a0 <memcpy>
  ESC_CONTROLLER* myESCSet = ESC_INIT(&htim4, &htim3, escDMASet);
 8000970:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <main+0x188>)
 8000972:	494b      	ldr	r1, [pc, #300]	; (8000aa0 <main+0x194>)
 8000974:	484b      	ldr	r0, [pc, #300]	; (8000aa4 <main+0x198>)
 8000976:	f7ff fde4 	bl	8000542 <ESC_INIT>
 800097a:	62f8      	str	r0, [r7, #44]	; 0x2c
  RX_CONTROLLER* myRX = RX_INIT(&htim1, &htim2);
 800097c:	494a      	ldr	r1, [pc, #296]	; (8000aa8 <main+0x19c>)
 800097e:	484b      	ldr	r0, [pc, #300]	; (8000aac <main+0x1a0>)
 8000980:	f7ff ff3a 	bl	80007f8 <RX_INIT>
 8000984:	62b8      	str	r0, [r7, #40]	; 0x28


  const int patternSize = 5;
 8000986:	2305      	movs	r3, #5
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  int startTime = HAL_GetTick();
 800098a:	f001 f989 	bl	8001ca0 <HAL_GetTick>
 800098e:	4603      	mov	r3, r0
 8000990:	623b      	str	r3, [r7, #32]
  const int period = 1000;
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t pattern[patternSize];
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b01      	subs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	f04f 0400 	mov.w	r4, #0
 80009ae:	0154      	lsls	r4, r2, #5
 80009b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80009b4:	014b      	lsls	r3, r1, #5
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	f04f 0400 	mov.w	r4, #0
 80009c6:	0154      	lsls	r4, r2, #5
 80009c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80009cc:	014b      	lsls	r3, r1, #5
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	3303      	adds	r3, #3
 80009d4:	3307      	adds	r3, #7
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	ebad 0d03 	sub.w	sp, sp, r3
 80009de:	466b      	mov	r3, sp
 80009e0:	3303      	adds	r3, #3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
  pattern[0] = DSHOT_CMD_LED0_ON;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	2216      	movs	r2, #22
 80009ec:	601a      	str	r2, [r3, #0]
  pattern[1] = DSHOT_CMD_LED0_OFF;
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	221a      	movs	r2, #26
 80009f2:	605a      	str	r2, [r3, #4]
  pattern[2] = DSHOT_CMD_LED1_ON;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2217      	movs	r2, #23
 80009f8:	609a      	str	r2, [r3, #8]
  pattern[3] = DSHOT_CMD_LED1_OFF;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	221b      	movs	r2, #27
 80009fe:	60da      	str	r2, [r3, #12]
  pattern[4] = DSHOT_CMD_LED2_ON;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	2218      	movs	r2, #24
 8000a04:	611a      	str	r2, [r3, #16]
  pattern[5] = DSHOT_CMD_LED2_OFF;
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	221c      	movs	r2, #28
 8000a0a:	615a      	str	r2, [r3, #20]
  pattern[6] = DSHOT_CMD_LED3_ON;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2219      	movs	r2, #25
 8000a10:	619a      	str	r2, [r3, #24]
  pattern[7] = DSHOT_CMD_LED3_OFF;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	221d      	movs	r2, #29
 8000a16:	61da      	str	r2, [r3, #28]



  uint32_t testThrottle = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  int prevTimeSlot = -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int currentTime = HAL_GetTick();
 8000a22:	f001 f93d 	bl	8001ca0 <HAL_GetTick>
 8000a26:	4603      	mov	r3, r0
 8000a28:	60bb      	str	r3, [r7, #8]
//	  {
//		  prevTimeSlot = currentTimeSlot;
//		  ++testThrottle;
//	  }

	  int patternIndex = ((currentTime - startTime) / period) % patternSize;
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	fb93 f2f2 	sdiv	r2, r3, r2
 8000a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a3e:	fb01 f202 	mul.w	r2, r1, r2
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	607b      	str	r3, [r7, #4]
	  uint32_t testThrottle = pattern[patternIndex];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30

	  if (testThrottle > 2047)
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a56:	d301      	bcc.n	8000a5c <main+0x150>
	  {
		  testThrottle = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
	  }
	  ESC_UPDATE_THROTTLE(&myESCSet[2], testThrottle);
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	3330      	adds	r3, #48	; 0x30
 8000a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe36 	bl	80006d4 <ESC_UPDATE_THROTTLE>
	  for (int i = 0; i < 10; i++) ESC_UPDATE_THROTTLE(&myESCSet[2], DSHOT_CMD_SAVE_SETTINGS);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6c:	e008      	b.n	8000a80 <main+0x174>
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	3330      	adds	r3, #48	; 0x30
 8000a72:	210c      	movs	r1, #12
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe2d 	bl	80006d4 <ESC_UPDATE_THROTTLE>
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	ddf3      	ble.n	8000a6e <main+0x162>
  {
 8000a86:	e7cc      	b.n	8000a22 <main+0x116>
 8000a88:	200004f4 	.word	0x200004f4
 8000a8c:	20000364 	.word	0x20000364
 8000a90:	200002d8 	.word	0x200002d8
 8000a94:	200001b8 	.word	0x200001b8
 8000a98:	20000494 	.word	0x20000494
 8000a9c:	20000098 	.word	0x20000098
 8000aa0:	20000324 	.word	0x20000324
 8000aa4:	200000f8 	.word	0x200000f8
 8000aa8:	20000454 	.word	0x20000454
 8000aac:	200003b4 	.word	0x200003b4

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0b4      	sub	sp, #208	; 0xd0
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fe79 	bl	80077b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 fe6a 	bl	80077b6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae2:	f003 ffe3 	bl	8004aac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <SystemClock_Config+0x124>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <SystemClock_Config+0x124>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <SystemClock_Config+0x124>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <SystemClock_Config+0x128>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <SystemClock_Config+0x128>)
 8000b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <SystemClock_Config+0x128>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b32:	2308      	movs	r3, #8
 8000b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000b38:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b46:	2309      	movs	r3, #9
 8000b48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f80b 	bl	8004b6c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b5c:	f000 fc48 	bl	80013f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b60:	f003 ffb4 	bl	8004acc <HAL_PWREx_EnableOverDrive>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b6a:	f000 fc41 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b94:	2107      	movs	r1, #7
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 fa8c 	bl	80050b4 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000ba2:	f000 fc25 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <SystemClock_Config+0x12c>)
 8000ba8:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 fc71 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000bc8:	f000 fc12 	bl	80013f0 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	37d0      	adds	r7, #208	; 0xd0
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000
 8000bdc:	00204100 	.word	0x00204100

08000be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <MX_ADC1_Init+0x9c>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <MX_ADC1_Init+0xa0>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c42:	f001 f839 	bl	8001cb8 <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fbd0 	bl	80013f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c50:	2309      	movs	r3, #9
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC1_Init+0x98>)
 8000c62:	f001 fa25 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c6c:	f000 fbc0 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000364 	.word	0x20000364
 8000c7c:	40012000 	.word	0x40012000
 8000c80:	0f000001 	.word	0x0f000001

08000c84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_I2C1_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <MX_I2C1_Init+0x7c>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 212;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c96:	22d4      	movs	r2, #212	; 0xd4
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cc0:	f002 fb26 	bl	8003310 <HAL_I2C_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cca:	f000 fb91 	bl	80013f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000cd2:	f003 fe54 	bl	800497e <HAL_I2CEx_ConfigAnalogFilter>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fb88 	bl	80013f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_I2C1_Init+0x74>)
 8000ce4:	f003 fe96 	bl	8004a14 <HAL_I2CEx_ConfigDigitalFilter>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fb7f 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002d8 	.word	0x200002d8
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	20404768 	.word	0x20404768

08000d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d34:	4a42      	ldr	r2, [pc, #264]	; (8000e40 <MX_TIM1_Init+0x13c>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d3a:	22d7      	movs	r2, #215	; 0xd7
 8000d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d46:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5e:	4837      	ldr	r0, [pc, #220]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d60:	f004 fee8 	bl	8005b34 <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 fb41 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d6e:	4833      	ldr	r0, [pc, #204]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d70:	f004 ffa6 	bl	8005cc0 <HAL_TIM_IC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d7a:	f000 fb39 	bl	80013f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000d82:	2370      	movs	r3, #112	; 0x70
 8000d84:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4828      	ldr	r0, [pc, #160]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000d9a:	f005 fa67 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000da4:	f000 fb24 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4820      	ldr	r0, [pc, #128]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000dbc:	f005 ffec 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000dc6:	f000 fb13 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4816      	ldr	r0, [pc, #88]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000de2:	f005 f88f 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000dec:	f000 fb00 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	2204      	movs	r2, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000df8:	f005 f884 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000e02:	f000 faf5 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	2208      	movs	r2, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000e0e:	f005 f879 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000e18:	f000 faea 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	220c      	movs	r2, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM1_Init+0x138>)
 8000e24:	f005 f86e 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e2e:	f000 fadf 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	; 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200003b4 	.word	0x200003b4
 8000e40:	40010000 	.word	0x40010000

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8000e7a:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e7c:	22d7      	movs	r2, #215	; 0xd7
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e88:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9a:	4828      	ldr	r0, [pc, #160]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000e9c:	f004 fe4a 	bl	8005b34 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000ea6:	f000 faa3 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000eac:	f004 ff08 	bl	8005cc0 <HAL_TIM_IC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000eb6:	f000 fa9b 	bl	80013f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000eca:	f005 f9cf 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f000 fa8c 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000ee8:	f005 ff56 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ef2:	f000 fa7d 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000efa:	2301      	movs	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000f0e:	f004 fff9 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f18:	f000 fa6a 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	220c      	movs	r2, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_TIM2_Init+0xf8>)
 8000f24:	f004 ffee 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f2e:	f000 fa5f 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000454 	.word	0x20000454

08000f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f66:	4a33      	ldr	r2, [pc, #204]	; (8001034 <MX_TIM3_Init+0xf4>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f78:	f240 1267 	movw	r2, #359	; 0x167
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f8a:	4829      	ldr	r0, [pc, #164]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000f8c:	f004 fe28 	bl	8005be0 <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f000 fa2b 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000faa:	f005 fef5 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fb4:	f000 fa1c 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb8:	2360      	movs	r3, #96	; 0x60
 8000fba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000fd0:	f005 f834 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fda:	f000 fa09 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000fe6:	f005 f829 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ff0:	f000 f9fe 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM3_Init+0xf0>)
 8000ffc:	f005 f81e 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001006:	f000 f9f3 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	220c      	movs	r2, #12
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM3_Init+0xf0>)
 8001012:	f005 f813 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800101c:	f000 f9e8 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM3_Init+0xf0>)
 8001022:	f000 fc41 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000324 	.word	0x20000324
 8001034:	40000400 	.word	0x40000400

08001038 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <MX_TIM4_Init+0xd4>)
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <MX_TIM4_Init+0xd8>)
 8001060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_TIM4_Init+0xd4>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <MX_TIM4_Init+0xd4>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 359;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_TIM4_Init+0xd4>)
 8001070:	f240 1267 	movw	r2, #359	; 0x167
 8001074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_TIM4_Init+0xd4>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_TIM4_Init+0xd4>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <MX_TIM4_Init+0xd4>)
 8001084:	f004 fd81 	bl	8005b8a <HAL_TIM_OC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800108e:	f000 f9af 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <MX_TIM4_Init+0xd4>)
 80010a2:	f005 fe79 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80010ac:	f000 f9a0 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80010b0:	2310      	movs	r3, #16
 80010b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_TIM4_Init+0xd4>)
 80010c8:	f004 fe9e 	bl	8005e08 <HAL_TIM_OC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f000 f98d 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2204      	movs	r2, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_TIM4_Init+0xd4>)
 80010de:	f004 fe93 	bl	8005e08 <HAL_TIM_OC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80010e8:	f000 f982 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  // Set DMA Transfers to 17 with DBL and destination to CCR1 (15) with DBA
  htim4.Instance->DCR =  TIM_DCR_DBA_1 | TIM_DCR_DBA_2 | TIM_DCR_DBA_3; // Transfer at CCR2, 1 transfer
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_TIM4_Init+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	220e      	movs	r2, #14
 80010f2:	649a      	str	r2, [r3, #72]	; 0x48
  // Enable Update DMA Request
  //htim4.Instance->DIER = TIM_DIER_UDE;
  // Enable DMA requests on CH1
  htim4.Instance->DIER = TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <MX_TIM4_Init+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010fc:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM4_Init+0xd4>)
 8001100:	f000 fbd2 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000f8 	.word	0x200000f8
 8001110:	40000800 	.word	0x40000800

08001114 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_USART3_UART_Init+0x58>)
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_USART3_UART_Init+0x5c>)
 800111c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_USART3_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART3_UART_Init+0x58>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART3_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART3_UART_Init+0x58>)
 8001158:	f005 feac 	bl	8006eb4 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001162:	f000 f945 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000138 	.word	0x20000138
 8001170:	40004800 	.word	0x40004800

08001174 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_DMA_Init+0x68>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <MX_DMA_Init+0x68>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_DMA_Init+0x68>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	200b      	movs	r0, #11
 80011a8:	f001 fb23 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ac:	200b      	movs	r0, #11
 80011ae:	f001 fb3c 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	200e      	movs	r0, #14
 80011b8:	f001 fb1b 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011bc:	200e      	movs	r0, #14
 80011be:	f001 fb34 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2010      	movs	r0, #16
 80011c8:	f001 fb13 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011cc:	2010      	movs	r0, #16
 80011ce:	f001 fb2c 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2011      	movs	r0, #17
 80011d8:	f001 fb0b 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011dc:	2011      	movs	r0, #17
 80011de:	f001 fb24 	bl	800282a <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a67      	ldr	r2, [pc, #412]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a61      	ldr	r2, [pc, #388]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001266:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <MX_GPIO_Init+0x1b8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <MX_GPIO_Init+0x1bc>)
 80012ce:	f002 f805 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	4836      	ldr	r0, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x1c0>)
 80012d8:	f002 f800 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <MX_GPIO_Init+0x1c4>)
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	4831      	ldr	r0, [pc, #196]	; (80013b8 <MX_GPIO_Init+0x1c8>)
 80012f2:	f001 fe59 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <MX_GPIO_Init+0x1cc>)
 800130c:	f001 fe4c 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001310:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <MX_GPIO_Init+0x1bc>)
 800132a:	f001 fe3d 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_GPIO_Init+0x1c0>)
 8001346:	f001 fe2f 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0x1c0>)
 800135e:	f001 fe23 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8001362:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001374:	230a      	movs	r3, #10
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <MX_GPIO_Init+0x1d0>)
 8001380:	f001 fe12 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <MX_GPIO_Init+0x1d0>)
 800139a:	f001 fe05 	bl	8002fa8 <HAL_GPIO_Init>

}
 800139e:	bf00      	nop
 80013a0:	3738      	adds	r7, #56	; 0x38
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	10110000 	.word	0x10110000
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
    void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	__NOP();
 80013cc:	bf00      	nop
    }
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_ADC_ConvCpltCallback>:

    void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
    {
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
    __NOP();
 80013e2:	bf00      	nop
    }
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x44>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x44>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x44>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_MspInit+0x44>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_MspInit+0x44>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_MspInit+0x44>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0x74>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d123      	bne.n	80014b2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_ADC_MspInit+0x78>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_THROTTLE_CONTROL_Pin;
 800149a:	2302      	movs	r3, #2
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149e:	2303      	movs	r3, #3
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_THROTTLE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_ADC_MspInit+0x7c>)
 80014ae:	f001 fd7b 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40012000 	.word	0x40012000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_I2C_MspInit+0x168>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	f040 809d 	bne.w	8001626 <HAL_I2C_MspInit+0x15e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a50      	ldr	r2, [pc, #320]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4845      	ldr	r0, [pc, #276]	; (8001638 <HAL_I2C_MspInit+0x170>)
 8001522:	f001 fd41 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_I2C_MspInit+0x16c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001540:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <HAL_I2C_MspInit+0x178>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800154a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_I2C_MspInit+0x174>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_I2C_MspInit+0x174>)
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_I2C_MspInit+0x174>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001574:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001578:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_I2C_MspInit+0x174>)
 800157c:	2204      	movs	r2, #4
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001582:	2203      	movs	r2, #3
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001588:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001590:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001596:	4829      	ldr	r0, [pc, #164]	; (800163c <HAL_I2C_MspInit+0x174>)
 8001598:	f001 f962 	bl	8002860 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 80015a2:	f7ff ff25 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_I2C_MspInit+0x174>)
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_I2C_MspInit+0x174>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_I2C_MspInit+0x180>)
 80015b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015ec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015f6:	2203      	movs	r2, #3
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 80015fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 8001604:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 800160c:	f001 f928 	bl	8002860 <HAL_DMA_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_MspInit+0x152>
    {
      Error_Handler();
 8001616:	f7ff feeb 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
 8001620:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_I2C_MspInit+0x17c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400
 800163c:	200003f4 	.word	0x200003f4
 8001640:	40026088 	.word	0x40026088
 8001644:	20000278 	.word	0x20000278
 8001648:	400260a0 	.word	0x400260a0

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2e      	ldr	r2, [pc, #184]	; (8001724 <HAL_TIM_Base_MspInit+0xd8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d129      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a2d      	ldr	r2, [pc, #180]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 800169e:	f44f 43d5 	mov.w	r3, #27264	; 0x6a80
 80016a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481c      	ldr	r0, [pc, #112]	; (800172c <HAL_TIM_Base_MspInit+0xe0>)
 80016bc:	f001 fc74 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016c0:	e02c      	b.n	800171c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ca:	d127      	bne.n	800171c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_TIM_Base_MspInit+0xdc>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016fc:	2309      	movs	r3, #9
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <HAL_TIM_Base_MspInit+0xe4>)
 8001718:	f001 fc46 	bl	8002fa8 <HAL_GPIO_Init>
}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	; 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010000 	.word	0x40010000
 8001728:	40023800 	.word	0x40023800
 800172c:	40021000 	.word	0x40021000
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_TIM_PWM_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40000400 	.word	0x40000400
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a43      	ldr	r2, [pc, #268]	; (8001890 <HAL_TIM_OC_MspInit+0x11c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d17f      	bne.n	8001886 <HAL_TIM_OC_MspInit+0x112>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_TIM_OC_MspInit+0x120>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_TIM_OC_MspInit+0x120>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <HAL_TIM_OC_MspInit+0x120>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017a0:	4a3e      	ldr	r2, [pc, #248]	; (800189c <HAL_TIM_OC_MspInit+0x128>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80017a4:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ac:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017dc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017e0:	2204      	movs	r2, #4
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017e6:	2203      	movs	r2, #3
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80017f6:	4828      	ldr	r0, [pc, #160]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 80017f8:	f001 f832 	bl	8002860 <HAL_DMA_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_TIM_OC_MspInit+0x92>
    {
      Error_Handler();
 8001802:	f7ff fdf5 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_TIM_OC_MspInit+0x124>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_TIM_OC_MspInit+0x130>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800181a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800181e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800182e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001832:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800183a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800183e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001842:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800184c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001850:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001854:	2204      	movs	r2, #4
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800185a:	2203      	movs	r2, #3
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800186c:	f000 fff8 	bl	8002860 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_TIM_OC_MspInit+0x106>
    {
      Error_Handler();
 8001876:	f7ff fdbb 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_TIM_OC_MspInit+0x12c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40000800 	.word	0x40000800
 8001894:	40023800 	.word	0x40023800
 8001898:	20000494 	.word	0x20000494
 800189c:	40026010 	.word	0x40026010
 80018a0:	20000098 	.word	0x20000098
 80018a4:	40026058 	.word	0x40026058

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <HAL_TIM_MspPostInit+0x11c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d155      	bne.n	8001976 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_1_Pin|TIM_3_CH1_MOTOR_2_Pin;
 8001912:	23c0      	movs	r3, #192	; 0xc0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4827      	ldr	r0, [pc, #156]	; (80019cc <HAL_TIM_MspPostInit+0x124>)
 800192e:	f001 fb3b 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_3_Pin;
 8001932:	2301      	movs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001942:	2302      	movs	r3, #2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_3_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	4820      	ldr	r0, [pc, #128]	; (80019d0 <HAL_TIM_MspPostInit+0x128>)
 800194e:	f001 fb2b 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_3_CH1_MOTOR_4_Pin;
 8001952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001964:	2302      	movs	r3, #2
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_3_CH1_MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4819      	ldr	r0, [pc, #100]	; (80019d4 <HAL_TIM_MspPostInit+0x12c>)
 8001970:	f001 fb1a 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001974:	e021      	b.n	80019ba <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM4)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_TIM_MspPostInit+0x130>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d11c      	bne.n	80019ba <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_TIM_MspPostInit+0x120>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_DMA_LATCH_Pin|TIM4_CH2_MOTOR_1_Pin;
 8001998:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_TIM_MspPostInit+0x134>)
 80019b6:	f001 faf7 	bl	8002fa8 <HAL_GPIO_Init>
}
 80019ba:	bf00      	nop
 80019bc:	3730      	adds	r7, #48	; 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40020c00 	.word	0x40020c00

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_UART_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a44:	2307      	movs	r3, #7
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_UART_MspInit+0x84>)
 8001a50:	f001 faaa 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40004800 	.word	0x40004800
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020c00 	.word	0x40020c00

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f8dc 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream0_IRQHandler+0x10>)
 8001aca:	f000 fff9 	bl	8002ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000494 	.word	0x20000494

08001ad8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ade:	f000 ffef 	bl	8002ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000098 	.word	0x20000098

08001aec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Stream5_IRQHandler+0x10>)
 8001af2:	f000 ffe5 	bl	8002ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200003f4 	.word	0x200003f4

08001b00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Stream6_IRQHandler+0x10>)
 8001b06:	f000 ffdb 	bl	8002ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000278 	.word	0x20000278

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f005 fdfa 	bl	800773c <__errno>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20040000 	.word	0x20040000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	2000008c 	.word	0x2000008c
 8001b7c:	20000508 	.word	0x20000508

08001b80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <SystemInit+0x28>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <SystemInit+0x28>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SystemInit+0x28>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bb2:	e003      	b.n	8001bbc <LoopCopyDataInit>

08001bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bba:	3104      	adds	r1, #4

08001bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc4:	d3f6      	bcc.n	8001bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc8:	e002      	b.n	8001bd0 <LoopFillZerobss>

08001bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bcc:	f842 3b04 	str.w	r3, [r2], #4

08001bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd4:	d3f9      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff ffd3 	bl	8001b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f005 fdb5 	bl	8007748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7fe fe95 	bl	800090c <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001be8:	080078e8 	.word	0x080078e8
  ldr  r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bf0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001bf4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001bf8:	20000508 	.word	0x20000508

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>

08001bfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c02:	2003      	movs	r0, #3
 8001c04:	f000 fdea 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f805 	bl	8001c18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c0e:	f7ff fbf7 	bl	8001400 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fe05 	bl	8002846 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 fdcd 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000500 	.word	0x20000500

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000500 	.word	0x20000500

08001cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e031      	b.n	8001d32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fbb6 	bl	8001448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_ADC_Init+0x84>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	f043 0202 	orr.w	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fb1c 	bl	8002344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
 8001d22:	e001      	b.n	8001d28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	ffffeefd 	.word	0xffffeefd

08001d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Start+0x1a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0a0      	b.n	8001e9c <HAL_ADC_Start+0x15c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d018      	beq.n	8001da2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_ADC_Start+0x168>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a49      	ldr	r2, [pc, #292]	; (8001eac <HAL_ADC_Start+0x16c>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0c9a      	lsrs	r2, r3, #18
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d174      	bne.n	8001e9a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <HAL_ADC_Start+0x170>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dea:	d106      	bne.n	8001dfa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f023 0206 	bic.w	r2, r3, #6
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44
 8001df8:	e002      	b.n	8001e00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_ADC_Start+0x174>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d136      	bne.n	8001e9a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e02d      	b.n	8001e9a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_ADC_Start+0x178>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10e      	bne.n	8001e66 <HAL_ADC_Start+0x126>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_ADC_Start+0x174>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_ADC_Start+0x17c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10e      	bne.n	8001e9a <HAL_ADC_Start+0x15a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e98:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	fffff8fe 	.word	0xfffff8fe
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	40012000 	.word	0x40012000
 8001ebc:	40012200 	.word	0x40012200

08001ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Start_DMA+0x1e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e0c7      	b.n	800206e <HAL_ADC_Start_DMA+0x1ae>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d018      	beq.n	8001f26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f04:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_ADC_Start_DMA+0x1b8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5c      	ldr	r2, [pc, #368]	; (800207c <HAL_ADC_Start_DMA+0x1bc>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9a      	lsrs	r2, r3, #18
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 809b 	bne.w	800206c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_ADC_Start_DMA+0x1c0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d106      	bne.n	8001f80 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f023 0206 	bic.w	r2, r3, #6
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_ADC_Start_DMA+0x1c4>)
 8001f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_ADC_Start_DMA+0x1c8>)
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	4a3a      	ldr	r2, [pc, #232]	; (800208c <HAL_ADC_Start_DMA+0x1cc>)
 8001fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	334c      	adds	r3, #76	; 0x4c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f000 fcec 	bl	80029bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_ADC_Start_DMA+0x1d0>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d136      	bne.n	800206c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	e02d      	b.n	800206c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_ADC_Start_DMA+0x1d4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10e      	bne.n	8002038 <HAL_ADC_Start_DMA+0x178>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002036:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_ADC_Start_DMA+0x1d0>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d113      	bne.n	800206c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_ADC_Start_DMA+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10e      	bne.n	800206c <HAL_ADC_Start_DMA+0x1ac>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800206a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000
 800207c:	431bde83 	.word	0x431bde83
 8002080:	fffff8fe 	.word	0xfffff8fe
 8002084:	08002539 	.word	0x08002539
 8002088:	080025f3 	.word	0x080025f3
 800208c:	0800260f 	.word	0x0800260f
 8002090:	40012300 	.word	0x40012300
 8002094:	40012000 	.word	0x40012000
 8002098:	40012200 	.word	0x40012200

0800209c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e12a      	b.n	8002322 <HAL_ADC_ConfigChannel+0x272>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d93a      	bls.n	8002152 <HAL_ADC_ConfigChannel+0xa2>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e4:	d035      	beq.n	8002152 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68d9      	ldr	r1, [r3, #12]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	3b1e      	subs	r3, #30
 80020fc:	2207      	movs	r2, #7
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	400a      	ands	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a87      	ldr	r2, [pc, #540]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	061a      	lsls	r2, r3, #24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212a:	e035      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	4603      	mov	r3, r0
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4403      	add	r3, r0
 8002144:	3b1e      	subs	r3, #30
 8002146:	409a      	lsls	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002150:	e022      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6919      	ldr	r1, [r3, #16]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6919      	ldr	r1, [r3, #16]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	4603      	mov	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4403      	add	r3, r0
 800218e:	409a      	lsls	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d824      	bhi.n	80021ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	221f      	movs	r2, #31
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b05      	subs	r3, #5
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	635a      	str	r2, [r3, #52]	; 0x34
 80021e8:	e04c      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d824      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b23      	subs	r3, #35	; 0x23
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
 800223a:	e023      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 800229e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x212>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d105      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d125      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x22e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d11c      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d111      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_ADC_ConfigChannel+0x28c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_ADC_ConfigChannel+0x290>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9a      	lsrs	r2, r3, #18
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800230a:	e002      	b.n	8002312 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	10000012 	.word	0x10000012
 8002334:	40012000 	.word	0x40012000
 8002338:	40012300 	.word	0x40012300
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800234c:	4b78      	ldr	r3, [pc, #480]	; (8002530 <ADC_Init+0x1ec>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a77      	ldr	r2, [pc, #476]	; (8002530 <ADC_Init+0x1ec>)
 8002352:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002356:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <ADC_Init+0x1ec>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4973      	ldr	r1, [pc, #460]	; (8002530 <ADC_Init+0x1ec>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4a58      	ldr	r2, [pc, #352]	; (8002534 <ADC_Init+0x1f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	e00f      	b.n	800243e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0202 	bic.w	r2, r2, #2
 800244c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	005a      	lsls	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800248a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	3b01      	subs	r3, #1
 8002498:	035a      	lsls	r2, r3, #13
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e007      	b.n	80024b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	051a      	lsls	r2, r3, #20
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f6:	025a      	lsls	r2, r3, #9
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	029a      	lsls	r2, r3, #10
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40012300 	.word	0x40012300
 8002534:	0f000001 	.word	0x0f000001

08002538 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d13c      	bne.n	80025cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12b      	bne.n	80025c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002570:	2b00      	cmp	r3, #0
 8002572:	d127      	bne.n	80025c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800258c:	2b00      	cmp	r3, #0
 800258e:	d119      	bne.n	80025c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0220 	bic.w	r2, r2, #32
 800259e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7fe ff08 	bl	80013da <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ca:	e00e      	b.n	80025ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff fd5f 	bl	800209c <HAL_ADC_ErrorCallback>
}
 80025de:	e004      	b.n	80025ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fe fedf 	bl	80013c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fd34 	bl	800209c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	4313      	orrs	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00
 8002680:	05fa0000 	.word	0x05fa0000

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff3e 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff31 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff fa18 	bl	8001ca0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e099      	b.n	80029b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289c:	e00f      	b.n	80028be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289e:	f7ff f9ff 	bl	8001ca0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d908      	bls.n	80028be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e078      	b.n	80029b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e8      	bne.n	800289e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_DMA_Init+0x158>)
 80028d8:	4013      	ands	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b04      	cmp	r3, #4
 8002950:	d117      	bne.n	8002982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 faa5 	bl	8002eb4 <DMA_CheckFifoParam>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800297e:	2301      	movs	r3, #1
 8002980:	e016      	b.n	80029b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa5c 	bl	8002e48 <DMA_CalcBaseAndBitshift>
 8002990:	4603      	mov	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	223f      	movs	r2, #63	; 0x3f
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	e010803f 	.word	0xe010803f

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Start_IT+0x26>
 80029de:	2302      	movs	r3, #2
 80029e0:	e048      	b.n	8002a74 <HAL_DMA_Start_IT+0xb8>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d137      	bne.n	8002a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f9ee 	bl	8002dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	223f      	movs	r2, #63	; 0x3f
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0216 	orr.w	r2, r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e005      	b.n	8002a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d004      	beq.n	8002a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00c      	b.n	8002ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_DMA_IRQHandler+0x258>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a92      	ldr	r2, [pc, #584]	; (8002d1c <HAL_DMA_IRQHandler+0x25c>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2208      	movs	r2, #8
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2208      	movs	r2, #8
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2204      	movs	r2, #4
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2204      	movs	r2, #4
 8002b86:	409a      	lsls	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d043      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03c      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2210      	movs	r2, #16
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d108      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d024      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
 8002bee:	e01f      	b.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01b      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
 8002c00:	e016      	b.n	8002c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0208 	bic.w	r2, r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2220      	movs	r2, #32
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 808e 	beq.w	8002d5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8086 	beq.w	8002d5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2220      	movs	r2, #32
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d136      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0216 	bic.w	r2, r2, #22
 8002c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x1da>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0208 	bic.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	223f      	movs	r2, #63	; 0x3f
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d07d      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
        }
        return;
 8002cd6:	e078      	b.n	8002dca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01c      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d030      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e02b      	b.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
 8002d16:	e022      	b.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0210 	bic.w	r2, r2, #16
 8002d3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d032      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d022      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d307      	bcc.n	8002da6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f2      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x2ca>
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002da6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dca:	bf00      	nop
    }
  }
}
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop

08002dd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d108      	bne.n	8002e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e2a:	e007      	b.n	8002e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3b10      	subs	r3, #16
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <DMA_CalcBaseAndBitshift+0x64>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d908      	bls.n	8002e88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	1d1a      	adds	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58
 8002e86:	e006      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	080078d0 	.word	0x080078d0
 8002eb0:	fffffc00 	.word	0xfffffc00

08002eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11f      	bne.n	8002f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d855      	bhi.n	8002f80 <DMA_CheckFifoParam+0xcc>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <DMA_CheckFifoParam+0x28>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002eff 	.word	0x08002eff
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f81 	.word	0x08002f81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d045      	beq.n	8002f84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efc:	e042      	b.n	8002f84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f06:	d13f      	bne.n	8002f88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e03c      	b.n	8002f88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d121      	bne.n	8002f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d836      	bhi.n	8002f8c <DMA_CheckFifoParam+0xd8>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <DMA_CheckFifoParam+0x70>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f3b 	.word	0x08002f3b
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	08002f4d 	.word	0x08002f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e02f      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4a:	e021      	b.n	8002f90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f54:	d11e      	bne.n	8002f94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f5a:	e01b      	b.n	8002f94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <DMA_CheckFifoParam+0xb4>
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d003      	beq.n	8002f6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f66:	e018      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6c:	e015      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7e:	e00b      	b.n	8002f98 <DMA_CheckFifoParam+0xe4>
      break;
 8002f80:	bf00      	nop
 8002f82:	e00a      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f84:	bf00      	nop
 8002f86:	e008      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e006      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e004      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;   
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <DMA_CheckFifoParam+0xe6>
      break;
 8002f98:	bf00      	nop
    }
  } 
  
  return status; 
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e169      	b.n	800329c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	f040 8158 	bne.w	8003296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d00b      	beq.n	8003006 <HAL_GPIO_Init+0x5e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d007      	beq.n	8003006 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ffa:	2b11      	cmp	r3, #17
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b12      	cmp	r3, #18
 8003004:	d130      	bne.n	8003068 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 0201 	and.w	r2, r3, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x100>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b12      	cmp	r3, #18
 80030a6:	d123      	bne.n	80030f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80b2 	beq.w	8003296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_GPIO_Init+0x308>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800314a:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_GPIO_Init+0x30c>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_Init+0x310>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_Init+0x314>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <HAL_GPIO_Init+0x318>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <HAL_GPIO_Init+0x31c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4d      	ldr	r2, [pc, #308]	; (80032c8 <HAL_GPIO_Init+0x320>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x216>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4c      	ldr	r2, [pc, #304]	; (80032cc <HAL_GPIO_Init+0x324>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <HAL_GPIO_Init+0x328>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x20e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_GPIO_Init+0x32c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x20a>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b2:	2308      	movs	r3, #8
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031e0:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x30c>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <HAL_GPIO_Init+0x330>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003212:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae92 	bls.w	8002fc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3724      	adds	r7, #36	; 0x24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	40013c00 	.word	0x40013c00

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07f      	b.n	8003422 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe f8c6 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e006      	b.n	8003398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d104      	bne.n	80033aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_I2C_Init+0x11c>)
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	ea42 0103 	orr.w	r1, r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	021a      	lsls	r2, r3, #8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	02008000 	.word	0x02008000

08003430 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 80d5 	bne.w	8003602 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_I2C_Mem_Write_DMA+0x34>
 800345e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0c9      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d101      	bne.n	8003484 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
 8003482:	e0bf      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Mem_Write_DMA+0x62>
 800348e:	2302      	movs	r3, #2
 8003490:	e0b8      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800349a:	f7fe fc01 	bl	8001ca0 <HAL_GetTick>
 800349e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2221      	movs	r2, #33	; 0x21
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	; 0x40
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a51      	ldr	r2, [pc, #324]	; (800360c <HAL_I2C_Mem_Write_DMA+0x1dc>)
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2bff      	cmp	r3, #255	; 0xff
 80034d6:	d906      	bls.n	80034e6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80034de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e007      	b.n	80034f6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	893a      	ldrh	r2, [r7, #8]
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2319      	movs	r3, #25
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4603      	mov	r3, r0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fbae 	bl	8003c68 <I2C_RequestMemoryWrite>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e072      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d020      	beq.n	8003568 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 800352c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	4a39      	ldr	r2, [pc, #228]	; (8003618 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8003534:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	2200      	movs	r2, #0
 8003544:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800354a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3328      	adds	r3, #40	; 0x28
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	f7ff fa30 	bl	80029bc <HAL_DMA_Start_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d139      	bne.n	80035da <HAL_I2C_Mem_Write_DMA+0x1aa>
 8003566:	e013      	b.n	8003590 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e039      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f001 f8ec 	bl	800477c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035be:	2111      	movs	r1, #17
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f001 f909 	bl	80047d8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e014      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	ffff0000 	.word	0xffff0000
 8003610:	080038f3 	.word	0x080038f3
 8003614:	0800445d 	.word	0x0800445d
 8003618:	080044f3 	.word	0x080044f3

0800361c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	4613      	mov	r3, r2
 800367a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <I2C_Slave_ISR_IT+0x24>
 800370c:	2302      	movs	r3, #2
 800370e:	e0ec      	b.n	80038ea <I2C_Slave_ISR_IT+0x1fe>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <I2C_Slave_ISR_IT+0x4c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003730:	6939      	ldr	r1, [r7, #16]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fc84 	bl	8004040 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d04d      	beq.n	80037e0 <I2C_Slave_ISR_IT+0xf4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d047      	beq.n	80037e0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d128      	bne.n	80037ac <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b28      	cmp	r3, #40	; 0x28
 8003764:	d108      	bne.n	8003778 <I2C_Slave_ISR_IT+0x8c>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376c:	d104      	bne.n	8003778 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800376e:	6939      	ldr	r1, [r7, #16]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fd3b 	bl	80041ec <I2C_ITListenCplt>
 8003776:	e032      	b.n	80037de <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b29      	cmp	r3, #41	; 0x29
 8003782:	d10e      	bne.n	80037a2 <I2C_Slave_ISR_IT+0xb6>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800378a:	d00a      	beq.n	80037a2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2210      	movs	r2, #16
 8003792:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fe3d 	bl	8004414 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb77 	bl	8003e8e <I2C_ITSlaveSeqCplt>
 80037a0:	e01d      	b.n	80037de <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2210      	movs	r2, #16
 80037a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80037aa:	e096      	b.n	80038da <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2210      	movs	r2, #16
 80037b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <I2C_Slave_ISR_IT+0xe4>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037cc:	f040 8085 	bne.w	80038da <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	4619      	mov	r1, r3
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fd5c 	bl	8004294 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037dc:	e07d      	b.n	80038da <I2C_Slave_ISR_IT+0x1ee>
 80037de:	e07c      	b.n	80038da <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d030      	beq.n	800384e <I2C_Slave_ISR_IT+0x162>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02a      	beq.n	800384e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d14f      	bne.n	80038de <I2C_Slave_ISR_IT+0x1f2>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003844:	d04b      	beq.n	80038de <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fb21 	bl	8003e8e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800384c:	e047      	b.n	80038de <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <I2C_Slave_ISR_IT+0x184>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003866:	6939      	ldr	r1, [r7, #16]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fa51 	bl	8003d10 <I2C_ITAddrCplt>
 800386e:	e037      	b.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d031      	beq.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02b      	beq.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80038c2:	e00d      	b.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ca:	d002      	beq.n	80038d2 <I2C_Slave_ISR_IT+0x1e6>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fadb 	bl	8003e8e <I2C_ITSlaveSeqCplt>
 80038d8:	e002      	b.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80038de:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b088      	sub	sp, #32
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <I2C_Master_ISR_DMA+0x1a>
 8003908:	2302      	movs	r3, #2
 800390a:	e0e1      	b.n	8003ad0 <I2C_Master_ISR_DMA+0x1de>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <I2C_Master_ISR_DMA+0x5e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003940:	2112      	movs	r1, #18
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 ff48 	bl	80047d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fd63 	bl	8004414 <I2C_Flush_TXDR>
 800394e:	e0ba      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	09db      	lsrs	r3, r3, #7
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d072      	beq.n	8003a42 <I2C_Master_ISR_DMA+0x150>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d06c      	beq.n	8003a42 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003976:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04e      	beq.n	8003a20 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2bff      	cmp	r3, #255	; 0xff
 8003998:	d906      	bls.n	80039a8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80039a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e010      	b.n	80039ca <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ba:	d003      	beq.n	80039c4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e002      	b.n	80039ca <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80039c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	8a79      	ldrh	r1, [r7, #18]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fecf 	bl	800477c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b22      	cmp	r3, #34	; 0x22
 80039fa:	d108      	bne.n	8003a0e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a0c:	e05b      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a1e:	e052      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a2e:	d003      	beq.n	8003a38 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f9ef 	bl	8003e14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003a36:	e046      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a38:	2140      	movs	r1, #64	; 0x40
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fc2a 	bl	8004294 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003a40:	e041      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d029      	beq.n	8003aa2 <I2C_Master_ISR_DMA+0x1b0>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d119      	bne.n	8003a98 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a72:	d027      	beq.n	8003ac4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a7c:	d108      	bne.n	8003a90 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003a8e:	e019      	b.n	8003ac4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f9bf 	bl	8003e14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003a96:	e015      	b.n	8003ac4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fbfa 	bl	8004294 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003aa0:	e010      	b.n	8003ac4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fa23 	bl	8003f08 <I2C_ITMasterCplt>
 8003ac2:	e000      	b.n	8003ac6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003ac4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <I2C_Slave_ISR_DMA+0x24>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0b1      	b.n	8003c60 <I2C_Slave_ISR_DMA+0x188>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <I2C_Slave_ISR_DMA+0x4c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa8e 	bl	8004040 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8082 	beq.w	8003c36 <I2C_Slave_ISR_DMA+0x15e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d07b      	beq.n	8003c36 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0b9b      	lsrs	r3, r3, #14
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0bdb      	lsrs	r3, r3, #15
 8003b4e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d068      	beq.n	8003c28 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0bdb      	lsrs	r3, r3, #15
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0b9b      	lsrs	r3, r3, #14
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d128      	bne.n	8003bf6 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b28      	cmp	r3, #40	; 0x28
 8003bae:	d108      	bne.n	8003bc2 <I2C_Slave_ISR_DMA+0xea>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb6:	d104      	bne.n	8003bc2 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fb16 	bl	80041ec <I2C_ITListenCplt>
 8003bc0:	e031      	b.n	8003c26 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b29      	cmp	r3, #41	; 0x29
 8003bcc:	d10e      	bne.n	8003bec <I2C_Slave_ISR_DMA+0x114>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bd4:	d00a      	beq.n	8003bec <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2210      	movs	r2, #16
 8003bdc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fc18 	bl	8004414 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f952 	bl	8003e8e <I2C_ITSlaveSeqCplt>
 8003bea:	e01c      	b.n	8003c26 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003bf4:	e01d      	b.n	8003c32 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <I2C_Slave_ISR_DMA+0x140>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c16:	d10c      	bne.n	8003c32 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fb38 	bl	8004294 <I2C_ITError>
      if (treatdmanack == 1U)
 8003c24:	e005      	b.n	8003c32 <I2C_Slave_ISR_DMA+0x15a>
 8003c26:	e004      	b.n	8003c32 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c30:	e011      	b.n	8003c56 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8003c32:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c34:	e00f      	b.n	8003c56 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <I2C_Slave_ISR_DMA+0x17e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f85d 	bl	8003d10 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	8979      	ldrh	r1, [r7, #10]
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <I2C_RequestMemoryWrite+0xa4>)
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fd73 	bl	800477c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fcc7 	bl	800462e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e02c      	b.n	8003d04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cba:	e015      	b.n	8003ce8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cbc:	893b      	ldrh	r3, [r7, #8]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fcad 	bl	800462e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e012      	b.n	8003d04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cde:	893b      	ldrh	r3, [r7, #8]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fc5b 	bl	80045ae <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	80002000 	.word	0x80002000

08003d10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d26:	2b28      	cmp	r3, #40	; 0x28
 8003d28:	d168      	bne.n	8003dfc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d137      	bne.n	8003dde <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	09db      	lsrs	r3, r3, #7
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	89bb      	ldrh	r3, [r7, #12]
 8003d76:	4053      	eors	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11c      	bne.n	8003dbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d139      	bne.n	8003e0c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2208      	movs	r2, #8
 8003da4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dae:	89ba      	ldrh	r2, [r7, #12]
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fc59 	bl	800366c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003dba:	e027      	b.n	8003e0c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fd76 	bl	80048b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dd0:	89ba      	ldrh	r2, [r7, #12]
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fc48 	bl	800366c <HAL_I2C_AddrCallback>
}
 8003ddc:	e016      	b.n	8003e0c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dde:	2104      	movs	r1, #4
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fd67 	bl	80048b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dee:	89ba      	ldrh	r2, [r7, #12]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fc39 	bl	800366c <HAL_I2C_AddrCallback>
}
 8003dfa:	e007      	b.n	8003e0c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b21      	cmp	r3, #33	; 0x21
 8003e2e:	d115      	bne.n	8003e5c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2211      	movs	r2, #17
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e44:	2101      	movs	r1, #1
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fd34 	bl	80048b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fbe1 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e5a:	e014      	b.n	8003e86 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2212      	movs	r2, #18
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e70:	2102      	movs	r1, #2
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fd1e 	bl	80048b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fbd5 	bl	8003630 <HAL_I2C_MasterRxCpltCallback>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b29      	cmp	r3, #41	; 0x29
 8003ea8:	d112      	bne.n	8003ed0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2228      	movs	r2, #40	; 0x28
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fcfa 	bl	80048b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fbbb 	bl	8003644 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ece:	e017      	b.n	8003f00 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eda:	d111      	bne.n	8003f00 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2228      	movs	r2, #40	; 0x28
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2222      	movs	r2, #34	; 0x22
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003eea:	2102      	movs	r1, #2
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fce1 	bl	80048b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fbac 	bl	8003658 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2220      	movs	r2, #32
 8003f18:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b44      	ldr	r3, [pc, #272]	; (8004038 <I2C_ITMasterCplt+0x130>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a40      	ldr	r2, [pc, #256]	; (800403c <I2C_ITMasterCplt+0x134>)
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa59 	bl	8004414 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003f62:	2103      	movs	r1, #3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fca5 	bl	80048b4 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d002      	beq.n	8003f82 <I2C_ITMasterCplt+0x7a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f983 	bl	8004294 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f8e:	e04e      	b.n	800402e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d121      	bne.n	8003fe0 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d10b      	bne.n	8003fc8 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fb6b 	bl	800369c <HAL_I2C_MemTxCpltCallback>
}
 8003fc6:	e032      	b.n	800402e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fb1f 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
}
 8003fde:	e026      	b.n	800402e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b22      	cmp	r3, #34	; 0x22
 8003fea:	d120      	bne.n	800402e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d10b      	bne.n	8004018 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fb4d 	bl	80036b0 <HAL_I2C_MemRxCpltCallback>
}
 8004016:	e00a      	b.n	800402e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fb01 	bl	8003630 <HAL_I2C_MasterRxCpltCallback>
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	fe00e800 	.word	0xfe00e800
 800403c:	ffff0000 	.word	0xffff0000

08004040 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2220      	movs	r2, #32
 800405c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800405e:	2107      	movs	r1, #7
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fc27 	bl	80048b4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004074:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <I2C_ITSlaveCplt+0x1a4>)
 8004082:	400b      	ands	r3, r1
 8004084:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9c4 	bl	8004414 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	0b9b      	lsrs	r3, r3, #14
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d018      	beq.n	80040d2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ae:	e010      	b.n	80040d2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	0bdb      	lsrs	r3, r3, #15
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d020      	beq.n	8004120 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f89b 	bl	8004294 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b28      	cmp	r3, #40	; 0x28
 8004168:	d138      	bne.n	80041dc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f83d 	bl	80041ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004172:	e033      	b.n	80041dc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417c:	d011      	beq.n	80041a2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fe85 	bl	8003e8e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <I2C_ITSlaveCplt+0x1a8>)
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fa74 	bl	8003688 <HAL_I2C_ListenCpltCallback>
}
 80041a0:	e01c      	b.n	80041dc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b22      	cmp	r3, #34	; 0x22
 80041ac:	d10b      	bne.n	80041c6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fa4a 	bl	8003658 <HAL_I2C_SlaveRxCpltCallback>
}
 80041c4:	e00a      	b.n	80041dc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fa34 	bl	8003644 <HAL_I2C_SlaveTxCpltCallback>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	fe00e800 	.word	0xfe00e800
 80041e8:	ffff0000 	.word	0xffff0000

080041ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <I2C_ITListenCplt+0xa4>)
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d022      	beq.n	800426a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800426a:	2107      	movs	r1, #7
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb21 	bl	80048b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2210      	movs	r2, #16
 8004278:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fa00 	bl	8003688 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	ffff0000 	.word	0xffff0000

08004294 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a55      	ldr	r2, [pc, #340]	; (8004408 <I2C_ITError+0x174>)
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b28      	cmp	r3, #40	; 0x28
 80042ca:	d005      	beq.n	80042d8 <I2C_ITError+0x44>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b29      	cmp	r3, #41	; 0x29
 80042d0:	d002      	beq.n	80042d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b2a      	cmp	r3, #42	; 0x2a
 80042d6:	d10e      	bne.n	80042f6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042d8:	2103      	movs	r1, #3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 faea 	bl	80048b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2228      	movs	r2, #40	; 0x28
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a46      	ldr	r2, [pc, #280]	; (800440c <I2C_ITError+0x178>)
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34
 80042f4:	e013      	b.n	800431e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042f6:	2107      	movs	r1, #7
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fadb 	bl	80048b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b60      	cmp	r3, #96	; 0x60
 8004308:	d003      	beq.n	8004312 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d123      	bne.n	8004376 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800433c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	d05c      	beq.n	8004400 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4a31      	ldr	r2, [pc, #196]	; (8004410 <I2C_ITError+0x17c>)
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fb8e 	bl	8002a7c <HAL_DMA_Abort_IT>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04c      	beq.n	8004400 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004370:	4610      	mov	r0, r2
 8004372:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004374:	e044      	b.n	8004400 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004384:	d123      	bne.n	80043ce <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004394:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d030      	beq.n	8004400 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <I2C_ITError+0x17c>)
 80043a4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fb62 	bl	8002a7c <HAL_DMA_Abort_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d020      	beq.n	8004400 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
}
 80043cc:	e018      	b.n	8004400 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b60      	cmp	r3, #96	; 0x60
 80043d8:	d10b      	bne.n	80043f2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff f974 	bl	80036d8 <HAL_I2C_AbortCpltCallback>
}
 80043f0:	e006      	b.n	8004400 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff f962 	bl	80036c4 <HAL_I2C_ErrorCallback>
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	ffff0000 	.word	0xffff0000
 800440c:	080036ed 	.word	0x080036ed
 8004410:	08004567 	.word	0x08004567

08004414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d103      	bne.n	8004432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d007      	beq.n	8004450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	619a      	str	r2, [r3, #24]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004478:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004484:	2112      	movs	r1, #18
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f9a6 	bl	80047d8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800448c:	e02d      	b.n	80044ea <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004496:	441a      	add	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2bff      	cmp	r3, #255	; 0xff
 80044a4:	d903      	bls.n	80044ae <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	22ff      	movs	r2, #255	; 0xff
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80044ac:	e004      	b.n	80044b8 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4619      	mov	r1, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3328      	adds	r3, #40	; 0x28
 80044c8:	461a      	mov	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	f7fe fa75 	bl	80029bc <HAL_DMA_Start_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80044d8:	2110      	movs	r1, #16
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff feda 	bl	8004294 <I2C_ITError>
}
 80044e0:	e003      	b.n	80044ea <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80044e2:	2112      	movs	r1, #18
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f977 	bl	80047d8 <I2C_Enable_IRQ>
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004518:	2301      	movs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fe fc4d 	bl	8002dd4 <HAL_DMA_GetError>
 800453a:	4603      	mov	r3, r0
 800453c:	2b02      	cmp	r3, #2
 800453e:	d00e      	beq.n	800455e <I2C_DMAError+0x6c>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004554:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004556:	2110      	movs	r1, #16
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7ff fe9b 	bl	8004294 <I2C_ITError>
  }
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	2200      	movs	r2, #0
 800457a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	2200      	movs	r2, #0
 8004582:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b60      	cmp	r3, #96	; 0x60
 800458e:	d107      	bne.n	80045a0 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff f89d 	bl	80036d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800459e:	e002      	b.n	80045a6 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff f88f 	bl	80036c4 <HAL_I2C_ErrorCallback>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045be:	e022      	b.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d01e      	beq.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fd fb6a 	bl	8001ca0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <I2C_WaitOnFlagUntilTimeout+0x30>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d113      	bne.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e00f      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0cd      	beq.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800463a:	e02c      	b.n	8004696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f835 	bl	80046b0 <I2C_IsAcknowledgeFailed>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e02a      	b.n	80046a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d01e      	beq.n	8004696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7fd fb22 	bl	8001ca0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d113      	bne.n	8004696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d1cb      	bne.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d151      	bne.n	800476e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ca:	e022      	b.n	8004712 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d01e      	beq.n	8004712 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fd fae4 	bl	8001ca0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_IsAcknowledgeFailed+0x3a>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d113      	bne.n	8004712 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e02e      	b.n	8004770 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d1d5      	bne.n	80046cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2220      	movs	r2, #32
 800472e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fe6f 	bl	8004414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <I2C_IsAcknowledgeFailed+0xc8>)
 8004742:	400b      	ands	r3, r1
 8004744:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	fe00e800 	.word	0xfe00e800

0800477c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	4613      	mov	r3, r2
 800478c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	0d5b      	lsrs	r3, r3, #21
 8004798:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <I2C_TransferConfig+0x58>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	43db      	mvns	r3, r3
 80047a2:	ea02 0103 	and.w	r1, r2, r3
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047ac:	7a7b      	ldrb	r3, [r7, #9]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	03ff63ff 	.word	0x03ff63ff

080047d8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <I2C_Enable_IRQ+0xd4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047f6:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <I2C_Enable_IRQ+0xd8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d124      	bne.n	8004846 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800480c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	f003 0311 	and.w	r3, r3, #17
 8004814:	2b11      	cmp	r3, #17
 8004816:	d103      	bne.n	8004820 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800481e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	f003 0312 	and.w	r3, r3, #18
 8004826:	2b12      	cmp	r3, #18
 8004828:	d103      	bne.n	8004832 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004832:	887b      	ldrh	r3, [r7, #2]
 8004834:	f003 0312 	and.w	r3, r3, #18
 8004838:	2b12      	cmp	r3, #18
 800483a:	d128      	bne.n	800488e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004842:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004844:	e023      	b.n	800488e <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004856:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004868:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800487a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	f003 0312 	and.w	r3, r3, #18
 8004882:	2b12      	cmp	r3, #18
 8004884:	d103      	bne.n	800488e <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	080038f3 	.word	0x080038f3
 80048b0:	08003ad9 	.word	0x08003ad9

080048b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00f      	beq.n	80048ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80048d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048e2:	2b28      	cmp	r3, #40	; 0x28
 80048e4:	d003      	beq.n	80048ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048ee:	887b      	ldrh	r3, [r7, #2]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00f      	beq.n	8004918 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800490c:	2b28      	cmp	r3, #40	; 0x28
 800490e:	d003      	beq.n	8004918 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004916:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004928:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	f003 0311 	and.w	r3, r3, #17
 8004930:	2b11      	cmp	r3, #17
 8004932:	d103      	bne.n	800493c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800493a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	f003 0312 	and.w	r3, r3, #18
 8004942:	2b12      	cmp	r3, #18
 8004944:	d103      	bne.n	800494e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	f003 0312 	and.w	r3, r3, #18
 8004954:	2b12      	cmp	r3, #18
 8004956:	d103      	bne.n	8004960 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	43da      	mvns	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	400a      	ands	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	d138      	bne.n	8004a06 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800499e:	2302      	movs	r3, #2
 80049a0:	e032      	b.n	8004a08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2224      	movs	r2, #36	; 0x24
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d139      	bne.n	8004a9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e033      	b.n	8004aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40007000 	.word	0x40007000

08004acc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a22      	ldr	r2, [pc, #136]	; (8004b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004afa:	f7fd f8d1 	bl	8001ca0 <HAL_GetTick>
 8004afe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b00:	e009      	b.n	8004b16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b02:	f7fd f8cd 	bl	8001ca0 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b10:	d901      	bls.n	8004b16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e022      	b.n	8004b5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b22:	d1ee      	bne.n	8004b02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b30:	f7fd f8b6 	bl	8001ca0 <HAL_GetTick>
 8004b34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b36:	e009      	b.n	8004b4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b38:	f7fd f8b2 	bl	8001ca0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b46:	d901      	bls.n	8004b4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e007      	b.n	8004b5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b58:	d1ee      	bne.n	8004b38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000

08004b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b74:	2300      	movs	r3, #0
 8004b76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e291      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8087 	beq.w	8004c9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b90:	4b96      	ldr	r3, [pc, #600]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9c:	4b93      	ldr	r3, [pc, #588]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d112      	bne.n	8004bce <HAL_RCC_OscConfig+0x62>
 8004ba8:	4b90      	ldr	r3, [pc, #576]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb4:	d10b      	bne.n	8004bce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb6:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d06c      	beq.n	8004c9c <HAL_RCC_OscConfig+0x130>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d168      	bne.n	8004c9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e26b      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x7a>
 8004bd8:	4b84      	ldr	r3, [pc, #528]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a83      	ldr	r2, [pc, #524]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e02e      	b.n	8004c44 <HAL_RCC_OscConfig+0xd8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x9c>
 8004bee:	4b7f      	ldr	r3, [pc, #508]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7e      	ldr	r2, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b7c      	ldr	r3, [pc, #496]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7b      	ldr	r2, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <HAL_RCC_OscConfig+0xd8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0xc0>
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a75      	ldr	r2, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b73      	ldr	r3, [pc, #460]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a72      	ldr	r2, [pc, #456]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0xd8>
 8004c2c:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b6c      	ldr	r3, [pc, #432]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a6b      	ldr	r2, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fd f828 	bl	8001ca0 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fd f824 	bl	8001ca0 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e21f      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0xe8>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd f814 	bl	8001ca0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fd f810 	bl	8001ca0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e20b      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x110>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d069      	beq.n	8004d7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d11c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x190>
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d116      	bne.n	8004cfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x17a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1df      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	493d      	ldr	r1, [pc, #244]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	e040      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d023      	beq.n	8004d4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a38      	ldr	r2, [pc, #224]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc ffc6 	bl	8001ca0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fc ffc2 	bl	8001ca0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1bd      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	4b30      	ldr	r3, [pc, #192]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4929      	ldr	r1, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
 8004d4a:	e018      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fc ffa2 	bl	8001ca0 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fc ff9e 	bl	8001ca0 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e199      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d038      	beq.n	8004dfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d019      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fc ff7f 	bl	8001ca0 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fc ff7b 	bl	8001ca0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e176      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x23a>
 8004dc4:	e01a      	b.n	8004dfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <HAL_RCC_OscConfig+0x280>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fc ff65 	bl	8001ca0 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fc ff61 	bl	8001ca0 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d903      	bls.n	8004df0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e15c      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
 8004dec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	4b91      	ldr	r3, [pc, #580]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ee      	bne.n	8004dda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a4 	beq.w	8004f52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b8b      	ldr	r3, [pc, #556]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4a87      	ldr	r2, [pc, #540]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	; 0x40
 8004e22:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e32:	4b82      	ldr	r3, [pc, #520]	; (800503c <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e3e:	4b7f      	ldr	r3, [pc, #508]	; (800503c <HAL_RCC_OscConfig+0x4d0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7e      	ldr	r2, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x4d0>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fc ff29 	bl	8001ca0 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fc ff25 	bl	8001ca0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	; 0x64
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e120      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e64:	4b75      	ldr	r3, [pc, #468]	; (800503c <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x31a>
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
 8004e84:	e02d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x376>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x33c>
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a69      	ldr	r2, [pc, #420]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a66      	ldr	r2, [pc, #408]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	e01c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x376>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d10c      	bne.n	8004eca <HAL_RCC_OscConfig+0x35e>
 8004eb0:	4b61      	ldr	r3, [pc, #388]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a60      	ldr	r2, [pc, #384]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	f043 0304 	orr.w	r3, r3, #4
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	4b5e      	ldr	r3, [pc, #376]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a5d      	ldr	r2, [pc, #372]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	e00b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x376>
 8004eca:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a5a      	ldr	r2, [pc, #360]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed6:	4b58      	ldr	r3, [pc, #352]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d015      	beq.n	8004f16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eea:	f7fc fed9 	bl	8001ca0 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fc fed5 	bl	8001ca0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0ce      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ee      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x386>
 8004f14:	e014      	b.n	8004f40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fc fec3 	bl	8001ca0 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc febf 	bl	8001ca0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0b8      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f34:	4b40      	ldr	r3, [pc, #256]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ee      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d105      	bne.n	8004f52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f46:	4b3c      	ldr	r3, [pc, #240]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80a4 	beq.w	80050a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f5c:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d06b      	beq.n	8005040 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d149      	bne.n	8005004 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f70:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fe90 	bl	8001ca0 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fc fe8c 	bl	8001ca0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e087      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc fe60 	bl	8001ca0 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc fe5c 	bl	8001ca0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e057      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x478>
 8005002:	e04f      	b.n	80050a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc fe46 	bl	8001ca0 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fe42 	bl	8001ca0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e03d      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <HAL_RCC_OscConfig+0x4cc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x4ac>
 8005036:	e035      	b.n	80050a4 <HAL_RCC_OscConfig+0x538>
 8005038:	40023800 	.word	0x40023800
 800503c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x544>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d028      	beq.n	80050a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d121      	bne.n	80050a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d11a      	bne.n	80050a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005076:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800

080050b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0d0      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d910      	bls.n	80050fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b67      	ldr	r3, [pc, #412]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	4965      	ldr	r1, [pc, #404]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0b8      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d020      	beq.n	800514a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005114:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 800511a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800511e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800512c:	4b53      	ldr	r3, [pc, #332]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a52      	ldr	r2, [pc, #328]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	494d      	ldr	r1, [pc, #308]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d040      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d115      	bne.n	8005196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e07f      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e073      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e06b      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4936      	ldr	r1, [pc, #216]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fc fd7a 	bl	8001ca0 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b0:	f7fc fd76 	bl	8001ca0 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e053      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 020c 	and.w	r2, r3, #12
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1eb      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d210      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 020f 	bic.w	r2, r3, #15
 80051ee:	4922      	ldr	r1, [pc, #136]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e032      	b.n	800526e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4916      	ldr	r1, [pc, #88]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	490e      	ldr	r1, [pc, #56]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005246:	f000 f821 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800524a:	4601      	mov	r1, r0
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x1cc>)
 8005258:	5cd3      	ldrb	r3, [r2, r3]
 800525a:	fa21 f303 	lsr.w	r3, r1, r3
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <HAL_RCC_ClockConfig+0x1d0>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCC_ClockConfig+0x1d4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fc fcd6 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40023c00 	.word	0x40023c00
 800527c:	40023800 	.word	0x40023800
 8005280:	080078b8 	.word	0x080078b8
 8005284:	20000000 	.word	0x20000000
 8005288:	20000004 	.word	0x20000004

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a2:	4b63      	ldr	r3, [pc, #396]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d007      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x32>
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d008      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0x38>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 80b4 	bne.w	8005420 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b8:	4b5e      	ldr	r3, [pc, #376]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052ba:	60bb      	str	r3, [r7, #8]
      break;
 80052bc:	e0b3      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052be:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052c0:	60bb      	str	r3, [r7, #8]
      break;
 80052c2:	e0b0      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c4:	4b5a      	ldr	r3, [pc, #360]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052ce:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d04a      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b55      	ldr	r3, [pc, #340]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	ea03 0501 	and.w	r5, r3, r1
 80052f0:	ea04 0602 	and.w	r6, r4, r2
 80052f4:	4629      	mov	r1, r5
 80052f6:	4632      	mov	r2, r6
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	0154      	lsls	r4, r2, #5
 8005302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005306:	014b      	lsls	r3, r1, #5
 8005308:	4619      	mov	r1, r3
 800530a:	4622      	mov	r2, r4
 800530c:	1b49      	subs	r1, r1, r5
 800530e:	eb62 0206 	sbc.w	r2, r2, r6
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	0194      	lsls	r4, r2, #6
 800531c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005320:	018b      	lsls	r3, r1, #6
 8005322:	1a5b      	subs	r3, r3, r1
 8005324:	eb64 0402 	sbc.w	r4, r4, r2
 8005328:	f04f 0100 	mov.w	r1, #0
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	00e2      	lsls	r2, r4, #3
 8005332:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005336:	00d9      	lsls	r1, r3, #3
 8005338:	460b      	mov	r3, r1
 800533a:	4614      	mov	r4, r2
 800533c:	195b      	adds	r3, r3, r5
 800533e:	eb44 0406 	adc.w	r4, r4, r6
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	0262      	lsls	r2, r4, #9
 800534c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005350:	0259      	lsls	r1, r3, #9
 8005352:	460b      	mov	r3, r1
 8005354:	4614      	mov	r4, r2
 8005356:	4618      	mov	r0, r3
 8005358:	4621      	mov	r1, r4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f04f 0400 	mov.w	r4, #0
 8005360:	461a      	mov	r2, r3
 8005362:	4623      	mov	r3, r4
 8005364:	f7fa ff5c 	bl	8000220 <__aeabi_uldivmod>
 8005368:	4603      	mov	r3, r0
 800536a:	460c      	mov	r4, r1
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e049      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	ea03 0501 	and.w	r5, r3, r1
 8005386:	ea04 0602 	and.w	r6, r4, r2
 800538a:	4629      	mov	r1, r5
 800538c:	4632      	mov	r2, r6
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	0154      	lsls	r4, r2, #5
 8005398:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800539c:	014b      	lsls	r3, r1, #5
 800539e:	4619      	mov	r1, r3
 80053a0:	4622      	mov	r2, r4
 80053a2:	1b49      	subs	r1, r1, r5
 80053a4:	eb62 0206 	sbc.w	r2, r2, r6
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	0194      	lsls	r4, r2, #6
 80053b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053b6:	018b      	lsls	r3, r1, #6
 80053b8:	1a5b      	subs	r3, r3, r1
 80053ba:	eb64 0402 	sbc.w	r4, r4, r2
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053cc:	00d9      	lsls	r1, r3, #3
 80053ce:	460b      	mov	r3, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	195b      	adds	r3, r3, r5
 80053d4:	eb44 0406 	adc.w	r4, r4, r6
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	02a2      	lsls	r2, r4, #10
 80053e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053e6:	0299      	lsls	r1, r3, #10
 80053e8:	460b      	mov	r3, r1
 80053ea:	4614      	mov	r4, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	4621      	mov	r1, r4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f04f 0400 	mov.w	r4, #0
 80053f6:	461a      	mov	r2, r3
 80053f8:	4623      	mov	r3, r4
 80053fa:	f7fa ff11 	bl	8000220 <__aeabi_uldivmod>
 80053fe:	4603      	mov	r3, r0
 8005400:	460c      	mov	r4, r1
 8005402:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	3301      	adds	r3, #1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	60bb      	str	r3, [r7, #8]
      break;
 800541e:	e002      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005422:	60bb      	str	r3, [r7, #8]
      break;
 8005424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005426:	68bb      	ldr	r3, [r7, #8]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	00f42400 	.word	0x00f42400
 8005438:	007a1200 	.word	0x007a1200

0800543c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005440:	4b03      	ldr	r3, [pc, #12]	; (8005450 <HAL_RCC_GetHCLKFreq+0x14>)
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000000 	.word	0x20000000

08005454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005458:	f7ff fff0 	bl	800543c <HAL_RCC_GetHCLKFreq>
 800545c:	4601      	mov	r1, r0
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	0a9b      	lsrs	r3, r3, #10
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4a03      	ldr	r2, [pc, #12]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40023800 	.word	0x40023800
 8005478:	080078c8 	.word	0x080078c8

0800547c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005480:	f7ff ffdc 	bl	800543c <HAL_RCC_GetHCLKFreq>
 8005484:	4601      	mov	r1, r0
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0b5b      	lsrs	r3, r3, #13
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40023800 	.word	0x40023800
 80054a0:	080078c8 	.word	0x080078c8

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054c8:	4b65      	ldr	r3, [pc, #404]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a64      	ldr	r2, [pc, #400]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054d2:	6093      	str	r3, [r2, #8]
 80054d4:	4b62      	ldr	r3, [pc, #392]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4960      	ldr	r1, [pc, #384]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054fa:	4b59      	ldr	r3, [pc, #356]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	4955      	ldr	r1, [pc, #340]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005518:	d101      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800551a:	2301      	movs	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d017      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005536:	4b4a      	ldr	r3, [pc, #296]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	4946      	ldr	r1, [pc, #280]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 808b 	beq.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005574:	4b3a      	ldr	r3, [pc, #232]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	4a39      	ldr	r2, [pc, #228]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	6413      	str	r3, [r2, #64]	; 0x40
 8005580:	4b37      	ldr	r3, [pc, #220]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800558c:	4b35      	ldr	r3, [pc, #212]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a34      	ldr	r2, [pc, #208]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005598:	f7fc fb82 	bl	8001ca0 <HAL_GetTick>
 800559c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a0:	f7fc fb7e 	bl	8001ca0 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e2ba      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055be:	4b28      	ldr	r3, [pc, #160]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d035      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d02e      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e6:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055fe:	4a18      	ldr	r2, [pc, #96]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005604:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d114      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fc fb46 	bl	8001ca0 <HAL_GetTick>
 8005614:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005616:	e00a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fc fb42 	bl	8001ca0 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e27c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0ee      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d111      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005656:	400b      	ands	r3, r1
 8005658:	4901      	ldr	r1, [pc, #4]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
 800565e:	e00b      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005660:	40023800 	.word	0x40023800
 8005664:	40007000 	.word	0x40007000
 8005668:	0ffffcff 	.word	0x0ffffcff
 800566c:	4ba3      	ldr	r3, [pc, #652]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4aa2      	ldr	r2, [pc, #648]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005672:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005676:	6093      	str	r3, [r2, #8]
 8005678:	4ba0      	ldr	r3, [pc, #640]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800567a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	499d      	ldr	r1, [pc, #628]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005686:	4313      	orrs	r3, r2
 8005688:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005696:	4b99      	ldr	r3, [pc, #612]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569c:	4a97      	ldr	r2, [pc, #604]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800569e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80056a6:	4b95      	ldr	r3, [pc, #596]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	4992      	ldr	r1, [pc, #584]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056c4:	4b8d      	ldr	r3, [pc, #564]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d2:	498a      	ldr	r1, [pc, #552]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f4:	4981      	ldr	r1, [pc, #516]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005708:	4b7c      	ldr	r3, [pc, #496]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005716:	4979      	ldr	r1, [pc, #484]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800572a:	4b74      	ldr	r3, [pc, #464]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f023 0203 	bic.w	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	4970      	ldr	r1, [pc, #448]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800574c:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f023 020c 	bic.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4968      	ldr	r1, [pc, #416]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800576e:	4b63      	ldr	r3, [pc, #396]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	495f      	ldr	r1, [pc, #380]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005790:	4b5a      	ldr	r3, [pc, #360]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579e:	4957      	ldr	r1, [pc, #348]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057b2:	4b52      	ldr	r3, [pc, #328]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	494e      	ldr	r1, [pc, #312]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057d4:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	4946      	ldr	r1, [pc, #280]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057f6:	4b41      	ldr	r3, [pc, #260]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	493d      	ldr	r1, [pc, #244]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005818:	4b38      	ldr	r3, [pc, #224]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	4935      	ldr	r1, [pc, #212]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d011      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800583a:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005840:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005848:	492c      	ldr	r1, [pc, #176]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005858:	d101      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800585a:	2301      	movs	r3, #1
 800585c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005878:	4920      	ldr	r1, [pc, #128]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589a:	4918      	ldr	r1, [pc, #96]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058bc:	490f      	ldr	r1, [pc, #60]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d005      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d2:	f040 809c 	bne.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e2:	f7fc f9dd 	bl	8001ca0 <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e8:	e00a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ea:	f7fc f9d9 	bl	8001ca0 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b64      	cmp	r3, #100	; 0x64
 80058f6:	d903      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e115      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80058fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005900:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ee      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d113      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005920:	4b83      	ldr	r3, [pc, #524]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005926:	0e1b      	lsrs	r3, r3, #24
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	019a      	lsls	r2, r3, #6
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	071b      	lsls	r3, r3, #28
 8005940:	497b      	ldr	r1, [pc, #492]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005966:	2b00      	cmp	r3, #0
 8005968:	d024      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005972:	d11f      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005974:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597a:	0f1b      	lsrs	r3, r3, #28
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	019a      	lsls	r2, r3, #6
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	071b      	lsls	r3, r3, #28
 8005994:	4966      	ldr	r1, [pc, #408]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800599c:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800599e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a2:	f023 021f 	bic.w	r2, r3, #31
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4960      	ldr	r1, [pc, #384]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	019a      	lsls	r2, r3, #6
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	071b      	lsls	r3, r3, #28
 80059d4:	4956      	ldr	r1, [pc, #344]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059dc:	4b54      	ldr	r3, [pc, #336]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a53      	ldr	r2, [pc, #332]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80059e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e8:	f7fc f95a 	bl	8001ca0 <HAL_GetTick>
 80059ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059f0:	f7fc f956 	bl	8001ca0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e092      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a02:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 8088 	bne.w	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a16:	4b46      	ldr	r3, [pc, #280]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a45      	ldr	r2, [pc, #276]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a22:	f7fc f93d 	bl	8001ca0 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a2a:	f7fc f939 	bl	8001ca0 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b64      	cmp	r3, #100	; 0x64
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e075      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a48:	d0ef      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d024      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d120      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a72:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	019a      	lsls	r2, r3, #6
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	4927      	ldr	r1, [pc, #156]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a9a:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	4920      	ldr	r1, [pc, #128]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d018      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac8:	d113      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aca:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	019a      	lsls	r2, r3, #6
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	4911      	ldr	r1, [pc, #68]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fc f8cf 	bl	8001ca0 <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b06:	f7fc f8cb 	bl	8001ca0 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b64      	cmp	r3, #100	; 0x64
 8005b12:	d901      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e007      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b24:	d1ef      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800

08005b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e01d      	b.n	8005b82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb fd76 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fbbc 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e01d      	b.n	8005bd8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fb fddf 	bl	8001774 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 fb91 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e01d      	b.n	8005c2e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fb fd94 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f000 fb66 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f87f 	bl	8006d4e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <HAL_TIM_PWM_Start+0x7c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x2c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <HAL_TIM_PWM_Start+0x80>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_PWM_Start+0x30>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_PWM_Start+0x32>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <HAL_TIM_PWM_Start+0x84>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_TIM_PWM_Start+0x70>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c96:	d007      	beq.n	8005ca8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	00010007 	.word	0x00010007

08005cc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e01d      	b.n	8005d0e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f815 	bl	8005d16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f000 faf6 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	d841      	bhi.n	8005dc0 <HAL_TIM_IC_Start_IT+0x94>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <HAL_TIM_IC_Start_IT+0x18>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005dc1 	.word	0x08005dc1
 8005d4c:	08005dc1 	.word	0x08005dc1
 8005d50:	08005dc1 	.word	0x08005dc1
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005dc1 	.word	0x08005dc1
 8005d60:	08005dc1 	.word	0x08005dc1
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005dc1 	.word	0x08005dc1
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005dc1 	.word	0x08005dc1
 8005d74:	08005daf 	.word	0x08005daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0202 	orr.w	r2, r2, #2
 8005d86:	60da      	str	r2, [r3, #12]
      break;
 8005d88:	e01b      	b.n	8005dc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0204 	orr.w	r2, r2, #4
 8005d98:	60da      	str	r2, [r3, #12]
      break;
 8005d9a:	e012      	b.n	8005dc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	60da      	str	r2, [r3, #12]
      break;
 8005dac:	e009      	b.n	8005dc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0210 	orr.w	r2, r2, #16
 8005dbc:	60da      	str	r2, [r3, #12]
      break;
 8005dbe:	e000      	b.n	8005dc2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005dc0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 ffbf 	bl	8006d4e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_TIM_IC_Start_IT+0xd8>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d00b      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0xce>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d007      	beq.n	8005dfa <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	00010007 	.word	0x00010007

08005e08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e06c      	b.n	8005efc <HAL_TIM_OC_ConfigChannel+0xf4>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b14      	cmp	r3, #20
 8005e36:	d857      	bhi.n	8005ee8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005ee9 	.word	0x08005ee9
 8005e4c:	08005ee9 	.word	0x08005ee9
 8005e50:	08005ea3 	.word	0x08005ea3
 8005e54:	08005ee9 	.word	0x08005ee9
 8005e58:	08005ee9 	.word	0x08005ee9
 8005e5c:	08005ee9 	.word	0x08005ee9
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005ee9 	.word	0x08005ee9
 8005e68:	08005ee9 	.word	0x08005ee9
 8005e6c:	08005ee9 	.word	0x08005ee9
 8005e70:	08005ebf 	.word	0x08005ebf
 8005e74:	08005ee9 	.word	0x08005ee9
 8005e78:	08005ee9 	.word	0x08005ee9
 8005e7c:	08005ee9 	.word	0x08005ee9
 8005e80:	08005ecd 	.word	0x08005ecd
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08005ee9 	.word	0x08005ee9
 8005e8c:	08005ee9 	.word	0x08005ee9
 8005e90:	08005edb 	.word	0x08005edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fac8 	bl	8006430 <TIM_OC1_SetConfig>
      break;
 8005ea0:	e023      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fb33 	bl	8006514 <TIM_OC2_SetConfig>
      break;
 8005eae:	e01c      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fba4 	bl	8006604 <TIM_OC3_SetConfig>
      break;
 8005ebc:	e015      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fc13 	bl	80066f0 <TIM_OC4_SetConfig>
      break;
 8005eca:	e00e      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fc64 	bl	80067a0 <TIM_OC5_SetConfig>
      break;
 8005ed8:	e007      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fcaf 	bl	8006844 <TIM_OC6_SetConfig>
      break;
 8005ee6:	e000      	b.n	8005eea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005ee8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e08a      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f000 fd5a 	bl	80069fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020c 	bic.w	r2, r2, #12
 8005f56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	619a      	str	r2, [r3, #24]
 8005f6a:	e05a      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d11c      	bne.n	8005fac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6819      	ldr	r1, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f000 fdde 	bl	8006b42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6999      	ldr	r1, [r3, #24]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	021a      	lsls	r2, r3, #8
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
 8005faa:	e03a      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d11b      	bne.n	8005fea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 fe2b 	bl	8006c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 020c 	bic.w	r2, r2, #12
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69d9      	ldr	r1, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	61da      	str	r2, [r3, #28]
 8005fe8:	e01b      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f000 fe4b 	bl	8006c94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800600c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	021a      	lsls	r2, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006052:	2302      	movs	r3, #2
 8006054:	e105      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b14      	cmp	r3, #20
 800606a:	f200 80f0 	bhi.w	800624e <HAL_TIM_PWM_ConfigChannel+0x212>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060c9 	.word	0x080060c9
 8006078:	0800624f 	.word	0x0800624f
 800607c:	0800624f 	.word	0x0800624f
 8006080:	0800624f 	.word	0x0800624f
 8006084:	08006109 	.word	0x08006109
 8006088:	0800624f 	.word	0x0800624f
 800608c:	0800624f 	.word	0x0800624f
 8006090:	0800624f 	.word	0x0800624f
 8006094:	0800614b 	.word	0x0800614b
 8006098:	0800624f 	.word	0x0800624f
 800609c:	0800624f 	.word	0x0800624f
 80060a0:	0800624f 	.word	0x0800624f
 80060a4:	0800618b 	.word	0x0800618b
 80060a8:	0800624f 	.word	0x0800624f
 80060ac:	0800624f 	.word	0x0800624f
 80060b0:	0800624f 	.word	0x0800624f
 80060b4:	080061cd 	.word	0x080061cd
 80060b8:	0800624f 	.word	0x0800624f
 80060bc:	0800624f 	.word	0x0800624f
 80060c0:	0800624f 	.word	0x0800624f
 80060c4:	0800620d 	.word	0x0800620d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f9ae 	bl	8006430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0204 	bic.w	r2, r2, #4
 80060f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6999      	ldr	r1, [r3, #24]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	619a      	str	r2, [r3, #24]
      break;
 8006106:	e0a3      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fa00 	bl	8006514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6999      	ldr	r1, [r3, #24]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	021a      	lsls	r2, r3, #8
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	619a      	str	r2, [r3, #24]
      break;
 8006148:	e082      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fa57 	bl	8006604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0208 	orr.w	r2, r2, #8
 8006164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0204 	bic.w	r2, r2, #4
 8006174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69d9      	ldr	r1, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	61da      	str	r2, [r3, #28]
      break;
 8006188:	e062      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 faad 	bl	80066f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	021a      	lsls	r2, r3, #8
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	61da      	str	r2, [r3, #28]
      break;
 80061ca:	e041      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fae4 	bl	80067a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800620a:	e021      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fb16 	bl	8006844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624c:	e000      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800624e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e031      	b.n	80062e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fb28 	bl	80068ec <TIM_SlaveTimer_SetConfig>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e018      	b.n	80062e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a40      	ldr	r2, [pc, #256]	; (8006404 <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d00f      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3d      	ldr	r2, [pc, #244]	; (8006408 <TIM_Base_SetConfig+0x118>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00b      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a3c      	ldr	r2, [pc, #240]	; (800640c <TIM_Base_SetConfig+0x11c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <TIM_Base_SetConfig+0x120>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <TIM_Base_SetConfig+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d108      	bne.n	8006342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2f      	ldr	r2, [pc, #188]	; (8006404 <TIM_Base_SetConfig+0x114>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d02b      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006350:	d027      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <TIM_Base_SetConfig+0x118>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d023      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2b      	ldr	r2, [pc, #172]	; (800640c <TIM_Base_SetConfig+0x11c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01f      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <TIM_Base_SetConfig+0x120>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01b      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a29      	ldr	r2, [pc, #164]	; (8006414 <TIM_Base_SetConfig+0x124>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d017      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a28      	ldr	r2, [pc, #160]	; (8006418 <TIM_Base_SetConfig+0x128>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a27      	ldr	r2, [pc, #156]	; (800641c <TIM_Base_SetConfig+0x12c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a26      	ldr	r2, [pc, #152]	; (8006420 <TIM_Base_SetConfig+0x130>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a25      	ldr	r2, [pc, #148]	; (8006424 <TIM_Base_SetConfig+0x134>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a24      	ldr	r2, [pc, #144]	; (8006428 <TIM_Base_SetConfig+0x138>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a23      	ldr	r2, [pc, #140]	; (800642c <TIM_Base_SetConfig+0x13c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <TIM_Base_SetConfig+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0xf8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d103      	bne.n	80063f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	615a      	str	r2, [r3, #20]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40010400 	.word	0x40010400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800
 8006424:	40001800 	.word	0x40001800
 8006428:	40001c00 	.word	0x40001c00
 800642c:	40002000 	.word	0x40002000

08006430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <TIM_OC1_SetConfig+0xd8>)
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0302 	bic.w	r3, r3, #2
 8006478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_OC1_SetConfig+0xdc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC1_SetConfig+0x64>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a20      	ldr	r2, [pc, #128]	; (8006510 <TIM_OC1_SetConfig+0xe0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d10c      	bne.n	80064ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0308 	bic.w	r3, r3, #8
 800649a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0304 	bic.w	r3, r3, #4
 80064ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a16      	ldr	r2, [pc, #88]	; (800650c <TIM_OC1_SetConfig+0xdc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC1_SetConfig+0x8e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <TIM_OC1_SetConfig+0xe0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d111      	bne.n	80064e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	fffeff8f 	.word	0xfffeff8f
 800650c:	40010000 	.word	0x40010000
 8006510:	40010400 	.word	0x40010400

08006514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0210 	bic.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <TIM_OC2_SetConfig+0xe4>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0320 	bic.w	r3, r3, #32
 800655e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a23      	ldr	r2, [pc, #140]	; (80065fc <TIM_OC2_SetConfig+0xe8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC2_SetConfig+0x68>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <TIM_OC2_SetConfig+0xec>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d10d      	bne.n	8006598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a18      	ldr	r2, [pc, #96]	; (80065fc <TIM_OC2_SetConfig+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC2_SetConfig+0x94>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a17      	ldr	r2, [pc, #92]	; (8006600 <TIM_OC2_SetConfig+0xec>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d113      	bne.n	80065d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	feff8fff 	.word	0xfeff8fff
 80065fc:	40010000 	.word	0x40010000
 8006600:	40010400 	.word	0x40010400

08006604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <TIM_OC3_SetConfig+0xe0>)
 8006630:	4013      	ands	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <TIM_OC3_SetConfig+0xe4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_OC3_SetConfig+0x66>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a21      	ldr	r2, [pc, #132]	; (80066ec <TIM_OC3_SetConfig+0xe8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10d      	bne.n	8006686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <TIM_OC3_SetConfig+0xe4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC3_SetConfig+0x92>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <TIM_OC3_SetConfig+0xe8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d113      	bne.n	80066be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800669c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	fffeff8f 	.word	0xfffeff8f
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400

080066f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4b1e      	ldr	r3, [pc, #120]	; (8006794 <TIM_OC4_SetConfig+0xa4>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a13      	ldr	r2, [pc, #76]	; (8006798 <TIM_OC4_SetConfig+0xa8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC4_SetConfig+0x68>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <TIM_OC4_SetConfig+0xac>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d109      	bne.n	800676c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	feff8fff 	.word	0xfeff8fff
 8006798:	40010000 	.word	0x40010000
 800679c:	40010400 	.word	0x40010400

080067a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <TIM_OC5_SetConfig+0x98>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a12      	ldr	r2, [pc, #72]	; (800683c <TIM_OC5_SetConfig+0x9c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_OC5_SetConfig+0x5e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a11      	ldr	r2, [pc, #68]	; (8006840 <TIM_OC5_SetConfig+0xa0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d109      	bne.n	8006812 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	fffeff8f 	.word	0xfffeff8f
 800683c:	40010000 	.word	0x40010000
 8006840:	40010400 	.word	0x40010400

08006844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <TIM_OC6_SetConfig+0x9c>)
 8006870:	4013      	ands	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	051b      	lsls	r3, r3, #20
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <TIM_OC6_SetConfig+0xa0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC6_SetConfig+0x60>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a12      	ldr	r2, [pc, #72]	; (80068e8 <TIM_OC6_SetConfig+0xa4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d109      	bne.n	80068b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	feff8fff 	.word	0xfeff8fff
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40010400 	.word	0x40010400

080068ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4b39      	ldr	r3, [pc, #228]	; (80069f8 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006914:	4013      	ands	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b30      	cmp	r3, #48	; 0x30
 8006930:	d05c      	beq.n	80069ec <TIM_SlaveTimer_SetConfig+0x100>
 8006932:	2b30      	cmp	r3, #48	; 0x30
 8006934:	d806      	bhi.n	8006944 <TIM_SlaveTimer_SetConfig+0x58>
 8006936:	2b10      	cmp	r3, #16
 8006938:	d058      	beq.n	80069ec <TIM_SlaveTimer_SetConfig+0x100>
 800693a:	2b20      	cmp	r3, #32
 800693c:	d056      	beq.n	80069ec <TIM_SlaveTimer_SetConfig+0x100>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d054      	beq.n	80069ec <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006942:	e054      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006944:	2b50      	cmp	r3, #80	; 0x50
 8006946:	d03d      	beq.n	80069c4 <TIM_SlaveTimer_SetConfig+0xd8>
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d802      	bhi.n	8006952 <TIM_SlaveTimer_SetConfig+0x66>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d010      	beq.n	8006972 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006950:	e04d      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006952:	2b60      	cmp	r3, #96	; 0x60
 8006954:	d040      	beq.n	80069d8 <TIM_SlaveTimer_SetConfig+0xec>
 8006956:	2b70      	cmp	r3, #112	; 0x70
 8006958:	d000      	beq.n	800695c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800695a:	e048      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f000 f9cf 	bl	8006d0e <TIM_ETR_SetConfig>
      break;
 8006970:	e03d      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b05      	cmp	r3, #5
 8006978:	d101      	bne.n	800697e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e038      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
      break;
 80069c2:	e014      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6899      	ldr	r1, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f000 f887 	bl	8006ae4 <TIM_TI1_ConfigInputStage>
      break;
 80069d6:	e00a      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6899      	ldr	r1, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f000 f8e9 	bl	8006bbc <TIM_TI2_ConfigInputStage>
      break;
 80069ea:	e000      	b.n	80069ee <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80069ec:	bf00      	nop
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	fffefff8 	.word	0xfffefff8

080069fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <TIM_TI1_SetConfig+0xcc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01b      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d017      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <TIM_TI1_SetConfig+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a24      	ldr	r2, [pc, #144]	; (8006ad0 <TIM_TI1_SetConfig+0xd4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00f      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a23      	ldr	r2, [pc, #140]	; (8006ad4 <TIM_TI1_SetConfig+0xd8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00b      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <TIM_TI1_SetConfig+0xdc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d007      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a21      	ldr	r2, [pc, #132]	; (8006adc <TIM_TI1_SetConfig+0xe0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_TI1_SetConfig+0x66>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <TIM_TI1_SetConfig+0xe4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <TIM_TI1_SetConfig+0x6a>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <TIM_TI1_SetConfig+0x6c>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e003      	b.n	8006a86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f023 030a 	bic.w	r3, r3, #10
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f003 030a 	and.w	r3, r3, #10
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40001800 	.word	0x40001800

08006ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 030a 	bic.w	r3, r3, #10
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f023 0210 	bic.w	r2, r3, #16
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	031b      	lsls	r3, r3, #12
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f023 0210 	bic.w	r2, r3, #16
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	031b      	lsls	r3, r3, #12
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 0303 	bic.w	r3, r3, #3
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	031b      	lsls	r3, r3, #12
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	031b      	lsls	r3, r3, #12
 8006cec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	021a      	lsls	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	609a      	str	r2, [r3, #8]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b087      	sub	sp, #28
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2201      	movs	r2, #1
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1a      	ldr	r2, [r3, #32]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	401a      	ands	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	431a      	orrs	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e06d      	b.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a30      	ldr	r2, [pc, #192]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2f      	ldr	r2, [pc, #188]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d108      	bne.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d022      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d01d      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a16      	ldr	r2, [pc, #88]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a15      	ldr	r2, [pc, #84]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10c      	bne.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40010400 	.word	0x40010400
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40001800 	.word	0x40001800

08006eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e040      	b.n	8006f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fa fd82 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f82c 	bl	8006f50 <UART_SetConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e022      	b.n	8006f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 faca 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb51 	bl	80075e8 <UART_CheckIdleState>
 8006f46:	4603      	mov	r3, r0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4bb1      	ldr	r3, [pc, #708]	; (8007244 <UART_SetConfig+0x2f4>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	6939      	ldr	r1, [r7, #16]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a9f      	ldr	r2, [pc, #636]	; (8007248 <UART_SetConfig+0x2f8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d121      	bne.n	8007014 <UART_SetConfig+0xc4>
 8006fd0:	4b9e      	ldr	r3, [pc, #632]	; (800724c <UART_SetConfig+0x2fc>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d816      	bhi.n	800700c <UART_SetConfig+0xbc>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x94>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ff5 	.word	0x08006ff5
 8006fe8:	08007001 	.word	0x08007001
 8006fec:	08006ffb 	.word	0x08006ffb
 8006ff0:	08007007 	.word	0x08007007
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e151      	b.n	800729e <UART_SetConfig+0x34e>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e14e      	b.n	800729e <UART_SetConfig+0x34e>
 8007000:	2304      	movs	r3, #4
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e14b      	b.n	800729e <UART_SetConfig+0x34e>
 8007006:	2308      	movs	r3, #8
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e148      	b.n	800729e <UART_SetConfig+0x34e>
 800700c:	2310      	movs	r3, #16
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	bf00      	nop
 8007012:	e144      	b.n	800729e <UART_SetConfig+0x34e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a8d      	ldr	r2, [pc, #564]	; (8007250 <UART_SetConfig+0x300>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d134      	bne.n	8007088 <UART_SetConfig+0x138>
 800701e:	4b8b      	ldr	r3, [pc, #556]	; (800724c <UART_SetConfig+0x2fc>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	2b0c      	cmp	r3, #12
 800702a:	d829      	bhi.n	8007080 <UART_SetConfig+0x130>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0xe4>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007069 	.word	0x08007069
 8007038:	08007081 	.word	0x08007081
 800703c:	08007081 	.word	0x08007081
 8007040:	08007081 	.word	0x08007081
 8007044:	08007075 	.word	0x08007075
 8007048:	08007081 	.word	0x08007081
 800704c:	08007081 	.word	0x08007081
 8007050:	08007081 	.word	0x08007081
 8007054:	0800706f 	.word	0x0800706f
 8007058:	08007081 	.word	0x08007081
 800705c:	08007081 	.word	0x08007081
 8007060:	08007081 	.word	0x08007081
 8007064:	0800707b 	.word	0x0800707b
 8007068:	2300      	movs	r3, #0
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e117      	b.n	800729e <UART_SetConfig+0x34e>
 800706e:	2302      	movs	r3, #2
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e114      	b.n	800729e <UART_SetConfig+0x34e>
 8007074:	2304      	movs	r3, #4
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e111      	b.n	800729e <UART_SetConfig+0x34e>
 800707a:	2308      	movs	r3, #8
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e10e      	b.n	800729e <UART_SetConfig+0x34e>
 8007080:	2310      	movs	r3, #16
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	bf00      	nop
 8007086:	e10a      	b.n	800729e <UART_SetConfig+0x34e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a71      	ldr	r2, [pc, #452]	; (8007254 <UART_SetConfig+0x304>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d120      	bne.n	80070d4 <UART_SetConfig+0x184>
 8007092:	4b6e      	ldr	r3, [pc, #440]	; (800724c <UART_SetConfig+0x2fc>)
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800709c:	2b10      	cmp	r3, #16
 800709e:	d00f      	beq.n	80070c0 <UART_SetConfig+0x170>
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d802      	bhi.n	80070aa <UART_SetConfig+0x15a>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <UART_SetConfig+0x164>
 80070a8:	e010      	b.n	80070cc <UART_SetConfig+0x17c>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d005      	beq.n	80070ba <UART_SetConfig+0x16a>
 80070ae:	2b30      	cmp	r3, #48	; 0x30
 80070b0:	d009      	beq.n	80070c6 <UART_SetConfig+0x176>
 80070b2:	e00b      	b.n	80070cc <UART_SetConfig+0x17c>
 80070b4:	2300      	movs	r3, #0
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e0f1      	b.n	800729e <UART_SetConfig+0x34e>
 80070ba:	2302      	movs	r3, #2
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e0ee      	b.n	800729e <UART_SetConfig+0x34e>
 80070c0:	2304      	movs	r3, #4
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e0eb      	b.n	800729e <UART_SetConfig+0x34e>
 80070c6:	2308      	movs	r3, #8
 80070c8:	77fb      	strb	r3, [r7, #31]
 80070ca:	e0e8      	b.n	800729e <UART_SetConfig+0x34e>
 80070cc:	2310      	movs	r3, #16
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	bf00      	nop
 80070d2:	e0e4      	b.n	800729e <UART_SetConfig+0x34e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5f      	ldr	r2, [pc, #380]	; (8007258 <UART_SetConfig+0x308>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d120      	bne.n	8007120 <UART_SetConfig+0x1d0>
 80070de:	4b5b      	ldr	r3, [pc, #364]	; (800724c <UART_SetConfig+0x2fc>)
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d00f      	beq.n	800710c <UART_SetConfig+0x1bc>
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d802      	bhi.n	80070f6 <UART_SetConfig+0x1a6>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <UART_SetConfig+0x1b0>
 80070f4:	e010      	b.n	8007118 <UART_SetConfig+0x1c8>
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d005      	beq.n	8007106 <UART_SetConfig+0x1b6>
 80070fa:	2bc0      	cmp	r3, #192	; 0xc0
 80070fc:	d009      	beq.n	8007112 <UART_SetConfig+0x1c2>
 80070fe:	e00b      	b.n	8007118 <UART_SetConfig+0x1c8>
 8007100:	2300      	movs	r3, #0
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e0cb      	b.n	800729e <UART_SetConfig+0x34e>
 8007106:	2302      	movs	r3, #2
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e0c8      	b.n	800729e <UART_SetConfig+0x34e>
 800710c:	2304      	movs	r3, #4
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e0c5      	b.n	800729e <UART_SetConfig+0x34e>
 8007112:	2308      	movs	r3, #8
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e0c2      	b.n	800729e <UART_SetConfig+0x34e>
 8007118:	2310      	movs	r3, #16
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	bf00      	nop
 800711e:	e0be      	b.n	800729e <UART_SetConfig+0x34e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a4d      	ldr	r2, [pc, #308]	; (800725c <UART_SetConfig+0x30c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d124      	bne.n	8007174 <UART_SetConfig+0x224>
 800712a:	4b48      	ldr	r3, [pc, #288]	; (800724c <UART_SetConfig+0x2fc>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d012      	beq.n	8007160 <UART_SetConfig+0x210>
 800713a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713e:	d802      	bhi.n	8007146 <UART_SetConfig+0x1f6>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <UART_SetConfig+0x204>
 8007144:	e012      	b.n	800716c <UART_SetConfig+0x21c>
 8007146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800714a:	d006      	beq.n	800715a <UART_SetConfig+0x20a>
 800714c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007150:	d009      	beq.n	8007166 <UART_SetConfig+0x216>
 8007152:	e00b      	b.n	800716c <UART_SetConfig+0x21c>
 8007154:	2300      	movs	r3, #0
 8007156:	77fb      	strb	r3, [r7, #31]
 8007158:	e0a1      	b.n	800729e <UART_SetConfig+0x34e>
 800715a:	2302      	movs	r3, #2
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e09e      	b.n	800729e <UART_SetConfig+0x34e>
 8007160:	2304      	movs	r3, #4
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e09b      	b.n	800729e <UART_SetConfig+0x34e>
 8007166:	2308      	movs	r3, #8
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e098      	b.n	800729e <UART_SetConfig+0x34e>
 800716c:	2310      	movs	r3, #16
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	bf00      	nop
 8007172:	e094      	b.n	800729e <UART_SetConfig+0x34e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a39      	ldr	r2, [pc, #228]	; (8007260 <UART_SetConfig+0x310>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d124      	bne.n	80071c8 <UART_SetConfig+0x278>
 800717e:	4b33      	ldr	r3, [pc, #204]	; (800724c <UART_SetConfig+0x2fc>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d012      	beq.n	80071b4 <UART_SetConfig+0x264>
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007192:	d802      	bhi.n	800719a <UART_SetConfig+0x24a>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <UART_SetConfig+0x258>
 8007198:	e012      	b.n	80071c0 <UART_SetConfig+0x270>
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d006      	beq.n	80071ae <UART_SetConfig+0x25e>
 80071a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a4:	d009      	beq.n	80071ba <UART_SetConfig+0x26a>
 80071a6:	e00b      	b.n	80071c0 <UART_SetConfig+0x270>
 80071a8:	2301      	movs	r3, #1
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e077      	b.n	800729e <UART_SetConfig+0x34e>
 80071ae:	2302      	movs	r3, #2
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e074      	b.n	800729e <UART_SetConfig+0x34e>
 80071b4:	2304      	movs	r3, #4
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e071      	b.n	800729e <UART_SetConfig+0x34e>
 80071ba:	2308      	movs	r3, #8
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e06e      	b.n	800729e <UART_SetConfig+0x34e>
 80071c0:	2310      	movs	r3, #16
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	bf00      	nop
 80071c6:	e06a      	b.n	800729e <UART_SetConfig+0x34e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a25      	ldr	r2, [pc, #148]	; (8007264 <UART_SetConfig+0x314>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d124      	bne.n	800721c <UART_SetConfig+0x2cc>
 80071d2:	4b1e      	ldr	r3, [pc, #120]	; (800724c <UART_SetConfig+0x2fc>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e0:	d012      	beq.n	8007208 <UART_SetConfig+0x2b8>
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	d802      	bhi.n	80071ee <UART_SetConfig+0x29e>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <UART_SetConfig+0x2ac>
 80071ec:	e012      	b.n	8007214 <UART_SetConfig+0x2c4>
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f2:	d006      	beq.n	8007202 <UART_SetConfig+0x2b2>
 80071f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071f8:	d009      	beq.n	800720e <UART_SetConfig+0x2be>
 80071fa:	e00b      	b.n	8007214 <UART_SetConfig+0x2c4>
 80071fc:	2300      	movs	r3, #0
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e04d      	b.n	800729e <UART_SetConfig+0x34e>
 8007202:	2302      	movs	r3, #2
 8007204:	77fb      	strb	r3, [r7, #31]
 8007206:	e04a      	b.n	800729e <UART_SetConfig+0x34e>
 8007208:	2304      	movs	r3, #4
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e047      	b.n	800729e <UART_SetConfig+0x34e>
 800720e:	2308      	movs	r3, #8
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	e044      	b.n	800729e <UART_SetConfig+0x34e>
 8007214:	2310      	movs	r3, #16
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	bf00      	nop
 800721a:	e040      	b.n	800729e <UART_SetConfig+0x34e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a11      	ldr	r2, [pc, #68]	; (8007268 <UART_SetConfig+0x318>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d139      	bne.n	800729a <UART_SetConfig+0x34a>
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <UART_SetConfig+0x2fc>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007234:	d027      	beq.n	8007286 <UART_SetConfig+0x336>
 8007236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800723a:	d817      	bhi.n	800726c <UART_SetConfig+0x31c>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01c      	beq.n	800727a <UART_SetConfig+0x32a>
 8007240:	e027      	b.n	8007292 <UART_SetConfig+0x342>
 8007242:	bf00      	nop
 8007244:	efff69f3 	.word	0xefff69f3
 8007248:	40011000 	.word	0x40011000
 800724c:	40023800 	.word	0x40023800
 8007250:	40004400 	.word	0x40004400
 8007254:	40004800 	.word	0x40004800
 8007258:	40004c00 	.word	0x40004c00
 800725c:	40005000 	.word	0x40005000
 8007260:	40011400 	.word	0x40011400
 8007264:	40007800 	.word	0x40007800
 8007268:	40007c00 	.word	0x40007c00
 800726c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007270:	d006      	beq.n	8007280 <UART_SetConfig+0x330>
 8007272:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007276:	d009      	beq.n	800728c <UART_SetConfig+0x33c>
 8007278:	e00b      	b.n	8007292 <UART_SetConfig+0x342>
 800727a:	2300      	movs	r3, #0
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e00e      	b.n	800729e <UART_SetConfig+0x34e>
 8007280:	2302      	movs	r3, #2
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e00b      	b.n	800729e <UART_SetConfig+0x34e>
 8007286:	2304      	movs	r3, #4
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e008      	b.n	800729e <UART_SetConfig+0x34e>
 800728c:	2308      	movs	r3, #8
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e005      	b.n	800729e <UART_SetConfig+0x34e>
 8007292:	2310      	movs	r3, #16
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	bf00      	nop
 8007298:	e001      	b.n	800729e <UART_SetConfig+0x34e>
 800729a:	2310      	movs	r3, #16
 800729c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d17f      	bne.n	80073a8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80072a8:	7ffb      	ldrb	r3, [r7, #31]
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d85c      	bhi.n	8007368 <UART_SetConfig+0x418>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <UART_SetConfig+0x364>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072d9 	.word	0x080072d9
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	08007319 	.word	0x08007319
 80072c0:	08007369 	.word	0x08007369
 80072c4:	08007331 	.word	0x08007331
 80072c8:	08007369 	.word	0x08007369
 80072cc:	08007369 	.word	0x08007369
 80072d0:	08007369 	.word	0x08007369
 80072d4:	08007351 	.word	0x08007351
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d8:	f7fe f8bc 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 80072dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	005a      	lsls	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	441a      	add	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	61bb      	str	r3, [r7, #24]
        break;
 80072f6:	e03a      	b.n	800736e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f8:	f7fe f8c0 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 80072fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	005a      	lsls	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	b29b      	uxth	r3, r3
 8007314:	61bb      	str	r3, [r7, #24]
        break;
 8007316:	e02a      	b.n	800736e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	085a      	lsrs	r2, r3, #1
 800731e:	4b5f      	ldr	r3, [pc, #380]	; (800749c <UART_SetConfig+0x54c>)
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6852      	ldr	r2, [r2, #4]
 8007326:	fbb3 f3f2 	udiv	r3, r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	61bb      	str	r3, [r7, #24]
        break;
 800732e:	e01e      	b.n	800736e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007330:	f7fd ffac 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8007334:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	005a      	lsls	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	441a      	add	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	61bb      	str	r3, [r7, #24]
        break;
 800734e:	e00e      	b.n	800736e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	b29b      	uxth	r3, r3
 8007364:	61bb      	str	r3, [r7, #24]
        break;
 8007366:	e002      	b.n	800736e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
        break;
 800736c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b0f      	cmp	r3, #15
 8007372:	d916      	bls.n	80073a2 <UART_SetConfig+0x452>
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737a:	d212      	bcs.n	80073a2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	b29b      	uxth	r3, r3
 8007380:	f023 030f 	bic.w	r3, r3, #15
 8007384:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	b29a      	uxth	r2, r3
 8007392:	897b      	ldrh	r3, [r7, #10]
 8007394:	4313      	orrs	r3, r2
 8007396:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	897a      	ldrh	r2, [r7, #10]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e070      	b.n	8007484 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
 80073a6:	e06d      	b.n	8007484 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d859      	bhi.n	8007462 <UART_SetConfig+0x512>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <UART_SetConfig+0x464>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073f7 	.word	0x080073f7
 80073bc:	08007415 	.word	0x08007415
 80073c0:	08007463 	.word	0x08007463
 80073c4:	0800742d 	.word	0x0800742d
 80073c8:	08007463 	.word	0x08007463
 80073cc:	08007463 	.word	0x08007463
 80073d0:	08007463 	.word	0x08007463
 80073d4:	0800744b 	.word	0x0800744b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fe f83c 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 80073dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085a      	lsrs	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	61bb      	str	r3, [r7, #24]
        break;
 80073f4:	e038      	b.n	8007468 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f6:	f7fe f841 	bl	800547c <HAL_RCC_GetPCLK2Freq>
 80073fa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085a      	lsrs	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	61bb      	str	r3, [r7, #24]
        break;
 8007412:	e029      	b.n	8007468 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	085a      	lsrs	r2, r3, #1
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <UART_SetConfig+0x550>)
 800741c:	4413      	add	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6852      	ldr	r2, [r2, #4]
 8007422:	fbb3 f3f2 	udiv	r3, r3, r2
 8007426:	b29b      	uxth	r3, r3
 8007428:	61bb      	str	r3, [r7, #24]
        break;
 800742a:	e01d      	b.n	8007468 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742c:	f7fd ff2e 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8007430:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	085a      	lsrs	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	441a      	add	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	b29b      	uxth	r3, r3
 8007446:	61bb      	str	r3, [r7, #24]
        break;
 8007448:	e00e      	b.n	8007468 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	fbb2 f3f3 	udiv	r3, r2, r3
 800745c:	b29b      	uxth	r3, r3
 800745e:	61bb      	str	r3, [r7, #24]
        break;
 8007460:	e002      	b.n	8007468 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
        break;
 8007466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d908      	bls.n	8007480 <UART_SetConfig+0x530>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007474:	d204      	bcs.n	8007480 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	e001      	b.n	8007484 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	01e84800 	.word	0x01e84800
 80074a0:	00f42400 	.word	0x00f42400

080074a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01a      	beq.n	80075ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a2:	d10a      	bne.n	80075ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075f6:	f7fa fb53 	bl	8001ca0 <HAL_GetTick>
 80075fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b08      	cmp	r3, #8
 8007608:	d10e      	bne.n	8007628 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f814 	bl	8007646 <UART_WaitOnFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e00a      	b.n	800763e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	603b      	str	r3, [r7, #0]
 8007652:	4613      	mov	r3, r2
 8007654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	e05d      	b.n	8007714 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d059      	beq.n	8007714 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007660:	f7fa fb1e 	bl	8001ca0 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <UART_WaitOnFlagUntilTimeout+0x30>
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d11b      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007684:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e042      	b.n	8007734 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02b      	beq.n	8007714 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ca:	d123      	bne.n	8007714 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e00f      	b.n	8007734 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4013      	ands	r3, r2
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	429a      	cmp	r2, r3
 8007730:	d092      	beq.n	8007658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <__errno>:
 800773c:	4b01      	ldr	r3, [pc, #4]	; (8007744 <__errno+0x8>)
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	2000000c 	.word	0x2000000c

08007748 <__libc_init_array>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0d      	ldr	r6, [pc, #52]	; (8007780 <__libc_init_array+0x38>)
 800774c:	4c0d      	ldr	r4, [pc, #52]	; (8007784 <__libc_init_array+0x3c>)
 800774e:	1ba4      	subs	r4, r4, r6
 8007750:	10a4      	asrs	r4, r4, #2
 8007752:	2500      	movs	r5, #0
 8007754:	42a5      	cmp	r5, r4
 8007756:	d109      	bne.n	800776c <__libc_init_array+0x24>
 8007758:	4e0b      	ldr	r6, [pc, #44]	; (8007788 <__libc_init_array+0x40>)
 800775a:	4c0c      	ldr	r4, [pc, #48]	; (800778c <__libc_init_array+0x44>)
 800775c:	f000 f8a0 	bl	80078a0 <_init>
 8007760:	1ba4      	subs	r4, r4, r6
 8007762:	10a4      	asrs	r4, r4, #2
 8007764:	2500      	movs	r5, #0
 8007766:	42a5      	cmp	r5, r4
 8007768:	d105      	bne.n	8007776 <__libc_init_array+0x2e>
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007770:	4798      	blx	r3
 8007772:	3501      	adds	r5, #1
 8007774:	e7ee      	b.n	8007754 <__libc_init_array+0xc>
 8007776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800777a:	4798      	blx	r3
 800777c:	3501      	adds	r5, #1
 800777e:	e7f2      	b.n	8007766 <__libc_init_array+0x1e>
 8007780:	080078e0 	.word	0x080078e0
 8007784:	080078e0 	.word	0x080078e0
 8007788:	080078e0 	.word	0x080078e0
 800778c:	080078e4 	.word	0x080078e4

08007790 <malloc>:
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <malloc+0xc>)
 8007792:	4601      	mov	r1, r0
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	f000 b817 	b.w	80077c8 <_malloc_r>
 800779a:	bf00      	nop
 800779c:	2000000c 	.word	0x2000000c

080077a0 <memcpy>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	1e43      	subs	r3, r0, #1
 80077a4:	440a      	add	r2, r1
 80077a6:	4291      	cmp	r1, r2
 80077a8:	d100      	bne.n	80077ac <memcpy+0xc>
 80077aa:	bd10      	pop	{r4, pc}
 80077ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b4:	e7f7      	b.n	80077a6 <memcpy+0x6>

080077b6 <memset>:
 80077b6:	4402      	add	r2, r0
 80077b8:	4603      	mov	r3, r0
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d100      	bne.n	80077c0 <memset+0xa>
 80077be:	4770      	bx	lr
 80077c0:	f803 1b01 	strb.w	r1, [r3], #1
 80077c4:	e7f9      	b.n	80077ba <memset+0x4>
	...

080077c8 <_malloc_r>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	1ccd      	adds	r5, r1, #3
 80077cc:	f025 0503 	bic.w	r5, r5, #3
 80077d0:	3508      	adds	r5, #8
 80077d2:	2d0c      	cmp	r5, #12
 80077d4:	bf38      	it	cc
 80077d6:	250c      	movcc	r5, #12
 80077d8:	2d00      	cmp	r5, #0
 80077da:	4606      	mov	r6, r0
 80077dc:	db01      	blt.n	80077e2 <_malloc_r+0x1a>
 80077de:	42a9      	cmp	r1, r5
 80077e0:	d903      	bls.n	80077ea <_malloc_r+0x22>
 80077e2:	230c      	movs	r3, #12
 80077e4:	6033      	str	r3, [r6, #0]
 80077e6:	2000      	movs	r0, #0
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	f000 f857 	bl	800789c <__malloc_lock>
 80077ee:	4a21      	ldr	r2, [pc, #132]	; (8007874 <_malloc_r+0xac>)
 80077f0:	6814      	ldr	r4, [r2, #0]
 80077f2:	4621      	mov	r1, r4
 80077f4:	b991      	cbnz	r1, 800781c <_malloc_r+0x54>
 80077f6:	4c20      	ldr	r4, [pc, #128]	; (8007878 <_malloc_r+0xb0>)
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	b91b      	cbnz	r3, 8007804 <_malloc_r+0x3c>
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f83d 	bl	800787c <_sbrk_r>
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	4629      	mov	r1, r5
 8007806:	4630      	mov	r0, r6
 8007808:	f000 f838 	bl	800787c <_sbrk_r>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d124      	bne.n	800785a <_malloc_r+0x92>
 8007810:	230c      	movs	r3, #12
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	4630      	mov	r0, r6
 8007816:	f000 f842 	bl	800789e <__malloc_unlock>
 800781a:	e7e4      	b.n	80077e6 <_malloc_r+0x1e>
 800781c:	680b      	ldr	r3, [r1, #0]
 800781e:	1b5b      	subs	r3, r3, r5
 8007820:	d418      	bmi.n	8007854 <_malloc_r+0x8c>
 8007822:	2b0b      	cmp	r3, #11
 8007824:	d90f      	bls.n	8007846 <_malloc_r+0x7e>
 8007826:	600b      	str	r3, [r1, #0]
 8007828:	50cd      	str	r5, [r1, r3]
 800782a:	18cc      	adds	r4, r1, r3
 800782c:	4630      	mov	r0, r6
 800782e:	f000 f836 	bl	800789e <__malloc_unlock>
 8007832:	f104 000b 	add.w	r0, r4, #11
 8007836:	1d23      	adds	r3, r4, #4
 8007838:	f020 0007 	bic.w	r0, r0, #7
 800783c:	1ac3      	subs	r3, r0, r3
 800783e:	d0d3      	beq.n	80077e8 <_malloc_r+0x20>
 8007840:	425a      	negs	r2, r3
 8007842:	50e2      	str	r2, [r4, r3]
 8007844:	e7d0      	b.n	80077e8 <_malloc_r+0x20>
 8007846:	428c      	cmp	r4, r1
 8007848:	684b      	ldr	r3, [r1, #4]
 800784a:	bf16      	itet	ne
 800784c:	6063      	strne	r3, [r4, #4]
 800784e:	6013      	streq	r3, [r2, #0]
 8007850:	460c      	movne	r4, r1
 8007852:	e7eb      	b.n	800782c <_malloc_r+0x64>
 8007854:	460c      	mov	r4, r1
 8007856:	6849      	ldr	r1, [r1, #4]
 8007858:	e7cc      	b.n	80077f4 <_malloc_r+0x2c>
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d005      	beq.n	8007870 <_malloc_r+0xa8>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4630      	mov	r0, r6
 8007868:	f000 f808 	bl	800787c <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d0cf      	beq.n	8007810 <_malloc_r+0x48>
 8007870:	6025      	str	r5, [r4, #0]
 8007872:	e7db      	b.n	800782c <_malloc_r+0x64>
 8007874:	20000090 	.word	0x20000090
 8007878:	20000094 	.word	0x20000094

0800787c <_sbrk_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4c06      	ldr	r4, [pc, #24]	; (8007898 <_sbrk_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4605      	mov	r5, r0
 8007884:	4608      	mov	r0, r1
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	f7fa f944 	bl	8001b14 <_sbrk>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_sbrk_r+0x1a>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	b103      	cbz	r3, 8007896 <_sbrk_r+0x1a>
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000504 	.word	0x20000504

0800789c <__malloc_lock>:
 800789c:	4770      	bx	lr

0800789e <__malloc_unlock>:
 800789e:	4770      	bx	lr

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr
